IE.fModule({
    f: function(exports, require, module, global) {
        ;
    },
    fn: "declarationgeogebra.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('images/css/Image.css');
    },
    fn: "declarationimagecp.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        ;
    },
    fn: "declarationimageconnexionpn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        ;
    },
    fn: "declarationimagefaviconpn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('espace/css/LogoPN.css');
    },
    fn: "declarationimagelogopn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('images/css/Image.css');
        require('produit/css/ImagePN.css');
        require('DeclarationImageCP.js');
        require('DeclarationImageConnexionPN.js');
        require('DeclarationImageFaviconPN.js');
        require('DeclarationImageLogoPN.js');
    },
    fn: "declarationimagepn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('produit/css/curseur.css');
    },
    fn: "declarationcurseurpn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        ;
        require('produit/css/fonts.css');
    },
    fn: "declarationindexfont.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (!Object.keys) {
            Object.keys = (function() {
                'use strict';
                var hasOwnProperty = Object.prototype.hasOwnProperty,
                    hasDontEnumBug = !({
                        toString: null
                    }).propertyIsEnumerable('toString'),
                    dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
                    dontEnumsLength = dontEnums.length;
                return function(obj) {
                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                        throw new TypeError('Object.keys called on non-object');
                    }
                    var result = [],
                        prop, i;
                    for (prop in obj) {
                        if (hasOwnProperty.call(obj, prop)) {
                            result.push(prop);
                        }
                    }
                    if (hasDontEnumBug) {
                        for (i = 0; i < dontEnumsLength; i++) {
                            if (hasOwnProperty.call(obj, dontEnums[i])) {
                                result.push(dontEnums[i]);
                            }
                        }
                    }
                    return result;
                };
            }());
        }
        if (typeof Object.create !== 'function') {
            (function() {
                var F = function() {};
                Object.create = function(o) {
                    if (arguments.length > 1) {
                        throw Error('Second argument not supported');
                    }
                    if (o === null) {
                        throw Error('Cannot set a null [[Prototype]]');
                    }
                    if (typeof o !== 'object') {
                        throw TypeError('Argument must be an object');
                    }
                    F.prototype = o;
                    return new F();
                };
            })();
        }
        if (typeof Object.assign !== 'function') {
            (function() {
                Object.assign = function(target) {
                    'use strict';
                    if (target === undefined || target === null) {
                        throw new TypeError('Cannot convert undefined or null to object');
                    }
                    var output = Object(target);
                    for (var index = 1; index < arguments.length; index++) {
                        var source = arguments[index];
                        if (source !== undefined && source !== null) {
                            for (var nextKey in source) {
                                if (source.hasOwnProperty(nextKey)) {
                                    output[nextKey] = source[nextKey];
                                }
                            }
                        }
                    }
                    return output;
                };
            })();
        }
    },
    fn: "object.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        String.prototype.ucfirst = function() {
            return this.replace(this.charAt(0), this.charAt(0).toUpperCase());
        };
        if (!String.prototype.trim) {
            String.prototype.trim = function() {
                return this.replace(/^\s+|\s+$/g, '');
            };
        }
        String.prototype.ltrim = function() {
            return this.replace(/^\s+/, "");
        };
        String.prototype.rtrim = function() {
            return this.replace(/\s+$/, "");
        };
        String.prototype.AvecQuotes = function() {
            return '&quot;' + this + '&quot;';
        };
        String.prototype.enleverZero = function() {
            return parseFloat(this.replace(/,/g, ".")).toString();
        };
        String.prototype.premierCaractereEnHexa = function() {
            return this.charCodeAt(0).toString(16);
        };
        String.prototype.escapeJQ = function() {
            return this.replace(/(:|\.|\[|\]|\/)/g, '\\$1');
        };
        String.prototype.nl2br = function() {
            return this.replace(/\n/g, "<br />");
        };
        String.prototype.toHTML = function() {
            return !!this ? this.replace(/\r\n|\n|\r|&#32;/g, "<br />") : '';
        };
        if (!String.prototype.startsWith) {
            String.prototype.startsWith = function(searchString, position) {
                position = position || 0;
                return this.substr(position, searchString.length) === searchString;
            };
        }
        if (!String.prototype.endsWith) {
            String.prototype.endsWith = function(searchString, position) {
                var subjectString = this.toString();
                if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
                    position = subjectString.length;
                }
                position -= searchString.length;
                var lastIndex = subjectString.indexOf(searchString, position);
                return lastIndex !== -1 && lastIndex === position;
            };
        }
        if (!String.prototype.includes) {
            String.prototype.includes = function(search, start) {
                if (typeof start !== 'number') {
                    start = 0;
                }
                if (start + search.length > this.length) {
                    return false;
                } else {
                    return this.indexOf(search, start) !== -1;
                }
            };
        }
    },
    fn: "string.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (!Function.prototype.bind) {
            Function.prototype.bind = function(obj) {
                var slice = [].slice,
                    args = slice.call(arguments, 1),
                    self = this;
                var nop = function() {};
                var bound = function() {
                    return self.apply(this instanceof nop ? this : (obj || {}), args.concat(slice.call(arguments)));
                };
                nop.prototype = self.prototype;
                bound.prototype = new nop();
                return bound;
            };
        }
    },
    fn: "function.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        Math.borner = function(aValeur, aMin, aMax) {
            return Math.max(Math.min(aValeur, aMax), aMin);
        };
        Math.log10 = Math.log10 || function(x) {
            return Math.log(x) * Math.LOG10E;
        };
        (function() {
            function decimalAdjust(type, value, exp) {
                if (typeof exp === 'undefined' || +exp === 0) {
                    return Math[type](value);
                }
                value = +value;
                exp = +exp;
                if (value === null || isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
                    return NaN;
                }
                if (value < 0) {
                    return -decimalAdjust(type, -value, exp);
                }
                value = value.toString().split('e');
                value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
                value = value.toString().split('e');
                return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
            }
            if (!Math.round10) {
                Math.round10 = function(value, exp) {
                    return decimalAdjust('round', value, exp);
                };
            }
            if (!Math.floor10) {
                Math.floor10 = function(value, exp) {
                    return decimalAdjust('floor', value, exp);
                };
            }
            if (!Math.ceil10) {
                Math.ceil10 = function(value, exp) {
                    return decimalAdjust('ceil', value, exp);
                };
            }
        })();
    },
    fn: "math.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (!Array.isArray) {
            Array.isArray = function(arg) {
                return Object.prototype.toString.call(arg) === '[object Array]';
            };
        }
        if (!Array.from) {
            Array.from = (function() {
                var toStr = Object.prototype.toString;
                var isCallable = function(fn) {
                    return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
                };
                var toInteger = function(value) {
                    var number = Number(value);
                    if (isNaN(number)) {
                        return 0;
                    }
                    if (number === 0 || !isFinite(number)) {
                        return number;
                    }
                    return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
                };
                var maxSafeInteger = Math.pow(2, 53) - 1;
                var toLength = function(value) {
                    var len = toInteger(value);
                    return Math.min(Math.max(len, 0), maxSafeInteger);
                };
                return function from(arrayLike) {
                    var C = this;
                    var items = Object(arrayLike);
                    if (arrayLike == null) {
                        throw new TypeError("Array.from doit utiliser un objet semblable à un tableau - null ou undefined ne peuvent pas être utilisés");
                    }
                    var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
                    var T;
                    if (typeof mapFn !== 'undefined') {
                        if (!isCallable(mapFn)) {
                            throw new TypeError('Array.from: lorsqu il est utilisé le deuxième argument doit être une fonction');
                        }
                        if (arguments.length > 2) {
                            T = arguments[2];
                        }
                    }
                    var len = toLength(items.length);
                    var A = isCallable(C) ? Object(new C(len)) : new Array(len);
                    var k = 0;
                    var kValue;
                    while (k < len) {
                        kValue = items[k];
                        if (mapFn) {
                            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
                        } else {
                            A[k] = kValue;
                        }
                        k += 1;
                    }
                    A.length = len;
                    return A;
                };
            }());
        }
    },
    fn: "array.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (!Date.now) {
            Date.now = function now() {
                return new Date().getTime();
            };
        }
        Date.prototype.estAnneeBissextile = function() {
            return (new Date(this.getFullYear(), 1, 29).getDate() === 29);
        };
    },
    fn: "date.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('es6-promise.auto.min.js');
        require('es6-promise.auto.js');
        if (!Promise.prototype['finally']) {
            Promise.prototype['finally'] = function finallyPolyfill(callback) {
                var constructor = this.constructor;
                return this.then(function(value) {
                    return constructor.resolve(callback()).then(function() {
                        return value;
                    });
                }, function(reason) {
                    return constructor.resolve(callback()).then(function() {
                        throw reason;
                    });
                });
            };
        }
    },
    fn: "promise.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Object.js');
        require('String.js');
        require('Function.js');
        require('Math.js');
        require('Array.js');
        require('Date.js');
        require('Promise.js');
    },
    fn: "declarationextensionsobjetnatif.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('NamespaceIE.js');
        var GUID = (function GUID() {
            var lGUID_id = 1,
                lGUID_ClassCss = 1;
            return {
                getId: function() {
                    var lResult = 'id_' + lGUID_id;
                    lGUID_id += 1;
                    return lResult;
                },
                getClassCss: function() {
                    var lResult = 'c_' + lGUID_ClassCss;
                    lGUID_ClassCss += 1;
                    return lResult;
                },
                generateur: function() {
                    var lGUID = 1,
                        lCompteur = 0;
                    this.get = function() {
                        var lResult = 'g';
                        if (lCompteur > 0) {
                            lResult += lCompteur + 'x';
                        }
                        lResult += lGUID;
                        if (lGUID === Number.MAX_VALUE) {
                            lGUID = 1;
                            lCompteur += 1;
                        } else {
                            lGUID += 1;
                        }
                        return lResult;
                    };
                }
            };
        }());
        module.exports = GUID;
    },
    fn: "guid.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('namespaceie.js');
        require('DeclarationExtensionsObjetNatif.js');

        function MethodesObjet() {}
        MethodesObjet.getObjectClass = function(aObjet) {
            if (aObjet && aObjet.constructor) {
                return MethodesObjet.getNomClassDeConstructeur(aObjet.constructor);
            }
            return undefined;
        };
        MethodesObjet.getNomClassDeConstructeur = function(aConstructeur) {
            if (aConstructeur && aConstructeur.name) {
                return aConstructeur.name;
            }
            if (aConstructeur && aConstructeur.toString && MethodesObjet.isFunction(aConstructeur)) {
                var T = aConstructeur.toString().match(/function\s*(\w+)/);
                if (T && T.length === 2) {
                    return T[1];
                }
            }
            return undefined;
        };

        function _dupliquer(aObjet, _aProfondeur, _aDuplicationParesseuse, aProprietaires, aProprietairesCopie) {
            if ((!aObjet) || (!MethodesObjet.isObject(aObjet))) {
                return aObjet;
            }
            if (aObjet.dupliquer) {
                return aObjet.dupliquer();
            }
            if (Object.prototype.toString.call(aObjet) === '[object File]') {
                return aObjet;
            }
            if (_aProfondeur > 1000) {
                return aObjet;
            }
            var lIndice = -1;
            if (aProprietaires.length > 0) {
                lIndice = aProprietaires.indexOf(aObjet);
            }
            if (lIndice >= 0) {
                return aProprietairesCopie[lIndice];
            }
            var lObjetDuplique, lProp;
            if (aObjet.join && MethodesObjet.isArray(aObjet)) {
                lObjetDuplique = new Array(aObjet.length);
            } else if (aObjet.setTime && MethodesObjet.isDate(aObjet)) {
                lObjetDuplique = new Date();
                lObjetDuplique.setTime(aObjet.getTime());
            } else if (MethodesObjet.isBlob(aObjet)) {
                lObjetDuplique = new Blob([aObjet], {
                    type: aObjet.type
                });
            } else {
                lObjetDuplique = Object.create(aObjet.constructor.prototype);
            }
            var lProfondeur = _aProfondeur + 1;
            aProprietaires.push(aObjet);
            aProprietairesCopie.push(lObjetDuplique);
            try {
                var lKeys = Object.keys(aObjet),
                    i;
                for (i = 0; i < lKeys.length; i++) {
                    lProp = lKeys[i];
                    var lValeur = aObjet[lProp];
                    if (MethodesObjet.isObject(lValeur)) {
                        if (_aDuplicationParesseuse && (_aProfondeur === 0)) {
                            lObjetDuplique[lProp] = lValeur;
                        } else {
                            lObjetDuplique[lProp] = _dupliquer(lValeur, lProfondeur, false, aProprietaires, aProprietairesCopie);
                        }
                    } else {
                        lObjetDuplique[lProp] = lValeur;
                    }
                }
            } finally {
                aProprietaires.pop();
                aProprietairesCopie.pop();
            }
            return lObjetDuplique;
        }
        MethodesObjet.dupliquer = function(aObjet, aDuplicationParesseuse) {
            return _dupliquer(aObjet, 0, aDuplicationParesseuse, [], []);
        };
        MethodesObjet.isArray = function(object) {
            return Array.isArray(object);
        };
        MethodesObjet.isFunction = function(object) {
            return typeof object === 'function';
        };
        MethodesObjet.isString = function(object) {
            return Object.prototype.toString.call(object) === '[object String]';
        };
        MethodesObjet.isNumber = function(object) {
            return !isNaN(object) && Object.prototype.toString.call(object) === '[object Number]';
        };
        MethodesObjet.isUndefined = function(object) {
            return typeof object === 'undefined';
        };
        MethodesObjet.isObject = function(object) {
            return !!object && typeof object === 'object';
        };
        MethodesObjet.isDate = function(object) {
            return Object.prototype.toString.call(object) === '[object Date]';
        };
        MethodesObjet.isNan = function(object) {
            var rdigit = /\d/;
            return object === null || object === undefined || !rdigit.test(object) || isNaN(object);
        };
        MethodesObjet.isWindow = function(object) {
            return !!object && typeof object === 'object' && 'setInterval' in object;
        };
        MethodesObjet.isArguments = function(object) {
            return Object.prototype.toString.call(object) === '[object Arguments]';
        };
        MethodesObjet.isBlob = function(object) {
            return Object.prototype.toString.call(object) === '[object Blob]';
        };
        MethodesObjet.get = function(aObjet, aAccesseur) {
            var lObjet, i, lNomProp, lIndexProp;
            if (!aObjet || !aAccesseur || !aAccesseur.length) {
                return aObjet;
            }
            if (aAccesseur.trim && aAccesseur.split) {
                aAccesseur = aAccesseur.split('.');
            }
            var lLength = aAccesseur.length;
            if (lLength === 0) {
                return aObjet;
            }
            lObjet = aObjet;
            for (i = 0; i < lLength; i++) {
                if (!lObjet) {
                    return undefined;
                }
                lNomProp = aAccesseur[i];
                lIndexProp = false;
                if (lNomProp.indexOf('[') > 0 && lNomProp.indexOf(']') === lNomProp.length - 1) {
                    lIndexProp = lNomProp.match(/\[['"]?(.*)['"]?\]$/)[1];
                    lNomProp = lNomProp.replace(/\[['"]?(.*)['"]?\]$/, '');
                }
                lObjet = lObjet[lNomProp];
                if (lIndexProp) {
                    lObjet = lObjet[lIndexProp];
                }
            }
            return lObjet;
        };
        MethodesObjet.set = function(aObjet, aAccesseur, aValue) {
            if (aAccesseur && aAccesseur.trim && aAccesseur.split) {
                aAccesseur = aAccesseur.split('.');
            }
            var lConteneur, lNomProp;
            if (!aAccesseur || !aAccesseur.length) {
                return false;
            }
            lNomProp = aAccesseur[aAccesseur.length - 1];
            if (aAccesseur.length === 1) {
                lConteneur = aObjet;
            } else {
                lConteneur = MethodesObjet.get(aObjet, aAccesseur.slice(0, aAccesseur.length - 1));
            }
            if (lConteneur && lNomProp) {
                lConteneur[lNomProp] = aValue;
                return true;
            }
            return false;
        };
        MethodesObjet.nomProprieteDeValeur = function(aObjet, aValeur) {
            var lKeys = Object.keys(aObjet),
                i;
            for (i = 0; i < lKeys.length; i++) {
                if (aValeur === aObjet[lKeys[i]]) {
                    return lKeys[i];
                }
            }
            return '';
        };

        function _indenterEnumere(aEnumere, aParam) {
            var lProp;
            if (!aParam) {
                aParam = {};
            }
            aParam.indice = aParam.indice || 0;
            if (!aEnumere) {
                return;
            }
            for (lProp in aEnumere) {
                if (MethodesObjet.isNumber(aEnumere[lProp])) {
                    aEnumere[lProp] = aParam.indice;
                    aParam.indice += 1;
                } else if (MethodesObjet.isObject(aEnumere[lProp])) {
                    _indenterEnumere(aEnumere[lProp], aParam);
                }
            }
        }
        MethodesObjet.indenterEnumere = function(aEnumere, aIndiceInitiale) {
            if (MethodesObjet.isObject(aEnumere)) {
                _indenterEnumere(aEnumere, {
                    indice: aIndiceInitiale
                });
            }
        };

        function _affecterValeurEnumere(aEnumere) {
            var lProp, i;
            if (!aEnumere) {
                return;
            }
            var lKeys = Object.keys(aEnumere);
            for (i = 0; i < lKeys.length; i++) {
                lProp = lKeys[i];
                if (MethodesObjet.isObject(aEnumere[lProp])) {
                    _affecterValeurEnumere(aEnumere[lProp]);
                } else {
                    aEnumere[lProp] = lProp;
                }
            }
        }
        MethodesObjet.affecterValeurEnumere = function(aEnumere) {
            if (MethodesObjet.isObject(aEnumere)) {
                _affecterValeurEnumere(aEnumere);
            }
        };
        MethodesObjet.objetsIdentiques = function(aObjet1, aObjet2, aComparaisonProfonde) {
            if (!aObjet1 && aObjet2 || aObjet1 && !aObjet2) {
                return false;
            }
            if (!aObjet1 && !aObjet2) {
                return true;
            }
            if (aObjet1 === aObjet2) {
                return true;
            }
            var i, lKeys = Object.keys(aObjet1),
                lDejaCompare = {};
            for (i = 0; i < lKeys.length; i++) {
                if (aObjet1[lKeys[i]] !== aObjet2[lKeys[i]]) {
                    if (aComparaisonProfonde === true &&
                        MethodesObjet.isObject(aObjet1[lKeys[i]]) &&
                        MethodesObjet.isObject(aObjet2[lKeys[i]])) {
                        lDejaCompare[lKeys[i]] = true;
                        if (!MethodesObjet.objetsIdentiques(aObjet1[lKeys[i]], aObjet2[lKeys[i]], true)) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
            }
            lKeys = Object.keys(aObjet2);
            for (i = 0; i < lKeys.length; i++) {
                if (aObjet1[lKeys[i]] !== aObjet2[lKeys[i]]) {
                    if (aComparaisonProfonde === true) {
                        if (!lDejaCompare[lKeys[i]] &&
                            MethodesObjet.isObject(aObjet1[lKeys[i]]) &&
                            MethodesObjet.isObject(aObjet2[lKeys[i]]) &&
                            !MethodesObjet.objetsIdentiques(aObjet1[lKeys[i]], aObjet2[lKeys[i]], true)) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
            }
            return true;
        };

        function _getNomPile(aNom) {
            return '__inherited_' + aNom + '__';
        }

        function _getProtoPere(aObjet) {
            try {
                return aObjet.constructor.prototype.__pere__;
            } catch (e) {
                return null;
            }
        }

        function _empilerPrototype(aObjet, aNom, aImplementationMethode) {
            var lProtoPere, lProtoFils;
            var lNomPile = _getNomPile(aNom);
            if (aObjet[lNomPile]) {
                lProtoFils = aObjet[lNomPile].proto;
                lProtoPere = _getProtoPere(aObjet[lNomPile].proto);
                aObjet[lNomPile].compteur++;
                aObjet[lNomPile].proto = lProtoPere;
            } else {
                lProtoFils = aObjet.constructor ? aObjet.constructor.prototype : null;
                lProtoPere = _getProtoPere(aObjet);
                aObjet[lNomPile] = {
                    proto: lProtoPere,
                    compteur: 0
                };
            }
            if (aImplementationMethode) {
                while (lProtoFils && !lProtoFils.hasOwnProperty(aNom) && _getProtoPere(lProtoPere)) {
                    lProtoFils = lProtoPere;
                    aObjet[lNomPile].proto = lProtoPere = _getProtoPere(lProtoPere);
                }
                while (lProtoPere && !lProtoPere.hasOwnProperty(aNom)) {
                    aObjet[lNomPile].proto = lProtoPere = _getProtoPere(lProtoPere);
                }
            }
            return aObjet[lNomPile].proto;
        }

        function _depilerPrototype(aObjet, aNom) {
            aObjet[_getNomPile(aNom)].compteur--;
            if (aObjet[_getNomPile(aNom)].compteur < 0) {
                delete aObjet[_getNomPile(aNom)];
            }
        }

        function inheritedCreate() {
            var lNomPileConstructeur = '_constructeur';
            var lProtoPere = _empilerPrototype(this, lNomPileConstructeur);
            try {
                if (lProtoPere && lProtoPere.constructor) {
                    if (arguments &&
                        arguments.length === 1 &&
                        arguments[0] &&
                        MethodesObjet.isArguments(arguments[0])) {
                        lProtoPere.constructor.apply(this, arguments[0]);
                    } else {
                        lProtoPere.constructor.apply(this, arguments);
                    }
                }
            } finally {
                _depilerPrototype(this, lNomPileConstructeur);
            }
        }

        function inherited(aMethode) {
            if (!MethodesObjet.isString(aMethode)) {
                return;
            }
            var lResult;
            var lProtoPere = _empilerPrototype(this, aMethode, true);
            try {
                if (lProtoPere && lProtoPere[aMethode]) {
                    var lArguments = Array.prototype.slice.call(arguments, 1);
                    if (lArguments &&
                        lArguments.length === 1 &&
                        lArguments[0] &&
                        MethodesObjet.isArguments(lArguments[0])) {
                        lResult = lProtoPere[aMethode].apply(this, lArguments[0]);
                    } else {
                        lResult = lProtoPere[aMethode].apply(this, lArguments);
                    }
                }
            } finally {
                _depilerPrototype(this, aMethode);
            }
            return lResult;
        }
        MethodesObjet.heritagePrototype = function(aClasseFille, aClasseMere) {
            Object.assign(aClasseMere.prototype, {
                inheritedCreate: inheritedCreate,
                inherited: inherited
            });

            function Local() {}
            Local.prototype = aClasseMere.prototype;
            aClasseFille.prototype = new Local();
            aClasseFille.prototype.constructor = aClasseFille;
            aClasseMere.prototype.constructor = aClasseMere;
            aClasseFille.prototype.__pere__ = aClasseMere.prototype;
        };
        module.exports = MethodesObjet;
    },
    fn: "methodesobjet.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('NamespaceIE.js');
        require('DeclarationJQuery.js');
        require('divers.js');
        var GUID = require('GUID.js');
        var MethodesObjet = require('MethodesObjet.js');
        var lGUID_GlobalNomPile = new GUID.generateur();

        function ObjetInvocateur() {
            this.pile = {};
            this.pileEvents = {};
            this.generateurGUID = new GUID.generateur();
            this.nomPileInstance = '__pileInvocateur__' + lGUID_GlobalNomPile.get();
        }

        function _abonner(aParams) {
            if (!aParams.e || !aParams.e.toString) {
                return null;
            }
            aParams.e = aParams.e.toString();
            if (!aParams.callB) {
                return null;
            }
            if (aParams.unicite) {
                this.desabonner(aParams.e, aParams.callB, aParams.inst);
            }
            if (!this.pileEvents[aParams.e]) {
                this.pileEvents[aParams.e] = {};
            }
            var lId = this.generateurGUID.get();
            aParams.id = lId;
            this.pile[lId] = aParams;
            this.pileEvents[aParams.e][lId] = true;
            if (aParams.inst) {
                if (!aParams.inst[this.nomPileInstance]) {
                    aParams.inst[this.nomPileInstance] = {};
                }
                aParams.inst[this.nomPileInstance][lId] = true;
            }
            return lId;
        }

        function _supprimerIds(aIds) {
            if (!aIds) {
                return;
            }
            var lId, i, lElement, lInstance, lLength;
            for (i = 0, lLength = aIds.length; i < lLength; i += 1) {
                lId = aIds[i];
                lElement = this.pile[lId];
                if (lElement) {
                    lInstance = lElement.inst;
                    if (lInstance && lInstance[this.nomPileInstance] && lInstance[this.nomPileInstance][lId]) {
                        delete lInstance[this.nomPileInstance][lId];
                        if ($.isEmptyObject(lInstance[this.nomPileInstance])) {
                            delete lInstance[this.nomPileInstance];
                        }
                    }
                    if (this.pileEvents[lElement.e]) {
                        if (this.pileEvents[lElement.e][lId]) {
                            delete this.pileEvents[lElement.e][lId];
                        }
                    }
                    lElement = null;
                    if (this.pile[lId]) {
                        this.pile[lId].__INACTIF__ = true;
                    }
                    delete this.pile[lId];
                }
            }
        }

        function _abonnerTous(aParam) {
            var lIds = [],
                lEvent;
            if (aParam.e && aParam.e.split) {
                var lTab = aParam.e.split(' ');
                for (var i = 0, lNb = lTab.length; i < lNb; i++) {
                    lEvent = lTab[i].trim();
                    lIds.push(_abonner.call(this, {
                        e: lEvent,
                        callB: aParam.callB,
                        inst: aParam.inst,
                        unicite: aParam.unicite,
                        u: aParam.u
                    }));
                }
            }
            if (lIds.length === 0) {
                return null;
            }
            if (lIds.length === 1) {
                return lIds[0];
            }
            return lIds;
        }

        function _desabonnerParEvent(aEvent, aInstance, aCallback) {
            var lEvents = this.pileEvents[aEvent],
                lPileInstance, lEventsASupprimer, lId, lElement;
            if (!lEvents) {
                return;
            }
            if (aInstance) {
                lPileInstance = aInstance[this.nomPileInstance];
                if (!lPileInstance) {
                    return;
                }
                lEventsASupprimer = [];
                for (lId in lPileInstance) {
                    if (lPileInstance.hasOwnProperty(lId)) {
                        lElement = this.pile[lId];
                        if (lElement && lElement.e === aEvent) {
                            if (!aCallback || aCallback === lElement.callB) {
                                lEventsASupprimer.push(lId);
                            }
                        }
                    }
                }
            } else if (aCallback) {
                lEventsASupprimer = [];
                for (lId in lEvents) {
                    if (this.pile[lId] && this.pile[lId].callB === aCallback) {
                        lEventsASupprimer.push(lId);
                    }
                }
            } else {
                lEventsASupprimer = lEvents;
                delete this.pileEvents[aEvent];
            }
            if (lEventsASupprimer && lEventsASupprimer.length > 0) {
                _supprimerIds.bind(this)(lEventsASupprimer);
            }
        }
        ObjetInvocateur.prototype.abonner = function(aEvent, aCallback, aInstance, aAvecAbonnementUnicite) {
            return _abonnerTous.call(this, {
                e: aEvent,
                callB: aCallback,
                inst: aInstance,
                unicite: aAvecAbonnementUnicite !== false ? true : false
            });
        };
        ObjetInvocateur.prototype.abonnerUnique = function(aEvent, aCallback, aInstance, aAvecAbonnementUnicite) {
            return _abonnerTous.call(this, {
                e: aEvent,
                callB: aCallback,
                inst: aInstance,
                u: true,
                unicite: aAvecAbonnementUnicite !== false ? true : false
            });
        };
        ObjetInvocateur.prototype.desabonner = function(aParam1, aParam2, aParam3) {
            if (!aParam1) {
                return;
            }
            var lEvent, lInstance, lCallBack, lEventsASupprimer, lPileInstance, lId;
            if (aParam1.push && aParam1.pop && MethodesObjet.isArray(aParam1)) {
                _supprimerIds.bind(this)(aParam1);
                return;
            }
            if (MethodesObjet.isObject(aParam1)) {
                lInstance = aParam1;
                lCallBack = aParam2;
            } else {
                lEvent = aParam1.toString();
                if (MethodesObjet.isObject(aParam2)) {
                    lInstance = aParam2;
                } else {
                    lCallBack = aParam2;
                    if (MethodesObjet.isObject(aParam3)) {
                        lInstance = aParam3;
                    }
                }
            }
            if (lEvent) {
                var lTab = lEvent.split(' ');
                for (var i = 0; i < lTab.length; i++) {
                    _desabonnerParEvent.call(this, lTab[i].trim(), lInstance, lCallBack);
                }
            } else if (lInstance) {
                lPileInstance = lInstance[this.nomPileInstance];
                if (lPileInstance) {
                    lEventsASupprimer = [];
                    for (lId in lPileInstance) {
                        if (lPileInstance.hasOwnProperty(lId)) {
                            if (lCallBack) {
                                if (this.pile[lId] && this.pile[lId].callB === lCallBack) {
                                    lEventsASupprimer.push(lId);
                                }
                            } else {
                                lEventsASupprimer.push(lId);
                            }
                        }
                    }
                    if (!lCallBack) {
                        delete lInstance[this.nomPileInstance];
                    }
                    _supprimerIds.bind(this)(lEventsASupprimer);
                }
            }
        };
        ObjetInvocateur.prototype.evenement = function(aEvent) {
            if (!aEvent) {
                return;
            }
            aEvent = aEvent.toString();
            var lEvents = this.pileEvents[aEvent],
                i, lId, lElement, lArguments, lLength, lResult, lEventsATraiter = [],
                lAvecEvenement = false;
            if (lEvents) {
                for (lId in lEvents) {
                    lAvecEvenement = true;
                    lElement = this.pile[lId];
                    if (lElement && lElement.callB) {
                        lEventsATraiter.push(lElement);
                    }
                }
            }
            if (!lAvecEvenement) {
                delete this.pileEvents[aEvent];
            }
            for (i = 0, lLength = lEventsATraiter.length; i < lLength; i += 1) {
                lElement = lEventsATraiter[i];
                if (lElement && !lElement.__INACTIF__) {
                    if (lElement.u) {
                        _supprimerIds.bind(this)([lElement.id]);
                    };
                    if (lElement.callB) {
                        lArguments = Array.prototype.slice.call(arguments, 1);
                        lResult = lElement.callB.apply(lElement.inst, lArguments);
                        if (lResult === false) {
                            return;
                        }
                    }
                }
            }
        };
        ObjetInvocateur.events = {
            initChiffrement: 'IIE_initChiffrement',
            patience: 'IIE_patience',
            modificationModeExclusif: 'IIE_modification_ModeExclusif',
            modeExclusif: 'IIE_ModeExclusif',
            modificationPresenceUtilisateur: 'IIE_ModificationPresenceUtilisateur',
            interruption_Requete: 'IIE_Interruption_Requete',
            modification_RequeteAttente: 'IIE_Modification_RequeteAttente',
            activationImpression: 'IIE_Activation_Impression',
            choixImpression: 'IIE_choix_impression',
            autorisationRechargementPage: 'IIE_AutorisationRechargementPage',
            surRechargementPage: 'IIE_SurRechargementPage',
            etatSaisie: 'IIE_SetEtatSaisie',
            fermerFenetres: 'IIE_fermer_fenetres',
            actualisationAffichage: 'IIE_actualisation_affichage',
            eventReponseUpload: 'IIE_eventReponseUpload',
            eventIOAjax: 'IIE_eventIOAjax',
            modificationThemeCouleur: 'IEE_modificationThemeCouleur',
            refreshIEHtml: 'IEE_refreshIEHtml',
            erreurCommunication: 'IEE_erreurCommunication',
            navigationOnglet: 'IEE_navigationOnglet',
            toucheDEBUG: 'IIE_ToucheDEBUG',
            DEBUG_log: 'IIE_ADDLOG',
            DEBUG_logRequete: 'IIE_ADDLOG_REQUETE'
        };
        var Invocateur = new ObjetInvocateur();
        module.exports.ObjetInvocateur = ObjetInvocateur;
        module.exports.Invocateur = Invocateur;
    },
    fn: "invocateur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('NamespaceIE.js');
        require('DeclarationJQuery.js');
        var GLog = {
            genre: {
                Message: 0,
                Avertissement: 1,
                Erreur: 2
            }
        };
        var _actif = false,
            _actifRequete = false,
            _idLogAutorises = [],
            _compteurRequete = 0,
            _nbRequetesMax = 200,
            _pileLog = [],
            _pileRequete = [];
        _idLogAutorises.ERROR = true;
        GLog.getActif = function() {
            return _actif;
        };
        GLog.setActif = function(aActif) {
            _actif = aActif;
            if (aActif) {
                this.addLog('Démarrage Log', null, GLog.genre.Avertissement);
            }
        };
        GLog.getActifRequete = function() {
            return _actifRequete;
        };
        GLog.setActifRequete = function(aActif) {
            _actifRequete = aActif;
        };
        GLog.addLog = function(aMessage, aIdFiltrage, aGenreLog) {
            if (!_actif) {
                return;
            }
            if (aIdFiltrage && _idLogAutorises && !_idLogAutorises[aIdFiltrage]) {
                return;
            }
            var lMessage = aMessage && aMessage.toString ? aMessage.toString() : 'aMessage NON LOGGABLE !!!';
            var lLog = {
                message: lMessage,
                genreLog: aGenreLog,
                date: new Date()
            };
            _pileLog.push(lLog);
            this.addConsoleLog(aMessage, aGenreLog);
            require('Invocateur.js').Invocateur.evenement(require('Invocateur.js').ObjetInvocateur.events.DEBUG_log, lLog);
        };
        GLog.vider = function() {
            _pileLog = [];
            require('Invocateur.js').Invocateur.evenement(require('Invocateur.js').ObjetInvocateur.events.DEBUG_log, null);
        };
        GLog.setIDFiltrageLog = function(aID, aAutoriser) {
            if (aAutoriser) {
                _idLogAutorises[aID] = true;
            } else {
                delete _idLogAutorises[aID];
            }
        };
        GLog.addRequete = function(aDonnees) {
            if (!this.getActifRequete()) {
                return;
            }
            var lDonnees = {
                nomRequete: '',
                numeroRequete: 0,
                numeroOrdre: 0,
                chrono: null,
                estReponse: false,
                lgcontenu: null
            };
            Object.assign(lDonnees, aDonnees);
            lDonnees.date = new Date();
            _compteurRequete += 1;
            _pileRequete.push(lDonnees);
            if (_pileRequete.length > _nbRequetesMax) {
                _pileRequete.shift();
            }
            require('Invocateur.js').Invocateur.evenement(require('Invocateur.js').ObjetInvocateur.events.DEBUG_logRequete, lDonnees);
        };
        GLog.getCompteurRequete = function() {
            return _compteurRequete;
        };
        GLog.getPile = function() {
            return _pileLog;
        };
        GLog.getRequetes = function() {
            return _pileRequete;
        };
        GLog.addConsoleLog = function(aMessage, aGenreMsg) {};
        GLog.addConsoleLogObjet = function(aObjet, aLibelle) {};
        GLog.addConsolePileAppel = function(aLibelle) {};
        module.exports = GLog;
    },
    fn: "ielog.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationExtensionsObjetNatif.js');
        global.assert = function(aIgnorer, aMessage) {};

        function breakpoint() {}
        module.exports.breakpoint = breakpoint;
    },
    fn: "divers.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationExtensionsObjetNatif.js');

        function MethodesTableau() {}
        MethodesTableau.existe = function(aValeur, aTableau) {
            return aTableau.indexOf(aValeur) !== -1;
        };

        function _filterIntersection(aTableauCompare, aElement) {
            return aTableauCompare.indexOf(aElement) !== -1;
        }
        MethodesTableau.intersection = function(aTableau1, aTableau2) {
            var lResult, i;
            if (aTableau1 && aTableau1.filter) {
                return aTableau1.filter(_filterIntersection.bind(this, aTableau2));
            }
            lResult = [];
            for (i = 0; i < aTableau1.length; i++) {
                if (MethodesTableau.existe(aTableau2, aTableau1[i])) {
                    lResult.push(aTableau1[i]);
                }
            }
            return lResult;
        };
        MethodesTableau.existeIntersection = function(aTableau1, aTableau2) {
            return MethodesTableau.intersection(aTableau1, aTableau2).length > 0;
        };

        function _everyInclus(aTableauCompare, aElement) {
            return aTableauCompare.indexOf(aElement) !== -1;
        }
        MethodesTableau.inclus = function(aTableau1, aTableau2) {
            if (!Array.isArray(aTableau1) || !Array.isArray(aTableau2)) {
                return false;
            }
            var I;
            if (aTableau1.every) {
                return !!aTableau1.every(_everyInclus.bind(this, aTableau2));
            }
            for (I = 0; I < aTableau1.length; I++) {
                if (!_everyInclus(aTableau2, aTableau1[I])) {
                    return false;
                }
            }
            return true;
        };
        MethodesTableau.insererElement = function(aValeur, aTableau, aIndex) {
            if (!Array.isArray(aTableau)) {
                return false;
            }
            if (aIndex >= 0) {
                var T = aTableau.slice(aIndex);
                aTableau.length = aIndex;
                aTableau.push(aValeur);
                Array.prototype.push.apply(aTableau, T);
            } else {
                aTableau.push(aValeur);
            }
        };
        MethodesTableau.supprimerElement = function(aTableau, aIndex) {
            aTableau.splice(aIndex, 1);
        };
        MethodesTableau.remove = function(aTableau, aElement) {
            var lIndex = aTableau.indexOf(aElement),
                lResult = false;
            while (lIndex >= 0) {
                aTableau.splice(lIndex, 1);
                lResult = true;
                lIndex = aTableau.indexOf(aElement);
            }
            return lResult;
        };
        MethodesTableau.parcourir = function(aTableau, aMethode, thisArg) {
            var i, lLength;
            if (!Array.isArray(aTableau)) {
                return;
            }
            for (i = 0, lLength = aTableau.length; i < lLength; i++) {
                if (aMethode.call(thisArg, aTableau[i], i) === true) {
                    return;
                }
            }
        };
        MethodesTableau.nombreElements = function(aTableau) {
            var lNombre = 0,
                i, lElement;
            for (i = 0; i < aTableau.length; i++) {
                lElement = aTableau[i];
                if (lElement !== null || lElement !== undefined) {
                    lNombre++;
                }
            }
            return lNombre;
        };
        MethodesTableau.binaryIndexOf = function(aArray, aElement) {
            if (!Array.isArray(aArray)) {
                return -1;
            }
            var lMinIndex = 0;
            var lMaxIndex = aArray.length - 1;
            var lIndexCourant;
            var lElementCourant;
            while (lMinIndex <= lMaxIndex) {
                lIndexCourant = (lMinIndex + lMaxIndex) / 2 | 0;
                lElementCourant = aArray[lIndexCourant];
                if (lElementCourant < aElement) {
                    lMinIndex = lIndexCourant + 1;
                } else if (lElementCourant > aElement) {
                    lMaxIndex = lIndexCourant - 1;
                } else {
                    return lIndexCourant;
                }
            }
            return -1;
        };
        MethodesTableau.indexOfMask = function(aArray, aMask) {
            var lIndice = -1;
            if (!Array.isArray(aArray)) {
                return lIndice;
            }
            if (!aMask || aArray.length === 0) {
                return lIndice;
            }
            try {
                var lKeys = Object.keys(aMask);
                if (lKeys.length > 0) {
                    aArray.every(function(aBouton, aIndice) {
                        var lTrouve = true;
                        lKeys.every(function(aKey) {
                            if (aMask[aKey] === aBouton[aKey]) {
                                return true;
                            }
                            lTrouve = false;
                            return false;
                        });
                        if (lTrouve) {
                            lIndice = aIndice;
                        }
                        return lIndice < 0;
                    });
                }
            } catch (e) {
                lIndice = -1;
            }
            return lIndice;
        };
        module.exports = MethodesTableau;
    },
    fn: "methodestableau.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJQuery.js');
        var MethodesObjet = require('MethodesObjet.js');
        var Support = {
            init: false
        };
        Support.GenreNavigateur = {
            Standard: 1,
            Webkit: 2,
            Moz: 3,
            Opera: 4,
            IE: 5
        };

        function _initTableau() {
            var lTableau = [],
                lProp;
            for (lProp in Support.GenreNavigateur) {
                lTableau[Support.GenreNavigateur[lProp]] = false;
            }
            return lTableau;
        }
        var uPileInit = [];
        Support.addInit = function(aCallback) {
            if (this.init) {
                aCallback();
            } else {
                uPileInit.push(aCallback);
            }
        };

        function _testerSupports(aDoc) {
            var lProp;
            var LExtensionsStyle = {};
            LExtensionsStyle[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Standard))] = '';
            LExtensionsStyle[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Webkit))] = 'Webkit';
            LExtensionsStyle[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Moz))] = 'Moz';
            LExtensionsStyle[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Opera))] = 'O';
            LExtensionsStyle[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.IE))] = 'MS';
            var lExtensionsCss = {};
            lExtensionsCss[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Standard))] = '';
            lExtensionsCss[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Webkit))] = '-webkit-';
            lExtensionsCss[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Moz))] = '-moz-';
            lExtensionsCss[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.Opera))] = '-o-';
            lExtensionsCss[(MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, Support.GenreNavigateur.IE))] = '-ms-';
            var lElement = aDoc.createElement('div');

            function _contains(aChaine, aSousChaine) {
                return ('' + aChaine).indexOf(aSousChaine) !== -1;
            }

            function _getNomPropEtendu(aStyle, aExtension) {
                return (aExtension.length > 0) ? aExtension + aStyle.ucfirst() : aStyle;
            }

            function _existeStyle(aStyle, aExtension) {
                return !MethodesObjet.isUndefined(lElement.style[_getNomPropEtendu(aStyle, aExtension)]);
            }

            function _leStyleContientLaChaine(aStyle, aExtension, aChaine) {
                var lStyle = lElement.style[_getNomPropEtendu(aStyle, aExtension)];
                return !MethodesObjet.isUndefined(lStyle) && _contains(lStyle, aChaine);
            }
            Support.supportFilterIE = !MethodesObjet.isUndefined(lElement.style.filter);
            if (!MethodesObjet.isUndefined(lElement.style.filter)) {
                lElement.style.filter = "progid:DXImageTransform.Microsoft.Gradient(gradientType=1,startColorStr=yellow,endColorStr=red);";
                Support.supportFilterIE = (lElement.style.filter.length > 0);
            }
            for (lProp in LExtensionsStyle) {
                Support.supportBorderRadius[Support.GenreNavigateur[lProp]] = _existeStyle('borderRadius', LExtensionsStyle[lProp]);
                if (Support.supportBorderRadius[Support.GenreNavigateur[lProp]]) {
                    Support.avecBorderRadius = true;
                }
            }
            lElement.style.cssText = 'background: linear-gradient(180deg, yellow, blue);';
            Support.supportGradient[Support.GenreNavigateur.Standard] = _contains(lElement.style.background, 'gradient');
            lElement.style.cssText = 'background: -ms-linear-gradient(180deg, yellow, blue);';
            Support.supportGradient[Support.GenreNavigateur.IE] = _contains(lElement.style.background, 'gradient');
            lElement.style.cssText = 'background: -webkit-gradient(180deg, left top, right top, from(blue), to(yellow));';
            Support.supportGradient[Support.GenreNavigateur.Webkit] = _contains(lElement.style.background, 'gradient');
            lElement.style.cssText = 'background: -moz-linear-gradient(180deg, yellow, blue);';
            Support.supportGradient[Support.GenreNavigateur.Moz] = _contains(lElement.style.background, 'gradient');
            for (lProp in LExtensionsStyle) {
                lElement.style.cssText = lExtensionsCss[lProp] + 'opacity:.5;';
                Support.supportOpacity[Support.GenreNavigateur[lProp]] = _leStyleContientLaChaine('opacity', LExtensionsStyle[lProp], '0.5');
                if (Support.supportOpacity[Support.GenreNavigateur[lProp]]) {
                    Support.avecSupportOpacity = true;
                }
            }
            for (lProp in LExtensionsStyle) {
                Support.supportBoxShadow[Support.GenreNavigateur[lProp]] = _existeStyle('boxShadow', LExtensionsStyle[lProp]);
                if (Support.supportBoxShadow[Support.GenreNavigateur[lProp]]) {
                    Support.avecSupportBoxShadow = true;
                }
            }
            for (lProp in LExtensionsStyle) {
                Support.supportUserSelect[Support.GenreNavigateur[lProp]] = _existeStyle('userSelect', LExtensionsStyle[lProp]);
                if (Support.supportUserSelect[Support.GenreNavigateur[lProp]]) {
                    Support.avecUserSelect = true;
                }
            }
            for (lProp in LExtensionsStyle) {
                Support.supportBackgroundSize[Support.GenreNavigateur[lProp]] = _existeStyle('backgroundSize', LExtensionsStyle[lProp]);
                if (Support.supportBackgroundSize[Support.GenreNavigateur[lProp]]) {
                    Support.avecBackgroundSize = true;
                }
            }
            Support.supportEventOnSelectStart = !MethodesObjet.isUndefined(lElement.onselectstart);
            for (lProp in LExtensionsStyle) {
                Support.supportTransitions[Support.GenreNavigateur[lProp]] = _existeStyle('transitionProperty', LExtensionsStyle[lProp]);
                if (Support.supportTransitions[Support.GenreNavigateur[lProp]]) {
                    Support.avecSupportTransitions = true;
                }
            }
            Support.transitionEndEvent = (function() {
                var t;
                var el = document.createElement('fakeelement');
                var transitions = {
                    'WebkitTransition': 'webkitTransitionEnd',
                    'MozTransition': 'transitionend',
                    'MSTransition': 'msTransitionEnd',
                    'OTransition': 'oTransitionEnd',
                    'transition': 'transitionEnd'
                };
                for (t in transitions) {
                    if (el.style[t] !== undefined) {
                        return transitions[t];
                    }
                }
            })();
            var lNomTransform;
            for (lProp in LExtensionsStyle) {
                lNomTransform = '';
                switch (Support.GenreNavigateur[lProp]) {
                    case Support.GenreNavigateur.Standard:
                        lNomTransform = 'transform';
                        break;
                    case Support.GenreNavigateur.Webkit:
                        lNomTransform = 'WebkitTransform';
                        break;
                    case Support.GenreNavigateur.Moz:
                        lNomTransform = 'MozTransform';
                        break;
                    case Support.GenreNavigateur.Opera:
                        lNomTransform = 'OTransform';
                        break;
                    case Support.GenreNavigateur.IE:
                        lNomTransform = 'msTransform';
                        break;
                }
                Support.supportTransforms[Support.GenreNavigateur[lProp]] = !MethodesObjet.isUndefined(lElement.style[lNomTransform]);
                if (Support.supportTransforms[Support.GenreNavigateur[lProp]]) {
                    Support.avecSupportTransform = true;
                }
            }
            Support.supportEventOnPopState = !MethodesObjet.isUndefined(window.onpopstate);
            Support.supportEventPaste = 'onpaste' in lElement;
            Support.supportEventInput = 'oninput' in lElement;
            Support.supportTouch = ('ontouchstart' in window) || !!(window.DocumentTouch && document instanceof window.DocumentTouch);
            Support.supportPointerEvent = !!window.PointerEvent;
            Support.supportTouchPointerEvent = Support.supportPointerEvent && window.navigator.maxTouchPoints > 0;
            Support.supportMSPointerEvent = !!window.navigator.msPointerEnabled;
            Support.tactile = Support.supportTouch || Support.supportTouchPointerEvent;
            Support.avecSupportFileUpload = (function() {
                if (navigator.userAgent.match(/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle\/(1.0|2.0|2.5|3.0))/)) {
                    return false;
                }
                var el = document.createElement("input");
                el.type = "file";
                return !el.disabled;
            })();
            Support.supportCanvas = !!aDoc.createElement('canvas').getContext;
            Support.supportCanvasText = !!(Support.supportCanvas && typeof(aDoc.createElement('canvas').getContext('2d').fillText) === 'function');
            Support.supportBlob = _supportBlob();
            Support.permissionNotification = {
                defaut: "default",
                granted: "granted",
                denied: "denied"
            };
            Support.supportNotification = _supportNotif();
            Support.refreshNotification = function() {
                Support.supportNotification = _supportNotif();
            };
            Support.speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || null;
            Support.contentEditable = false;
            if ('contentEditable' in document.documentElement) {
                lElement.contentEditable = true;
                Support.contentEditable = lElement.contentEditable === 'true';
            }
        }

        function _supportBlob() {
            var lBlob = false;
            try {
                lBlob = new Blob(['a'], {
                    type: 'text/plain'
                });
            } catch (e1) {
                try {
                    var BlobBuilder = window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder;
                    if (e1.name === 'TypeError' && window.BlobBuilder) {
                        var bb = new BlobBuilder();
                        bb.append(['a']);
                        lBlob = bb.getBlob('text/plain');
                    } else if (e1.name === 'InvalidStateError') {
                        lBlob = new Blob(['a'], {
                            type: 'text/plain'
                        });
                    }
                } catch (e2) {
                    return false;
                }
            }
            if (lBlob) {
                return true;
            }
            return false;
        }

        function _supportNotif() {
            var isSupported = false;
            try {
                isSupported = !!(window.Notification || window.webkitNotifications || navigator.mozNotification);
                if (isSupported) {
                    if (window.Notification && window.Notification.permissionLevel) {
                        isSupported = window.Notification.permissionLevel();
                    } else if (window.webkitNotifications && window.webkitNotifications.checkPermission) {
                        if (window.webkitNotifications.checkPermission() === 0) {
                            isSupported = Support.permissionNotification.granted;
                        } else if (window.webkitNotifications.checkPermission() === 2) {
                            isSupported = Support.permissionNotification.denied;
                        } else {
                            isSupported = Support.permissionNotification.defaut;
                        }
                    } else if (navigator.mozNotification) {
                        isSupported = Support.permissionNotification.granted;
                    } else if (window.Notification && window.Notification.permission) {
                        isSupported = window.Notification.permission;
                    }
                }
            } catch (e) {}
            return isSupported;
        }

        function _testerSupportHtml() {
            var lBody = document.getElementsByTagName("BODY")[0];
            var lElement = document.createElement('div');
            lBody.appendChild(lElement);
            var lTaille = 50;
            var lId = '_test_';
            lElement.innerHTML = '<div id="' + lId + '" style="height:auto;"><div style="height:' + lTaille + 'px; padding:4px;">&nbsp;</div></div>';
            Support.bordureExterneDIV = document.getElementById(lId).offsetHeight === lTaille;
            lElement.innerHTML = '<table cellpadding="0" cellspacing="0" border="0"><tr><td class="PetitEspace" id="' + lId + '" style="height:' + lTaille + 'px;"><div style="">&nbsp;</div></td></tr></table>';
            Support.bordureExterneTD = document.getElementById(lId).offsetHeight === lTaille;
            lElement.innerHTML = '<table style="position:absolute; z-index:-1; visibility:hidden"><tr>' + '<td style="height:' + lTaille + 'px;">' + '<div id="' + lId + '" style="height:100%"><div style="height:' + (lTaille + 20) + 'px;"></div></div>' + '</td></tr></table>';
            Support.div100PourcentDansTDGardeHauteurTD = document.getElementById(lId).offsetHeight === lTaille;
            lElement.innerHTML = '<div id="dessous" style="position:absolute;height:10px;width:10px;top:0;left:0;"></div>' + '<div id="dessus" style="position:absolute;height:10px;width:10px;top:0;left:0; pointer-events:none;"></div>';
            var lTrouve = document.elementFromPoint ? document.elementFromPoint(1, 1) : null;
            Support.supportPointerEventsNone = !!lTrouve && lTrouve.id === 'dessous';
            lBody.removeChild(lElement);
        }
        Support.toString = function() {
            var lChaine = '',
                lProp, lValeur, lChaineSupport, i;
            for (lProp in Support) {
                lValeur = Support[lProp];
                if (MethodesObjet.isArray(lValeur)) {
                    lChaine += lProp + ' - [';
                    lChaineSupport = '';
                    for (i in lValeur) {
                        if (lValeur[i]) {
                            lChaineSupport += (lChaineSupport.length > 0 ? ', ' : '') + MethodesObjet.nomProprieteDeValeur(Support.GenreNavigateur, parseInt(i, 10));
                        }
                    }
                    lChaine += (lChaineSupport.length > 0 ? lChaineSupport : 'NON SUPPORTE') + ']\n';
                } else if (!MethodesObjet.isFunction(lValeur) && !MethodesObjet.isObject(lValeur)) {
                    lChaine += lProp + ' - ' + Support[lProp] + '\n';
                }
            }
            return lChaine;
        };
        Support = $.extend({
            supportFilterIE: false,
            supportEventOnSelectStart: false,
            supportEventOnPopState: false,
            supportEventPaste: false,
            supportEventInput: false,
            supportTouch: false,
            supportPointerEvent: false,
            supportTouchPointerEvent: false,
            supportMSPointerEvent: false,
            tactile: false,
            supportBorderRadius: _initTableau(),
            avecBorderRadius: false,
            supportGradient: _initTableau(),
            supportOpacity: _initTableau(),
            avecSupportOpacity: false,
            supportBoxShadow: _initTableau(),
            avecSupportBoxShadow: false,
            supportTransitions: _initTableau(),
            avecSupportTransitions: false,
            transitionEndEvent: '',
            supportTransforms: _initTableau(),
            avecSupportTransform: false,
            supportUserSelect: _initTableau(),
            avecUserSelect: false,
            supportBackgroundSize: _initTableau(),
            avecBackgroundSize: false,
            scrollBarWidth: -1,
            avecSupportFileUpload: false,
            supportPointerEventsNone: false,
            supportCanvas: false,
            supportCanvasText: false,
            supportBlob: false,
            supportNotification: false,
            speechRecognition: false,
            contentEditable: false
        }, Support);
        $(window).on('load', function() {
            Support.init = true;
            _testerSupports(window.document);
            _testerSupportHtml();
            uPileInit.forEach(function(aCallback) {
                aCallback();
            });
            uPileInit = [];
        });
        module.exports = Support;
    },
    fn: "objetsupport.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJQuery.js');
        $.fn.inputDisabled = function(aValue) {
            var $this = $(this);
            if (aValue === undefined) {
                return $this.is(':disabled');
            } else {
                $this.attr('disabled', !!aValue);
                $this.trigger('IEDisabled');
                return $this;
            }
        };
    },
    fn: "jinputdisabled.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJQuery.js');
        $.fn.inputChecked = function(aValue) {
            var $this = $(this);
            if (aValue === undefined) {
                return $this.is(':checked');
            }
            $this.prop('checked', aValue);
            $this.trigger('IEChecked');
            return $this;
        };
        $.fn.cbIndeterminate = function(aValue) {
            var $this = $(this);
            if (aValue === undefined) {
                var lValeur = false;
                try {
                    lValeur = $this.is(':indeterminate');
                } catch (e) {
                    lValeur = !!this.indeterminate;
                }
                return lValeur;
            }
            $this.prop('indeterminate', aValue);
            $this.trigger('IECBIndeterminate');
            return $this;
        };
    },
    fn: "jinputchecked.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GLog = require('IELog.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');

        function ControleSaisieEvenement(aCallback, aSansControleNavigation) {
            if (!aCallback || !MethodesObjet.isFunction(aCallback)) {
                return;
            }
            if (aSansControleNavigation !== true && window.GApplication && !GApplication.getModeExclusif()) {
                var lCallback = null;
                if (_avecSaisieEnCoursActive()) {
                    lCallback = uSaisieEnCours.saisie.bind(this, aCallback);
                    uSaisieEnCours = null;
                }
                if (lCallback || (window.GEtatUtilisateur && window.GEtatUtilisateur.EtatSaisie)) {
                    var lPage = window.GEtatUtilisateur && window.GEtatUtilisateur.GetPageCourante ? window.GEtatUtilisateur.GetPageCourante() : null;
                    if (!lPage) {
                        lPage = window.GInterface && window.GInterface.getPageCourante ? window.GInterface.getPageCourante() : null;
                    }
                    if (!lPage) {
                        aCallback();
                        return;
                    }
                    if (!lCallback) {
                        lCallback = lPage.Valider ? lPage.Valider.bind(lPage) : null;
                    }
                    if (!MethodesObjet.isFunction(lCallback)) {
                        aCallback();
                        return;
                    }
                    Invocateur.evenement(ObjetInvocateur.events.etatSaisie, false);
                    delete lPage._callbackNavigation;
                    var lCallbackTransmis = false;
                    if (!IE.estMobile && lPage.ActionSurValidation) {
                        lPage._callbackNavigation = aCallback;
                        lCallbackTransmis = true;
                    }
                    var lResult = lCallback();
                    if (lPage) {
                        lPage.focusSurPremierObjet();
                    }
                    if (!lCallbackTransmis) {
                        aCallback();
                    }
                    return lResult;
                }
            }
            return aCallback();
        }
        var uSaisieEnCours = null,
            uSaisieEnCoursExecution = false;

        function _avecSaisieEnCoursActive() {
            return uSaisieEnCours &&
                MethodesObjet.isFunction(uSaisieEnCours.saisie) && (!MethodesObjet.isFunction(uSaisieEnCours.actif) || uSaisieEnCours.actif() === true);
        }
        ControleSaisieEvenement.saisieEnCours = function() {
            if (window.GApplication && GApplication.getModeExclusif()) {
                uSaisieEnCours = null;
                uSaisieEnCoursExecution = false;
                return false;
            }
            if (_avecSaisieEnCoursActive()) {
                if (!uSaisieEnCoursExecution) {
                    uSaisieEnCoursExecution = true;
                    var lSaisieEnCours = uSaisieEnCours;
                    uSaisieEnCours = null;
                    Promise.resolve().then(function() {
                        return lSaisieEnCours.saisie.apply(this, arguments);
                    }.bind(this)).catch(function(e) {
                        GLog.addLog('erreur saisieEnCours ' + e);
                    }).then(function() {
                        uSaisieEnCoursExecution = false;
                    }.bind(this));
                }
                return true;
            }
            return false;
        };
        ControleSaisieEvenement.addSaisieEnCours = function(aCallback) {
            uSaisieEnCoursExecution = false;
            if (window.GApplication && GApplication.getModeExclusif()) {
                uSaisieEnCours = null;
                return;
            }
            var lSaisie = {
                actif: null,
                saisie: null
            };
            if (MethodesObjet.isFunction(aCallback)) {
                lSaisie.saisie = aCallback;
            } else if (MethodesObjet.isObject(aCallback) && MethodesObjet.isFunction(aCallback.saisie)) {
                lSaisie.saisie = aCallback.saisie;
                lSaisie.actif = aCallback.actif;
            }
            if (lSaisie.saisie) {
                uSaisieEnCours = lSaisie;
            } else {
                uSaisieEnCours = null;
            }
        };
        module.exports = ControleSaisieEvenement;
    },
    fn: "controlesaisieevenement.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeChampsJSON = {
            type: '_T',
            valeur: 'V'
        };
        module.exports = TypeChampsJSON;
    },
    fn: "enumere_champsjson.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreEtat = {
            Aucun: 0,
            Creation: 1,
            Modification: 2,
            Suppression: 3,
            FilsModification: 4
        };
        module.exports = EGenreEtat;
    },
    fn: "enumere_etat.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var EGenreEtat = require('Enumere_Etat.js');

        function ObjetElement(ALibelle, ANumero, AGenre, APosition, AActif) {
            this.Libelle = ALibelle;
            this.Numero = ANumero;
            this.Genre = AGenre;
            this.Position = APosition;
            this.Actif = AActif === null || AActif === undefined ? true : AActif;
            this.Etat = EGenreEtat.Aucun;
        }
        var _numeroCreation = -1000;
        ObjetElement.const_JSON = {
            numero: {
                JSON: 'N',
                champ: 'Numero'
            },
            libelle: {
                JSON: 'L',
                champ: 'Libelle'
            },
            genre: {
                JSON: 'G',
                champ: 'Genre'
            },
            position: {
                JSON: 'P',
                champ: 'Position'
            },
            etat: {
                JSON: 'E',
                champ: 'Etat'
            },
            actif: {
                JSON: 'A',
                champ: 'Actif'
            },
            tailleNumero: 12
        };
        ObjetElement.getNumeroCreation = function() {
            _numeroCreation += -1;
            return _numeroCreation;
        };

        function _toJSON(aElement) {
            var lNumero = aElement.GetNumero(),
                lGenre = aElement.GetGenre(),
                lLibelle = aElement.GetLibelle();
            var lJSON = {};
            lJSON[ObjetElement.const_JSON.numero.JSON] = lNumero;
            if (lGenre !== undefined && lGenre !== null) {
                lJSON[ObjetElement.const_JSON.genre.JSON] = lGenre;
            }
            if (lLibelle) {
                lJSON[ObjetElement.const_JSON.libelle.JSON] = lLibelle;
            }
            if (aElement.Etat) {
                lJSON[ObjetElement.const_JSON.etat.JSON] = aElement.Etat;
            }
            return lJSON;
        }

        function _propToJSONHorsFormat(aSource, aCible) {
            var lProp, i, lCible = aCible || {},
                lKeys = Object.keys(aSource);
            for (i = 0; i < lKeys.length; i++) {
                lProp = lKeys[i];
                if (aSource[lProp] !== undefined && !$.isFunction(aSource[lProp]) && lProp !== ObjetElement.const_JSON.libelle.champ && lProp !== ObjetElement.const_JSON.numero.champ && lProp !== ObjetElement.const_JSON.genre.champ && lProp !== ObjetElement.const_JSON.position.champ && lProp !== ObjetElement.const_JSON.etat.champ) {
                    lCible[lProp] = aSource[lProp];
                }
            }
            return lCible;
        }
        ObjetElement.prototype.toJSON = function() {
            return _toJSON(this);
        };
        ObjetElement.prototype.toJSONAll = function() {
            var lJSON = _toJSON(this);
            return _propToJSONHorsFormat(this, lJSON);
        };
        ObjetElement.prototype.fromJSON = function(aJSON) {
            if (!aJSON) {
                return this;
            }
            this.Libelle = aJSON[ObjetElement.const_JSON.libelle.JSON] || '';
            this.Numero = aJSON[ObjetElement.const_JSON.numero.JSON] === '0' ? 0 : aJSON[ObjetElement.const_JSON.numero.JSON];
            this.Genre = aJSON[ObjetElement.const_JSON.genre.JSON];
            this.Position = aJSON[ObjetElement.const_JSON.position.JSON];
            if (aJSON[ObjetElement.const_JSON.actif.JSON] !== undefined) {
                this.Actif = aJSON[ObjetElement.const_JSON.actif.JSON];
            }
            return this;
        };
        ObjetElement.prototype.copieJSON = function(aJSON) {
            var lProp;
            for (lProp in aJSON) {
                if (lProp !== ObjetElement.const_JSON.libelle.JSON && lProp !== ObjetElement.const_JSON.numero.JSON && lProp !== ObjetElement.const_JSON.genre.JSON && lProp !== ObjetElement.const_JSON.position.JSON) {
                    this[lProp] = aJSON[lProp];
                }
            }
            return this;
        };
        ObjetElement.prototype.copieToJSON = function(aJSON) {
            return _propToJSONHorsFormat(this, aJSON);
        };
        ObjetElement.prototype.GetLibelle = function() {
            return this.Libelle;
        };
        ObjetElement.prototype.GetNumero = function() {
            return this.Numero;
        };
        ObjetElement.prototype.GetGenre = function() {
            return this.Genre;
        };
        ObjetElement.prototype.GetActif = function() {
            return this.Actif;
        };
        ObjetElement.prototype.GetPosition = function() {
            return this.Position;
        };
        ObjetElement.prototype.getDonnees = function() {
            return this.donnees;
        };
        ObjetElement.prototype.existeNumero = function() {
            var lNumero = this.GetNumero();
            if (lNumero && lNumero.indexOf && lNumero.length > ObjetElement.const_JSON.tailleNumero) {
                lNumero = lNumero.substr(lNumero.length - ObjetElement.const_JSON.tailleNumero, lNumero.length);
            }
            return lNumero && (lNumero !== '0') ? true : false;
        };
        ObjetElement.prototype.Existe = function() {
            return this.Etat !== EGenreEtat.Suppression;
        };
        ObjetElement.prototype.PourValidation = function() {
            return this._validationSaisie || false;
        };
        ObjetElement.prototype.SetLibelle = function(aLibelle) {
            this.Libelle = aLibelle;
        };
        ObjetElement.prototype.SetNumero = function(aNumero) {
            this.Numero = aNumero;
        };
        ObjetElement.prototype.SetActif = function(aActif) {
            this.Actif = aActif;
        };
        ObjetElement.prototype.setDonnees = function(aDonnees) {
            this.donnees = aDonnees;
        };
        ObjetElement.prototype.getGenreTable = function() {
            if (this.Numero && this.Numero.indexOf && this.Numero.length > ObjetElement.const_JSON.tailleNumero) {
                var lGenreTable = parseInt(this.Numero.substr(0, this.Numero.length - ObjetElement.const_JSON.tailleNumero), 10);
                if (MethodesObjet.isNumber(lGenreTable)) {
                    return lGenreTable;
                }
            }
            return 0;
        };
        ObjetElement.prototype.egalParNumeroEtGenre = function(aNumero, aGenre, aAvecExiste) {
            if ((aNumero === null || aNumero === undefined) && (aGenre === null || aGenre === undefined)) {
                return false;
            }
            return (!aAvecExiste || this.Existe()) && ((aNumero === null || aNumero === undefined) || (this.GetNumero() === aNumero)) && ((aGenre === null || aGenre === undefined) || (this.GetGenre() === aGenre));
        };
        ObjetElement.prototype.getCle = function() {
            return '_' + this.Genre + '_' + this.Numero;
        };
        ObjetElement.prototype.SetEtat = function(AEtat) {
            if (this.Etat === AEtat) {
                return this;
            }
            switch (AEtat) {
                case EGenreEtat.Aucun:
                    delete this._validationSaisie;
                    this.Etat = EGenreEtat.Aucun;
                    break;
                case EGenreEtat.Creation:
                    if (this.Etat === EGenreEtat.Aucun) {
                        this._validationSaisie = true;
                        this.Etat = EGenreEtat.Creation;
                        if (this.Numero === null || this.Numero === undefined) {
                            this.Numero = ObjetElement.getNumeroCreation();
                        }
                    }
                    break;
                case EGenreEtat.Modification:
                    if ((this.Etat === EGenreEtat.Aucun) || (this.Etat === EGenreEtat.FilsModification)) {
                        this._validationSaisie = true;
                        this.Etat = (this.Numero !== 0) && ((this.Numero !== null && this.Numero !== undefined)) ? EGenreEtat.Modification : EGenreEtat.Creation;
                        if (this.Numero === null || this.Numero === undefined) {
                            this.Numero = ObjetElement.getNumeroCreation();
                        }
                    }
                    break;
                case EGenreEtat.Suppression:
                    if (this.Etat === EGenreEtat.Creation) {
                        delete this._validationSaisie;
                    } else {
                        this._validationSaisie = true;
                    }
                    this.Etat = EGenreEtat.Suppression;
                    break;
                case EGenreEtat.FilsModification:
                    if (this.Etat === EGenreEtat.Aucun) {
                        this._validationSaisie = true;
                        this.Etat = EGenreEtat.FilsModification;
                    }
                    break;
            }
            return this;
        };
        ObjetElement.prototype.afficher = function() {};
        module.exports = ObjetElement;
    },
    fn: "objetelement.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreTriElement = {
            Croissant: 1,
            Decroissant: -1
        };
        module.exports = EGenreTriElement;
    },
    fn: "enumere_trielement.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreDocumentJoint = {
            Url: 0,
            Fichier: 1,
            Cloud: 2,
            LienKiosque: 3
        };
        module.exports = EGenreDocumentJoint;
    },
    fn: "enumere_documentjoint.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeHttpVariable = {
            TypeHttpCategorie: 0,
            TypeHttpCardinal: 1,
            TypeHttpBoolean: 2,
            TypeHttpString: 3,
            TypeHttpColor: 4,
            TypeHttpAlignment_Inutilise: 5,
            TypeHttpFontStyles_Inutilise: 6,
            TypeHttpDateTime: 7,
            TypeHttpDomaine: 8,
            TypeHttpTraduction: 9,
            TypeHttpNote: 10,
            TypeHttpEnsembleCardinal: 11,
            _TypeHttpLongNote_Inutilise: 12,
            TypeHttpDouble: 13,
            TypeHttpArrondi: 14,
            TypeHttpEnsemble: 15,
            TypeHttpIP: 16,
            TypeHttpUrl: 17,
            TypeHttpSetOf_MrFiche: 18,
            _TypeHttpDoubleNote_Inutilise: 19,
            TypeHttpInteger: 20,
            TypeHttpHtml: 21,
            _TypeHttpJSON_Inutilise: 22,
            TypeHttpChaineBrute: 23,
            TypeHttpElement: 24,
            TypeHttpFichierBase64: 25,
            TypeHttpEnsembleNombre: 26
        };
        module.exports.TypeHttpVariable = TypeHttpVariable;
    },
    fn: "typehttpvariable.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EFormatDocJoint = {
            Inconnu: 0,
            Texte: 1,
            Pdf: 2,
            Excel: 3,
            Archive: 4,
            Image: 5,
            Son: 6,
            Video: 7,
            Diapo: 8,
            Geogebra: 9
        };
        EFormatDocJoint.getClassImgDeGenre = function(aGenre) {
            switch (aGenre) {
                case EFormatDocJoint.Texte:
                    return 'Image_FormatTexte';
                case EFormatDocJoint.Pdf:
                    return 'Image_FormatPDF';
                case EFormatDocJoint.Excel:
                    return 'Image_FormatExcel';
                case EFormatDocJoint.Archive:
                    return 'Image_FormatArch';
                case EFormatDocJoint.Image:
                    return 'Image_FormatImg';
                case EFormatDocJoint.Son:
                    return 'Image_FormatSon';
                case EFormatDocJoint.Video:
                    return 'Image_FormatVideo';
                case EFormatDocJoint.Diapo:
                    return 'Image_FormatPPT';
                case EFormatDocJoint.Geogebra:
                    return 'Image_FormatGGB';
                default:
                    return 'Image_FormatInconnu';
            }
        };
        EFormatDocJoint.getGenreDExtension = function(aParam) {
            switch (aParam.ext) {
                case 'doc':
                case 'docx':
                case 'txt':
                    return EFormatDocJoint.Texte;
                case 'pdf':
                    return EFormatDocJoint.Pdf;
                case 'gzip':
                case 'zip':
                case 'rar':
                    return EFormatDocJoint.Archive;
                case 'xls':
                case 'xlsx':
                    return EFormatDocJoint.Excel;
                case 'png':
                case 'mng':
                case 'tiff':
                case 'jpeg':
                case 'gif':
                case 'jpg':
                    return EFormatDocJoint.Image;
                case 'mp3':
                case 'ogg':
                case 'wav':
                    return EFormatDocJoint.Son;
                case 'mp4':
                case 'mpeg':
                case 'avi':
                    return EFormatDocJoint.Video;
                case 'ppt':
                case 'pptx':
                    return EFormatDocJoint.Diapo;
                case 'ggb':
                    return EFormatDocJoint.Geogebra;
                default:
                    return EFormatDocJoint.Inconnu;
            }
        };
        EFormatDocJoint.getClassIconDeGenre = function(aGenre) {
            switch (aGenre) {
                case EFormatDocJoint.Texte:
                    return 'icon_fichier_word';
                case EFormatDocJoint.Pdf:
                    return 'icon_uniF1C1';
                case EFormatDocJoint.Excel:
                    return 'icon_fichier_excel';
                case EFormatDocJoint.Archive:
                    return 'icon_fichier_zip';
                case EFormatDocJoint.Image:
                    return 'icon_fichier_image';
                case EFormatDocJoint.Son:
                    return 'icon_fichier_audio';
                case EFormatDocJoint.Video:
                    return 'icon_fichier_video';
                case EFormatDocJoint.Diapo:
                    return 'icon_fichier_powerpoint';
                case EFormatDocJoint.Geogebra:
                    return 'icon_file_text_alt';
                default:
                    return 'icon_file_alt';
            }
        };
        EFormatDocJoint.getGenreDeFichier = function(aExtension) {
            if (aExtension !== '') {
                return EFormatDocJoint.getGenreDExtension({
                    ext: aExtension.toLowerCase()
                });
            } else {
                return EFormatDocJoint.Inconnu;
            }
        };
        module.exports = EFormatDocJoint;
    },
    fn: "enumere_formatdocjoint.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GLog = require('IELog.js');
        var Invocateur = require('Invocateur.js').Invocateur;

        function UtilitaireCss() {}
        var uCacheReglesCss = null;
        var uCacheCss = null;
        var uTailleMaxCacheCss = 50;

        function _trouverSelecteur(aSelecteursTexte, aNomRegleCss) {
            var i;
            if (aSelecteursTexte && aSelecteursTexte.join) {
                for (i = 0; i < aSelecteursTexte.length; i++) {
                    if (aSelecteursTexte[i] === aNomRegleCss) {
                        return true;
                    }
                }
            }
            return false;
        }

        function _remplirCacheReglesCss() {
            var I, i, J, lStyleSheet, lRules, lRegles, lRegle, lSelecteurTexte;
            uCacheReglesCss = [];
            for (I = document.styleSheets.length - 1; I >= 0; I--) {
                lStyleSheet = document.styleSheets[I];
                if (lStyleSheet && lStyleSheet.href) {
                    try {
                        lRules = lStyleSheet.cssRules || lStyleSheet.rules;
                    } catch (e) {
                        lRules = null;
                        GLog.addLog('lecture cssRules : exception=> ' + e);
                    }
                    if (lRules) {
                        lRegles = [];
                        uCacheReglesCss.push(lRegles);
                        for (J = 0; J < lRules.length; J++) {
                            try {
                                lSelecteurTexte = lRules[J].selectorText;
                            } catch (e) {
                                GLog.addLog(e);
                            }
                            lRegle = {
                                selecteurs: [],
                                regle: lRules[J]
                            };
                            if (lSelecteurTexte && lSelecteurTexte.split) {
                                var lTabSelector = lSelecteurTexte.split(',');
                                if (lTabSelector) {
                                    for (i = 0; i < lTabSelector.length; i++) {
                                        lRegle.selecteurs.push(lTabSelector[i] && lTabSelector[i].trim && (lTabSelector[i].trim().toLowerCase().replace(/'/g, '"')));
                                    }
                                }
                            }
                            lRegles.push(lRegle);
                        }
                    }
                }
            }
        }

        function _chercherReglesCss(aNomRegleCss) {
            var lRules, lRegle, lProp, I, J;
            if (!aNomRegleCss || !MethodesObjet.isString(aNomRegleCss)) {
                return null;
            }
            aNomRegleCss = aNomRegleCss.toLowerCase();
            if (!uCacheReglesCss) {
                _remplirCacheReglesCss();
            }
            if (uCacheCss && uCacheCss[aNomRegleCss]) {
                return uCacheCss[aNomRegleCss];
            }
            var lRegles = [];
            try {
                aNomRegleCss = aNomRegleCss.trim().toLowerCase().replace(/'/g, '"');
                for (I = uCacheReglesCss.length - 1; I >= 0; I--) {
                    lRules = uCacheReglesCss[I];
                    if (lRules) {
                        for (J = lRules.length - 1; J >= 0; J--) {
                            lRegle = lRules[J];
                            if (lRegle) {
                                if (_trouverSelecteur(lRegle.selecteurs, aNomRegleCss)) {
                                    lRegles.push(lRegle.regle);
                                }
                            }
                        }
                    }
                }
                if (lRegles.length > 0) {
                    if (!uCacheCss) {
                        uCacheCss = [];
                    }
                    if (uCacheCss.length >= uTailleMaxCacheCss) {
                        for (lProp in uCacheCss) {
                            delete uCacheCss[lProp];
                            break;
                        }
                    }
                    uCacheCss[aNomRegleCss] = lRegles;
                    return lRegles;
                } else {
                    return null;
                }
            } catch (e) {
                GLog.addLog('lecture cssRules : exception=> ' + e);
            }
        }

        function _convertirProprieteCSS(aProprieteCSS) {
            var i;
            var lTab = aProprieteCSS.split('-');
            for (i = 1; i < lTab.length; i++) {
                lTab[i] = lTab[i].ucfirst();
            }
            return lTab.join('');
        }

        function _modifierProprieteCSS(aRule, aProprieteCSS, aValeur) {
            try {
                if (aRule && aRule.style) {
                    if (aRule.style.setProperty) {
                        aRule.style.setProperty(aProprieteCSS, aValeur, null);
                    } else {
                        aProprieteCSS = _convertirProprieteCSS(aProprieteCSS);
                        if (!MethodesObjet.isUndefined(aRule.style[aProprieteCSS])) {
                            aRule.style[aProprieteCSS] = aValeur;
                        }
                    }
                }
            } catch (e) {
                return false;
            }
            return true;
        }

        function _getRegleQuiDefinitProprieteCSS(aTabRegles, aProprieteCSS) {
            var i;
            if (!aTabRegles) {
                return null;
            }
            var lAttribut;
            for (i = 0; i < aTabRegles.length; i++) {
                var lRegle = aTabRegles[i];
                if (lRegle && lRegle.style) {
                    aProprieteCSS = _convertirProprieteCSS(aProprieteCSS);
                    lAttribut = lRegle.style[aProprieteCSS];
                    if (((lAttribut !== null && lAttribut !== undefined)) && (lAttribut !== '')) {
                        return lRegle;
                    }
                }
            }
            return null;
        }

        function _parcourirCssDePropriete(aPropriete, aCallback) {
            if (!aCallback || !aPropriete) {
                return;
            }
            if (!uCacheReglesCss) {
                _remplirCacheReglesCss();
            }
            try {
                uCacheReglesCss.forEach(function(aRule) {
                    var lAttribut, i, lRegle, lValeurCSS;
                    if (aRule) {
                        for (i = 0; i < aRule.length; i++) {
                            lRegle = aRule[i].regle;
                            if (lRegle && lRegle.style) {
                                lValeurCSS = _convertirProprieteCSS(aPropriete);
                                lAttribut = lRegle.style[lValeurCSS];
                                if (lAttribut !== null && lAttribut !== undefined && lAttribut !== '') {
                                    aCallback(lAttribut, lRegle);
                                }
                            }
                        }
                    }
                });
            } catch (e) {}
        }
        UtilitaireCss.modifierRegleCss = function(aNomRegleCss, aProprieteCSS, aValeur) {
            var lRegles = _chercherReglesCss(aNomRegleCss);
            if (!lRegles) {
                return false;
            }
            var lRegleAModifier = _getRegleQuiDefinitProprieteCSS(lRegles, aProprieteCSS);
            if (lRegleAModifier === null || lRegleAModifier === undefined) {
                lRegleAModifier = lRegles[0];
            }
            return _modifierProprieteCSS(lRegleAModifier, aProprieteCSS, aValeur);
        };
        UtilitaireCss.chercherAttributReglesCss = function(aNomRegleCss, aAttribut) {
            var lRegles = _chercherReglesCss(aNomRegleCss, false),
                i;
            if (!lRegles) {
                return false;
            }
            var lAttribut;
            for (i = 0; i < lRegles.length; i++) {
                if (lRegles[i] && lRegles[i].style) {
                    lAttribut = lRegles[i].style[aAttribut];
                    if (((lAttribut !== null && lAttribut !== undefined)) && (lAttribut !== '')) {
                        return lRegles[i].style[aAttribut];
                    }
                }
            }
            return false;
        };
        UtilitaireCss.extraireUrlReglesCss = function(aNomRegleCss) {
            var lUrl = UtilitaireCss.chercherAttributReglesCss(aNomRegleCss, 'backgroundImage');
            if (!lUrl || (lUrl.length === 0)) {
                return '';
            }
            var lTab = lUrl.split('"');
            lTab = lTab[1];
            if (!lTab) {
                lTab = lUrl.split("'");
                lTab = lTab[1];
            }
            if (!lTab) {
                lTab = lUrl.split('(');
                lTab = lTab[1];
                if (!lTab) {
                    return '';
                }
                lTab = lTab.split(')');
                lTab = lTab[0];
            }
            if (!lTab) {
                return '';
            }
            lTab = lTab.split('/');
            var lTab2 = [],
                j;
            for (j = 0; j < lTab.length; j++) {
                if (lTab[j] !== '..') {
                    lTab2.push(lTab[j]);
                }
            }
            return lTab2.join('/');
        };
        Invocateur.abonnerUnique('GNavigateur_Init_IE', function() {
            _parcourirCssDePropriete('cursor', function(aValeur, aRegleCss) {
                if (aValeur &&
                    aValeur.startsWith('url') &&
                    aValeur.indexOf('../') >= 0) {
                    _modifierProprieteCSS(aRegleCss, 'cursor', aValeur.replace(/\.\.\//gi, ''));
                }
            });
        });
        module.exports = UtilitaireCss;
    },
    fn: "utilitairecss.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('divers.js');
        var GUID = require('GUID.js');
        var MethodesObjet = require('MethodesObjet.js');
        var TypeChampsJSON = require('Enumere_ChampsJSON.js');
        var EGenreDocumentJoint = require('Enumere_DocumentJoint.js');
        var ObjetElement = require('ObjetElement.js');
        var EGenreEtat = require('Enumere_Etat.js');
        var Support = require('ObjetSupport.js');
        var TypeHttpVariable = require('TypeHttpVariable.js').TypeHttpVariable;
        var EFormatDocJoint = require('Enumere_FormatDocJoint.js');
        var UtilitaireCss = require('UtilitaireCss.js');

        function _ObjetChaine() {
            var I, J;
            this.ListeZeros = '0000000000';
            this.ListeAvecAccents = ['éèê', 'à'];
            this.ListeSansAccents = ['e', 'a'];
            this.ListeExpAccents = [];
            for (I = 0; I < this.ListeAvecAccents.length; I++) {
                this.ListeExpAccents[I] = new RegExp('[' + this.ListeAvecAccents[I] + ']', 'ig');
            }
            this.LongueurCaracteres = new Array(30);
            for (I = 0; I < 30; I++) {
                this.LongueurCaracteres[I] = new Array(2);
                for (J = 0; J < 2; J++) {
                    this.LongueurCaracteres[I][J] = [];
                }
            }
            this.maskTelephone = '99 99 99 99 99 99';
            this.regexURL = /(https?:\/\/|www\.)[^ \n,]+/gi;
        }
        _ObjetChaine.regexCarControl = /[\x00-\x1F\x7F-\x9f]/gi;
        _ObjetChaine.prototype.enleverChemin = function(aFichier) {
            var N = aFichier.lastIndexOf('/');
            if (N === -1) {
                N = aFichier.lastIndexOf('\\');
            }
            return aFichier.substring(N + 1, aFichier.length);
        };
        _ObjetChaine.prototype.AvecEspaceSiVide = function(AChaine) {
            return AChaine && (AChaine.length > 0) ? AChaine : '&nbsp;';
        };
        _ObjetChaine.prototype.toTitle = function(aChaine) {
            var lChaine = aChaine && aChaine.toString ? aChaine.toString() : '';
            return lChaine && lChaine.replace ? lChaine.replace(/\r\n/g, "&#010;").replace(/\n/g, "&#010;").replace(/"/g, '&quot;') : '';
        };
        _ObjetChaine.prototype.StrToDate = function(ADate) {
            ADate = ADate.split(' ');
            var LJour = ADate[0].split('/');
            var LHeure = ADate[1] ? ADate[1].split(':') : [0, 0, 0];
            return new Date(LJour[2], LJour[1] - 1, LJour[0], LHeure[0], LHeure[1], LHeure[2]);
        };
        _ObjetChaine.prototype.strToInteger = function(aInteger) {
            return parseInt(aInteger, 10);
        };
        _ObjetChaine.prototype.strToDouble = function(aDouble) {
            return parseFloat(aDouble.replace(',', '.'));
        };
        _ObjetChaine.prototype.StrToCardinal = function(ACardinal) {
            return parseInt(ACardinal, 10);
        };
        _ObjetChaine.prototype.StrToBoolean = function(ABoolean) {
            return (ABoolean === '1') || (ABoolean.toUpperCase() === 'TRUE') || (ABoolean.toUpperCase() === 'VRAI');
        };
        _ObjetChaine.prototype.strToIp = function(aIP) {
            var T = aIP.split('.');
            if (T.length !== 4) {
                return '';
            }
            var lIp = 0,
                I, lValeur;
            for (I = 0; I < 4; I++) {
                lValeur = parseInt(T[I], 10);
                if ((lValeur < 0) || (lValeur > 255)) {
                    return 0;
                }
                lIp = 256 * lIp + lValeur;
            }
            return lIp;
        };
        _ObjetChaine.prototype.DateToStr = function(ADate) {
            return ADate ? ADate.getDate() + '/' + (ADate.getMonth() + 1) + '/' + ADate.getFullYear() + ' ' + ADate.getHours() + ':' + ADate.getMinutes() + ':' + ADate.getSeconds() : '';
        };
        _ObjetChaine.prototype.domaineToStr = function(aDomaine) {
            return aDomaine ? aDomaine.toString() : '';
        };
        _ObjetChaine.prototype.doubleToStr = function(aDouble) {
            return ('' + aDouble).replace('.', ',');
        };
        _ObjetChaine.prototype.ChaineToStr = function(AChaine) {
            return !AChaine ? '' : AChaine;
        };
        _ObjetChaine.prototype.CardinalToStr = function(ACardinal) {
            return '' + ACardinal;
        };
        _ObjetChaine.prototype.ipToStr = function(aIp) {
            aIp = parseInt(aIp, 10);
            if (isNaN(aIp)) {
                return '';
            }
            var T = [],
                I;
            for (I = 4; I > 0; I--) {
                T[I - 1] = (aIp % 256);
                if (T[I - 1] < 0) {
                    T[I - 1] += 256;
                }
                aIp = Math.floor(aIp / 256);
            }
            return T.join('.');
        };
        _ObjetChaine.prototype.Format = function(aChaine, aTabElements) {
            if (!aChaine || !aTabElements || !aTabElements.length || !MethodesObjet.isString(aChaine)) {
                return aChaine;
            }
            if (!aTabElements.map) {
                aTabElements = [aTabElements];
            }
            var lMapElements = aTabElements.map(function(aElement) {
                if (MethodesObjet.isFunction(aElement)) {
                    try {
                        return aElement();
                    } catch (e) {
                        return '';
                    }
                }
                return aElement;
            });
            var lFuncSubst = function(aSubst, aCarSuiv) {
                var lSubst = aSubst;
                if (aCarSuiv === 'd') {
                    lSubst = parseInt(lSubst);
                    if (isNaN(lSubst)) {
                        lSubst = '';
                    }
                }
                return lSubst;
            };
            var lIndex = 0;
            var lStrResult = '';
            var lCar;
            var lCarSuiv;
            var lIndexSubsSansNumero = 0;
            var lDieseEnCours = false;
            var lStrPourcentEnCours = '';
            var lStrNumeroSubst = '';
            var lNumeroSubst;
            var lRegNumber = new RegExp('[0-9]');
            var lRegExType = new RegExp('(s|d|e|f|g|n|m)');
            while (lIndex < aChaine.length) {
                lCar = aChaine[lIndex];
                lCarSuiv = aChaine[lIndex + 1];
                if (lStrPourcentEnCours) {
                    if (lCarSuiv && lCar === ':' && lCarSuiv.match(lRegExType)) {
                        lNumeroSubst = parseInt(lStrPourcentEnCours);
                        lStrResult += lFuncSubst(lMapElements[lNumeroSubst], lCarSuiv);
                        lIndex += 1;
                        lStrPourcentEnCours = '';
                    } else if (lCarSuiv && lCarSuiv.match(lRegNumber)) {
                        lStrPourcentEnCours += lCarSuiv;
                    } else {
                        lStrResult += '%' + lStrPourcentEnCours + lCar;
                        lStrPourcentEnCours = '';
                    }
                } else if (lDieseEnCours) {
                    lStrNumeroSubst += lCar;
                    if (!lCarSuiv || !lCarSuiv.match(lRegNumber)) {
                        lDieseEnCours = false;
                        lNumeroSubst = parseInt(lStrNumeroSubst) - 1;
                        lStrResult += lMapElements[lNumeroSubst];
                        lStrNumeroSubst = '';
                    }
                } else {
                    switch (lCar) {
                        case '#':
                            if (lCarSuiv.match(lRegNumber)) {
                                lDieseEnCours = true;
                            }
                            break;
                        case '%':
                            if (lCarSuiv === 's' || lCarSuiv === 'd') {
                                lIndex += 1;
                                lStrResult += lFuncSubst(lMapElements[lIndexSubsSansNumero], lCarSuiv);
                                lIndexSubsSansNumero += 1;
                            } else if (lCarSuiv.match(lRegNumber)) {
                                lStrPourcentEnCours = lCarSuiv;
                                lIndex += 1;
                            } else {
                                lStrResult += lCar;
                            }
                            break;
                        default:
                            lStrResult += lCar;
                    }
                }
                lIndex += 1;
            }
            return lStrResult;
        };
        _ObjetChaine.prototype.Insecable = function(AChaine) {
            try {
                return AChaine ? AChaine.replace(/ /g, "&nbsp;").replace(/-/g, "&#x2011;") : '';
            } catch (e) {
                return '';
            }
        };

        function _reverseString(a) {
            return a.split('').reverse().join('');
        }
        _ObjetChaine.prototype.formatTelephone = function(aChaine, aOptions) {
            if (!aChaine || !aChaine.trim) {
                return '';
            }
            var lOptions = Object.assign({
                    mask: '',
                    avecTailleMask: true
                }, aOptions),
                lMask = lOptions.mask || this.maskTelephone,
                lChaine = aChaine.trim().replace(/([^0-9\s])/g, ''),
                lIndice;
            lMask = _reverseString(lMask.replace(/([^9\s])/g, ''));
            var lLengthCharMask = lMask.replace(/([^9])/g, '').length,
                lNumeroSansEspace = lChaine.replace(/([^0-9])/g, ''),
                lEcart = Math.max(0, lNumeroSansEspace.length - lLengthCharMask),
                lPartieDroite = lNumeroSansEspace.slice(lEcart, lNumeroSansEspace.length),
                lPartieGaucheIntacte = '',
                lPartieGauche, i, lResult;
            lPartieDroite = _reverseString(lPartieDroite);
            lIndice = -1;
            lResult = lMask.replace(/9/g, function() {
                lIndice += 1;
                return lPartieDroite[lIndice] || '';
            });
            if (!lOptions.avecTailleMask) {
                lPartieGauche = lNumeroSansEspace.slice(0, lEcart);
                lIndice = 0;
                for (i = 0; i < lChaine.length; i++) {
                    if (lChaine.charAt(i) === ' ') {
                        lPartieGaucheIntacte += ' ';
                    } else {
                        lPartieGaucheIntacte += lPartieGauche.charAt(lIndice);
                        lIndice += 1;
                        if (lIndice >= lPartieGauche.length) {
                            break;
                        }
                    }
                }
            }
            return (lPartieGaucheIntacte + _reverseString(lResult)).trim();
        };
        _ObjetChaine.prototype._getConteneurCalculChaine = function() {
            var ldLongueurChaineEnPixel = 'LongueurChaineEnPixel';
            var E = document.getElementById(ldLongueurChaineEnPixel);
            if (!E) {
                var lConteneur = document.body;
                if (global.GApplication) {
                    lConteneur = document.getElementById(GApplication.getIdConteneur()) || document.body;
                }
                lConteneur.insertAdjacentHTML('beforeend', '<div id="' + ldLongueurChaineEnPixel + '" class="Texte10 hide" style="position:absolute; top:-50px; white-space:pre;"></div>');
                E = document.getElementById(ldLongueurChaineEnPixel);
            }
            if (E) {
                return E;
            };
            return null;
        };
        _ObjetChaine.prototype.GetLongueurChaineDansDiv = function(AChaine, ATaille, AGras, aNonToTexte) {
            if (!AChaine) {
                return 0;
            }
            if (!this.__cacheCanvas) {
                this.__cacheCanvas = Support.supportCanvasText && UtilitaireCss.chercherAttributReglesCss ? {
                    canvas: document.createElement("canvas"),
                    fontFamily: global.getComputedStyle(document.body).getPropertyValue('font-family'),
                    fontSize: {}
                } : {};
                this.__cacheCanvas.actif = !!this.__cacheCanvas.canvas &&
                    !!this.__cacheCanvas.fontFamily;
                if (!this.__cacheCanvas.actif) {
                    this.__cacheCanvas.canvas = null;
                }
            }
            if (this.__cacheCanvas.actif) {
                var lContext = this.__cacheCanvas.canvas.getContext("2d");
                if (!this.__cacheCanvas.fontSize[ATaille]) {
                    if (ATaille && ATaille.endsWith && ATaille.endsWith('rem')) {
                        if (!this.__cacheCanvas.fontSizeRoot) {
                            var lSize = '';
                            try {
                                lSize = parseFloat(global.getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10);
                            } catch (e) {
                                lSize = 10;
                            }
                            this.__cacheCanvas.fontSizeRoot = lSize;
                        }
                        this.__cacheCanvas.fontSize[ATaille] = (parseFloat(ATaille, 10) * this.__cacheCanvas.fontSizeRoot) + 'px';
                    } else {
                        var lVal = UtilitaireCss.chercherAttributReglesCss('.Texte' + ATaille, 'fontSize');
                        if (!lVal) {
                            lVal = Math.round(ATaille * 1.1) + 'px';
                        }
                        this.__cacheCanvas.fontSize[ATaille] = lVal;
                    }
                }
                var lFontWeight = '';
                if (AGras === true) {
                    lFontWeight = 'bold';
                } else if (AGras && (MethodesObjet.isString(AGras) || MethodesObjet.isNumber(AGras))) {
                    lFontWeight = AGras;
                }
                lContext.font = (lFontWeight ? lFontWeight + ' ' : '') + this.__cacheCanvas.fontSize[ATaille] + ' ' + this.__cacheCanvas.fontFamily;
                var lMetrics = lContext.measureText(AChaine);
                return lMetrics.width;
            }
            var E = this._getConteneurCalculChaine();
            if (!E) {
                return 0;
            }
            E.className = 'hide Texte' + ATaille + (AGras ? ' Gras' : '');
            var lChaine = aNonToTexte === true ? AChaine : this.ajouterEntites(AChaine);
            lChaine = lChaine && lChaine.replace ? lChaine.replace(/ /g, "&nbsp;") : lChaine;
            E.innerHTML = lChaine;
            var lLongueur = E.clientWidth;
            E.innerHTML = '';
            return lLongueur;
        };
        _ObjetChaine.prototype.GetLongueurChaine = function(AChaine, ATaille, AGras, ALongueur, aChaineEnTexte) {
            if (!AChaine) {
                return '';
            }
            var lChaine = this.enleverEntites(AChaine);
            var LLongueur = 0;
            var I;
            var N = lChaine.length;
            if (lChaine.length > 0) {
                LLongueur = this.GetLongueurChaineDansDiv(lChaine, ATaille, AGras);
            }
            if (ALongueur === null || ALongueur === undefined) {
                return LLongueur;
            }
            if (ALongueur > 0 && LLongueur >= ALongueur) {
                LLongueur = 0;
                var G = AGras ? 1 : 0;
                var C, L;
                for (I = 0;
                    (I < N) && ((ALongueur === null || ALongueur === undefined) || (LLongueur < ALongueur)); I++) {
                    C = lChaine.charCodeAt(I);
                    L = this.LongueurCaracteres[ATaille][G][C];
                    if (!L) {
                        L = this.LongueurCaracteres[ATaille][G][C] = this.GetLongueurChaineDansDiv(lChaine.charAt(I), ATaille, AGras);
                    }
                    LLongueur += L === 0 ? 10 : L;
                }
            }
            if (LLongueur >= ALongueur) {
                var lChaineTronque = lChaine.substring(0, I);
                if (lChaineTronque &&
                    lChaine !== lChaineTronque &&
                    LLongueur > 0) {
                    LLongueur = this.GetLongueurChaineDansDiv(lChaineTronque, ATaille, AGras);
                }
                if (LLongueur === 0) {
                    return aChaineEnTexte ? '' : '<font style="font-size:1px">&nbsp;</font>';
                }
                if (LLongueur >= ALongueur) {
                    lChaineTronque = lChaine.substring(0, I - 1);
                    while (I > 2) {
                        if (this.GetLongueurChaineDansDiv(lChaineTronque, ATaille, AGras) < ALongueur) {
                            break;
                        }
                        I--;
                        lChaineTronque = lChaine.substring(0, I - 1);
                    }
                }
                return this.ajouterEntites(lChaineTronque);
            }
            return AChaine;
        };
        _ObjetChaine.prototype.GetChaine = function(AChaine, ATaille, AGras, ALongueur, aChaineEnTexte) {
            return this.GetLongueurChaine(AChaine, ATaille, AGras, ALongueur, aChaineEnTexte);
        };
        _ObjetChaine.prototype.encoderComposantUrl = function(S) {
            if (!MethodesObjet.isString(S)) {
                return '';
            }
            try {
                return encodeURIComponent(decodeURI(S).replace(_ObjetChaine.regexCarControl, ''));
            } catch (e) {
                return '';
            }
        };
        _ObjetChaine.prototype.encoderUrl = function(S) {
            if (!MethodesObjet.isString(S)) {
                return '';
            }
            try {
                return encodeURI(decodeURI(S).replace(_ObjetChaine.regexCarControl, ''));
            } catch (e) {
                return '';
            }
        };
        _ObjetChaine.prototype.ToHTML = function(AChaine) {
            return AChaine ? AChaine.toHTML() : '';
        };
        _ObjetChaine.prototype.fromHTML = function(AChaine) {
            return AChaine ? AChaine.replace(/<br( \/)?>/gi, '\n') : '';
        };
        _ObjetChaine.prototype.nodeToText = function(aNode) {
            if (!aNode || !aNode.childNodes) {
                return '';
            }
            var lSupprimerDernier = false;
            var lTab = $(aNode.childNodes).map(function(aIndex) {
                if (this.nodeName.toLowerCase() === 'br') {
                    return '';
                }
                var lText = $(this).text();
                if (GNavigateur.IsIE && aIndex === aNode.childNodes.length - 1 && !lText) {
                    lSupprimerDernier = true;
                }
                return lText;
            }).get();
            if (lSupprimerDernier) {
                lTab.pop();
            }
            return lTab.join('\n');
        };
        _ObjetChaine.prototype.ajouterEntites = function(aChaine, aSansQuote) {
            if (!aChaine || !aChaine.replace) {
                return aChaine;
            }
            var re = aSansQuote ? /([<>'&])/g : /([<>"'&])/g;
            return aChaine.replace(re, function(m) {
                if (m === "<") {
                    return "&lt;";
                }
                if (m === ">") {
                    return "&gt;";
                }
                if (m === "\"") {
                    return "&quot;";
                }
                if (m === "'") {
                    return "&#039;";
                }
                if (m === "&") {
                    return "&amp;";
                }
            });
        };
        _ObjetChaine.prototype.enleverEntites = function(aChaine) {
            if (!aChaine || !aChaine.replace) {
                return aChaine;
            }
            var re = /&(lt|gt|quot|#039|amp);/g;
            return aChaine.replace(re, function(m) {
                if (m === "&lt;") {
                    return "<";
                }
                if (m === "&gt;") {
                    return ">";
                }
                if (m === "&quot;") {
                    return "\"";
                }
                if (m === "&#039;") {
                    return "'";
                }
                if (m === "&amp;") {
                    return "&";
                }
            });
        };
        _ObjetChaine.prototype.toTexte = function(aChaine) {
            return aChaine;
        };
        _ObjetChaine.prototype.nettoyerCommentaire = function(aChaine) {
            return aChaine && aChaine.replace ? aChaine.replace(/(<!--)(.+)(-->)/g, '') : aChaine;
        };
        _ObjetChaine.prototype.verifierURLHttp = function(aUrl) {
            return aUrl ? (aUrl.toLowerCase().indexOf('http://') === 0) || (aUrl.toLowerCase().indexOf('https://') === 0) ? aUrl : 'http://' + aUrl : aUrl;
        };
        _ObjetChaine.prototype.ajouterLiensURL = function(aTexte) {
            if (!aTexte) {
                aTexte = '';
            }
            var urlRegex = this.regexURL;
            return aTexte.replace(urlRegex, function(url) {
                return '<a href="' + this.verifierURLHttp(url) + '" target="_blank">' + url + '</a>';
            }.bind(this));
        };
        _ObjetChaine.prototype.contientAuMoinsUneURL = function(aTexte) {
            if (!aTexte) {
                aTexte = '';
            }
            var lTexteAvecLiensURL = GChaine.ajouterLiensURL(aTexte);
            return (aTexte !== lTexteAvecLiensURL);
        };
        _ObjetChaine.prototype.composerUrlLienExterne = function(aParam) {
            var lParam = {
                documentJoint: undefined,
                genreDocumentJoint: undefined,
                genreRessource: undefined,
                infoSupp: undefined,
                libelle: '',
                libelleEcran: undefined,
                title: '',
                class: 'LienAccueil',
                attr: '',
                paramGet: '',
                iconeColor: '',
                iconeOverride: '',
                sansImgFormat: false,
                avecLien: true,
                maxWidth: 0,
                brut: false
            };
            var lUrl = '';
            Object.assign(lParam, aParam);
            if (!MethodesObjet.isNumber(lParam.genreDocumentJoint)) {
                lParam.genreDocumentJoint = lParam.documentJoint ? lParam.documentJoint.GetGenre() : EGenreDocumentJoint.Fichier;
            }
            if (lParam.documentJoint && (lParam.documentJoint.Etat === EGenreEtat.Creation || !lParam.documentJoint.existeNumero())) {
                lParam.avecLien = false;
                lParam.class += ' SansMain';
            }
            if (lParam.genreDocumentJoint === EGenreDocumentJoint.Url && !lParam.libelleEcran && !lParam.libelle) {
                lParam.libelleEcran = lParam.documentJoint.GetLibelle();
                lParam.libelle = 'link';
            }
            if (lParam.avecLien) {
                var lInfoFichier = new ObjetElement('', lParam.documentJoint.GetNumero(), lParam.genreRessource);
                Object.assign(lInfoFichier, lParam.infoSupp);
                lUrl = GApplication.getCommunication().composeUrlFichierExterne(this.encoderComposantUrl(lParam.libelle || lParam.documentJoint.GetLibelle()), lInfoFichier, true);
                if (lParam.paramGet) {
                    lUrl += '&' + lParam.paramGet;
                }
            }
            if (lParam.brut === true) {
                return lUrl;
            }
            var lInfosLiens = {
                tag: lParam.avecLien ? 'a' : 'span',
                class: lParam.class || false,
                title: lParam.title || false,
                libelle: lParam.libelleEcran !== undefined && lParam.libelleEcran !== null ? lParam.libelleEcran : lParam.libelle ? lParam.libelle : lParam.documentJoint ? lParam.documentJoint.GetLibelle() : '',
                href: lUrl,
                attr: lParam.attr,
                image: false,
                icone: false,
                maxWidth: lParam.maxWidth || false,
                iconeColor: lParam.iconeColor || false
            };
            var lGenreFichier = EFormatDocJoint.getGenreDeFichier(this.extraireExtensionFichier(lParam.libelle ? lParam.libelle : lParam.documentJoint ? lParam.documentJoint.GetLibelle() : ''));
            if (!lParam.sansImgFormat && !lParam.iconeOverride) {
                lInfosLiens.image = ' ' + EFormatDocJoint.getClassImgDeGenre(lGenreFichier);
                if (lGenreFichier === EFormatDocJoint.Inconnu) {
                    lInfosLiens.image = '';
                    if (lParam.genreDocumentJoint === EGenreDocumentJoint.Cloud) {
                        lInfosLiens.icone = 'icon_cloud';
                    } else if (lParam.genreDocumentJoint === EGenreDocumentJoint.Url) {
                        lInfosLiens.icone = 'icon_link';
                    } else if (lParam.genreDocumentJoint === EGenreDocumentJoint.LienKiosque) {
                        lInfosLiens.icone = 'icon_external_link';
                    }
                }
            } else if (lParam.iconeOverride) {
                lInfosLiens.icone = lParam.iconeOverride;
            }
            if (lGenreFichier === EFormatDocJoint.Geogebra) {
                lInfosLiens.href = 'geogebra.html?view=' + encodeURIComponent(lInfosLiens.href) + '';
            }
            return '<' + lInfosLiens.tag + ' id="' + GUID.getId() + '"' + (lInfosLiens.class ? ' class="' + lInfosLiens.class + '"' : '') + (lInfosLiens.title ? ' title="' + GChaine.toTitle(lInfosLiens.title) + '"' : '') + (lInfosLiens.tag === 'a' ? ' target="_blank"' : '') + (lInfosLiens.tag === 'a' ? ' href="' + lInfosLiens.href + '"' : '') + (lInfosLiens.attr ? ' ' + lInfosLiens.attr : '') + '>' + (lInfosLiens.image ? ('<span' + ' class="InlineBlock AlignementMilieuVertical ' + lInfosLiens.image + '"' + ' style="margin-right: 0px;"' + '></span>') : '') + (lInfosLiens.icone ? ('<span' + ' class="EspaceDroit InlineBlock AlignementMilieuVertical"' + '><i' + ' class="' + lInfosLiens.icone + '"' + ' style="color:' + (lInfosLiens.iconeColor || GCouleur.themeNeutre.foncee) + '"' + '></i></span>') : '') + '<span' + ' class="AlignementMilieuVertical InlineBlock"' + (lInfosLiens.maxWidth > 0 ? ' style="max-width:' + lInfosLiens.maxWidth + 'px;" ie-ellipsis ' : '') + '>' +
                lInfosLiens.libelle + '</span>' + '</' + lInfosLiens.tag + '>';
        };
        _ObjetChaine.prototype.getUrlDocumentJoint = function(aRessource) {
            return;
        };
        _ObjetChaine.prototype.composeUrlRequete = function(aParam) {
            var lResult = '';
            if (aParam.url) {
                lResult = aParam.url;
                if (lResult.charAt(lResult.length - 1) !== '/') {
                    lResult += '/';
                }
            }
            if (aParam.nomRequete) {
                if (aParam.nomRequete.charAt(0) !== '/') {
                    lResult += aParam.nomRequete;
                } else {
                    lResult += aParam.nomRequete.substring(1, aParam.nomRequete.length - 1);
                }
            }
            return lResult;
        };
        _ObjetChaine.prototype.supprimerEspaces = function(aChaine) {
            return aChaine && aChaine.replace ? aChaine.replace(/ /g, '') : aChaine;
        };
        var _regexLatinize = null;

        function _latinize(aMatch) {
            var x, lTranslate = {
                'á': 'a',
                'à': 'a',
                'â': 'a',
                'ä': 'a',
                'ã': 'a',
                'ç': 'c',
                'é': 'e',
                'è': 'e',
                'ê': 'e',
                'ë': 'e',
                'í': 'i',
                'ì': 'i',
                'î': 'i',
                'ï': 'i',
                'ñ': 'n',
                'ó': 'o',
                'ò': 'o',
                'ô': 'o',
                'ö': 'o',
                'õ': 'o',
                'ő': 'o',
                'ß': 'ss',
                'š': 'szz',
                'ú': 'u',
                'ù': 'u',
                'û': 'u',
                'ü': 'u',
                'ű': 'u',
                'ý': 'y',
                'ÿ': 'y',
                'æ': 'ae',
                'œ': 'oe'
            };
            if (!aMatch) {
                if (!_regexLatinize) {
                    var lRegex = [];
                    for (x in lTranslate) {
                        lRegex.push(x);
                    }
                    _regexLatinize = lRegex.join('');
                }
                return _regexLatinize;
            }
            var lMatchLower = aMatch.toLowerCase();
            var lIsUpperCase = lMatchLower !== aMatch;
            return lIsUpperCase ? lTranslate[lMatchLower].ucfirst() : lTranslate[lMatchLower];
        }
        _ObjetChaine.prototype.latinize = function(aChaine) {
            return aChaine ? aChaine.replace(new RegExp('[' + _latinize() + ']', 'gi'), _latinize) : '';
        };
        _ObjetChaine.prototype.normalize = function(aChaine) {
            if (aChaine && aChaine.normalize) {
                return aChaine.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
            }
            return this.latinize(aChaine);
        };
        _ObjetChaine.prototype.miseEnFormeEmail = function(aEmail) {
            return aEmail ? aEmail.replace(/;/g, '<br/>') : '';
        };
        _ObjetChaine.prototype.controleTailleTexte = function(aParam) {
            var lResult = {
                controleOK: true,
                chaine: aParam.chaine
            };
            var lValeurSansEntites = this.enleverEntites(aParam.chaine);
            if ((aParam.tailleTexteMax > 0) && (lValeurSansEntites.length > aParam.tailleTexteMax)) {
                lValeurSansEntites = lValeurSansEntites.slice(0, aParam.tailleTexteMax);
                lResult = {
                    controleOK: false,
                    chaine: this.ajouterEntites(lValeurSansEntites)
                };
            }
            return lResult;
        };
        _ObjetChaine.prototype.extraireNomFichier = function(aNomFichier) {
            if (!aNomFichier || !aNomFichier.split) {
                return aNomFichier;
            }
            var lTab = aNomFichier.split('.');
            if (lTab.length > 1) {
                lTab.pop();
            }
            return lTab.join('.');
        };
        _ObjetChaine.prototype.extraireExtensionFichier = function(aNomFichier) {
            if (!aNomFichier || !aNomFichier.split) {
                return '';
            }
            var lTab = aNomFichier.split('.');
            return lTab.length > 1 ? lTab[lTab.length - 1] : '';
        };
        _ObjetChaine.prototype.getLibelleSurligne = function(aObjetTri, aLibelle, aRecherches, aOptions) {
            if (!aLibelle) {
                return aLibelle;
            }
            var i, lRecherche, lIndex, lArray = [],
                j, lLibelle = GChaine.enleverEntites(aLibelle || '').replace(/&nbsp;/g, ' '),
                lResult, lOptions = Object.assign({
                    couleur: GCouleur.surlignageTexte
                }, aOptions);
            if (Array.isArray(aRecherches)) {
                for (i = 0; i < aRecherches.length; i++) {
                    lRecherche = aRecherches[i].trim();
                    if (lRecherche.length > 0) {
                        for (lIndex = 0; lIndex < lLibelle.length; lIndex++) {
                            if (lIndex + lRecherche.length <= lLibelle.length &&
                                aObjetTri.comparerChamps(lRecherche, lLibelle.slice(lIndex, lIndex + lRecherche.length)) === 0) {
                                for (j = 0; j < lRecherche.length; j++) {
                                    lArray[lIndex + j] = true;
                                }
                            }
                        }
                    }
                }
            }
            lResult = '';
            for (i = 0; i < lLibelle.length; i++) {
                if (lArray[i]) {
                    if (!lArray[i - 1]) {
                        lResult += '<span style="background-color:' + lOptions.couleur + '">';
                    }
                    lResult += GChaine.ajouterEntites(lLibelle[i]);
                    if (!lArray[i + 1]) {
                        lResult += '</span>';
                    }
                } else {
                    lResult += GChaine.Insecable(GChaine.ajouterEntites(lLibelle[i]));
                }
            }
            return lResult;
        };
        _ObjetChaine.prototype.supprimerBalisesHtml = function(aContenu) {
            if (!aContenu || !MethodesObjet.isString(aContenu)) {
                return '';
            }
            var lContenu = aContenu.replace(/\n/g, '').replace(/(<\/div>|<\/ol>|<\/ul>|<\/li>|<\/p>)(?!(<br>|<br\/>|<\/div>|<\/ol>|<\/ul>|<\/li>|<\/p>))/g, '$1\n').replace(/(<br>|<br\/>)/g, '$1\n').replace(/<[^>]*?>/gi, '');
            if (lContenu.endsWith('\n')) {
                lContenu = lContenu.slice(0, lContenu.length - 1);
            }
            return lContenu;
        };
        var GChaine = new _ObjetChaine();
        module.exports = {
            _ObjetChaine: _ObjetChaine,
            GChaine: GChaine
        };
        Date.prototype.toJSON = function() {
            var lJSON = {};
            lJSON[TypeChampsJSON.type] = TypeHttpVariable.TypeHttpDateTime;
            lJSON[TypeChampsJSON.valeur] = _ObjetChaine.prototype.DateToStr(this);
            return lJSON;
        };
    },
    fn: "_objetchaine.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var EGenreTriElement = require('Enumere_TriElement.js');
        var GChaine = require('_ObjetChaine.js').GChaine;
        var ObjetTri = (function() {
            var uSupportLocaleCompare = false,
                uSupportCollator = !!(window.Intl && window.Intl.Collator),
                uLocales, uCollator = uSupportCollator ? new window.Intl.Collator(uLocales, {
                    sensitivity: "accent"
                }) : null,
                uCollatorCaseSensitive = uSupportCollator ? new window.Intl.Collator(uLocales, {
                    sensitivity: "variant"
                }) : null,
                uCollator_NonCaseSensitive_IgnoreAccent = uSupportCollator ? new window.Intl.Collator(uLocales, {
                    sensitivity: "base"
                }) : null,
                uCollator_CaseSensitive_IgnoreAccent = uSupportCollator ? new window.Intl.Collator(uLocales, {
                    sensitivity: "case"
                }) : null;
            try {
                if (''.localeCompare) {
                    uSupportLocaleCompare = 'e'.localeCompare('é', 'fr', {
                        sensitivity: "base"
                    }) === 0;
                }
            } catch (e) {
                uSupportLocaleCompare = false;
            }

            function _construirePilePere(aValeur, aNomChampePere, aPile) {
                var lObjet = aValeur;
                while (lObjet && lObjet[aNomChampePere] && MethodesObjet.isObject(lObjet[aNomChampePere]) && !MethodesTableau.existe(lObjet[aNomChampePere], aPile)) {
                    lObjet = lObjet[aNomChampePere];
                    aPile.push(lObjet);
                }
            }

            function _comparerTriRecursif(A, B, aTri) {
                var lPileParentA = [A.contenu],
                    lPileParentB = [B.contenu],
                    i, lResult, j, lNb, lTri, lCount, lA, lB;
                if (!aTri.tris) {
                    return false;
                }
                _construirePilePere(A.contenu, aTri.nomChampPere, lPileParentA);
                _construirePilePere(B.contenu, aTri.nomChampPere, lPileParentB);
                lPileParentA.reverse();
                lPileParentB.reverse();
                lCount = Math.max(lPileParentA.length, lPileParentB.length);
                for (i = 0; i < lCount; i++) {
                    lA = lPileParentA[i];
                    lB = lPileParentB[i];
                    if ((!lA && lB) || (!lA && !lB)) {
                        return -aTri.ordreTri;
                    } else if (lA && !lB) {
                        return aTri.ordreTri;
                    } else if (lA === lB) {
                        continue;
                    }
                    for (j = 0, lNb = aTri.tris.length; j < lNb; j++) {
                        lTri = aTri.tris[j];
                        lResult = _comparerTri(lA, lB, lTri, null, false, i);
                        if (lResult !== false) {
                            return lResult;
                        }
                    }
                }
                return false;
            }

            function _getValeur(aChamp, aCaseSensitive, aIgnorerAccents) {
                var lResult = aChamp;
                if (!lResult) {
                    return lResult;
                }
                if (lResult.getTime) {
                    return lResult.getTime();
                }
                if (lResult.replace) {
                    lResult = GChaine.enleverEntites(lResult);
                    if (!uSupportLocaleCompare && !uSupportCollator && aIgnorerAccents) {
                        lResult = GChaine.latinize(lResult);
                    }
                }
                if (!aCaseSensitive && !uSupportCollator && !uSupportLocaleCompare && lResult && lResult.toLowerCase) {
                    lResult = lResult.toLowerCase();
                }
                return lResult;
            }

            function _getValeurPourTri(aTri, aElement, aProfondeur) {
                var lResult;
                if (aTri.estFonction) {
                    lResult = aTri.nomChamp(aElement, aProfondeur);
                } else if (aTri.estAccesseurChaine) {
                    lResult = MethodesObjet.get(aElement, aTri.nomChamp);
                } else {
                    if (!aElement) {
                        return aElement;
                    }
                    lResult = aElement[aTri.nomChamp];
                }
                return _getValeur(lResult, aTri.caseSensitive, aTri.ignorerAccents);
            }

            function _compareChamps(aChampA, aChampB, aCaseSensitive, aIgnorerAccents) {
                var lChampAString = aChampA && aChampA.localeCompare;
                var lChampBString = aChampB && aChampB.localeCompare;
                if ((uSupportLocaleCompare || uSupportCollator) && lChampAString && lChampBString) {
                    var lResult = 0;
                    if (uSupportCollator) {
                        lResult = (aCaseSensitive ? !aIgnorerAccents ? uCollatorCaseSensitive : uCollator_CaseSensitive_IgnoreAccent : !aIgnorerAccents ? uCollator : uCollator_NonCaseSensitive_IgnoreAccent).compare(aChampA, aChampB);
                    } else {
                        lResult = aChampA.localeCompare(aChampB, 'fr', {
                            sensitivity: (aCaseSensitive ? !aIgnorerAccents ? "variant" : "case" : !aIgnorerAccents ? "accent" : "base")
                        });
                    }
                    if (lResult < 0) {
                        return -1;
                    }
                    if (lResult > 0) {
                        return 1;
                    }
                    return false;
                }
                var lChampANull = aChampA === undefined || aChampA === null,
                    lChampBNull = aChampB === undefined || aChampB === null;
                if (lChampANull && lChampBNull) {
                    return false;
                }
                if (lChampAString && aChampB === ObjetTri.MAX_STRING) {
                    return -1;
                }
                if (lChampBString && aChampA === ObjetTri.MAX_STRING) {
                    return 1;
                }
                if (aChampA > aChampB || lChampBNull) {
                    return 1;
                }
                if (aChampA < aChampB || lChampANull) {
                    return -1;
                }
                return false;
            }

            function _comparerTri(A, B, aTri, aIndiceTri, aAvecCacheTri, aProfondeur) {
                var lChampTriA, lChampTriB;
                if (aAvecCacheTri) {
                    if (!A.cache[aIndiceTri]) {
                        lChampTriA = _getValeurPourTri(aTri, A.contenu, aProfondeur);
                        A.cache[aIndiceTri] = {
                            valeur: lChampTriA
                        };
                    } else {
                        lChampTriA = A.cache[aIndiceTri].valeur;
                    }
                    if (!B.cache[aIndiceTri]) {
                        lChampTriB = _getValeurPourTri(aTri, B.contenu, aProfondeur);
                        B.cache[aIndiceTri] = {
                            valeur: lChampTriB
                        };
                    } else {
                        lChampTriB = B.cache[aIndiceTri].valeur;
                    }
                } else {
                    lChampTriA = _getValeurPourTri(aTri, A, aProfondeur);
                    lChampTriB = _getValeurPourTri(aTri, B, aProfondeur);
                }
                if (lChampTriA === lChampTriB || (lChampTriA === undefined && lChampTriB === null) || (lChampTriB === undefined && lChampTriA === null)) {
                    return false;
                }
                var lResult = _compareChamps(lChampTriA, lChampTriB, aTri.caseSensitive, false);
                if (lResult === false) {
                    return false;
                }
                return lResult * aTri.ordreTri;
            }

            function _comparer(aTris, A, B) {
                var i, lNb, lTri, lResult;
                for (i = 0, lNb = aTris.length; i < lNb; i++) {
                    lTri = aTris[i];
                    if (!lTri) {
                        return 0;
                    }
                    if (lTri.triRecursif) {
                        lResult = _comparerTriRecursif(A, B, lTri);
                    } else {
                        lResult = _comparerTri(A, B, lTri, i, true, 0);
                    }
                    if (lResult !== false) {
                        return lResult;
                    }
                }
                return A.ordre - B.ordre;
            }
            return {
                comparerChamps: function(aChampA, aChampB, aCaseSensitive, aAvecAccents) {
                    var lResult = _compareChamps(_getValeur(aChampA, !!aCaseSensitive, !aAvecAccents), _getValeur(aChampB, !!aCaseSensitive, !aAvecAccents), !!aCaseSensitive, !aAvecAccents);
                    return lResult === false ? 0 : lResult;
                },
                init: function(aNomChamp, aGenreTri, aCaseSensitive, aIgnorerAccents) {
                    return {
                        estFonction: MethodesObjet.isFunction(aNomChamp),
                        estAccesseurChaine: MethodesObjet.isString(aNomChamp) && aNomChamp.indexOf('.') >= 0,
                        nomChamp: aNomChamp,
                        ordreTri: aGenreTri === EGenreTriElement.Decroissant ? -1 : 1,
                        caseSensitive: aCaseSensitive === true ? true : false,
                        ignorerAccents: aIgnorerAccents === true ? true : false
                    };
                },
                initRecursif: function(aNomChampPere, aTris) {
                    var lTris = aTris;
                    return {
                        triRecursif: true,
                        nomChampPere: aNomChampPere,
                        tris: lTris,
                        ordreTri: EGenreTriElement.Croissant
                    };
                },
                trierTableau: function(aTableau, aTris) {
                    if (!aTableau || !aTableau.sort || !aTris || aTableau.length < 2) {
                        return;
                    }
                    var lLength = aTableau.length,
                        lTableau = new Array(lLength),
                        i, lValeur;
                    for (i = 0; i < lLength; i++) {
                        lValeur = aTableau[i];
                        if (lValeur !== undefined || lValeur !== null) {
                            lTableau[i] = {
                                contenu: lValeur,
                                cache: [],
                                ordre: i
                            };
                        } else {
                            lTableau[i] = lValeur;
                        }
                    }
                    lTableau.sort(_comparer.bind(null, aTris));
                    for (i = 0; i < lLength; i++) {
                        lValeur = lTableau[i];
                        if (lValeur !== undefined || lValeur !== null) {
                            aTableau[i] = lValeur.contenu;
                        } else {
                            aTableau[i] = lValeur;
                        }
                    }
                },
                MAX_STRING: {
                    MAX_STRING: true
                }
            };
        }());

        function ObjetIndexsUnique() {
            this._indexsUnique = [];
        }
        ObjetIndexsUnique.prototype.ajouterIndex = function(aChamps) {
            if (!MethodesObjet.isArray(aChamps) && !MethodesObjet.isString(aChamps)) {
                return this;
            }
            if (!this._indexsUnique) {
                this._indexsUnique = [];
            }
            var lChamps = [],
                i, lChampIndex, lChampIndexCalcul;
            if (!MethodesObjet.isArray(aChamps)) {
                aChamps = [aChamps];
            }
            for (i = 0; i < aChamps.length; i++) {
                lChampIndex = aChamps[i];
                if (lChampIndex.valeur) {
                    lChampIndexCalcul = lChampIndex;
                } else {
                    lChampIndexCalcul = ObjetIndexsUnique.ajouterChamp(lChampIndex);
                }
                lChamps.push(lChampIndexCalcul);
            }
            this._indexsUnique.push(lChamps);
            return this;
        };
        ObjetIndexsUnique.ajouterChamp = function(aValeur, aVideEstDoublon, aSensibleCasse) {
            return {
                valeur: aValeur,
                videEstDoublon: !!aVideEstDoublon,
                sensibleCasse: !!aSensibleCasse,
                estFonction: MethodesObjet.isFunction(aValeur),
                estAccesseurChaine: MethodesObjet.isString(aValeur) && aValeur.indexOf('.') >= 0
            };
        };
        ObjetIndexsUnique.prototype.estDoublon = function(a, b) {
            var i;
            for (i = 0; i < this._indexsUnique.length; i++) {
                if (_estDoublonComparaisonET(this._indexsUnique[i], a, b)) {
                    return true;
                }
            }
            return false;
        };
        ObjetIndexsUnique.prototype.estDoublonDansTableau = function(aElement, aTableau) {
            var i;
            for (i in aTableau) {
                if (this.estDoublon(aElement, aTableau[i])) {
                    return true;
                }
            }
            return false;
        };
        ObjetIndexsUnique.prototype.existeIndex = function() {
            return this._indexsUnique.length > 0;
        };

        function _estDoublonComparaisonET(aIndexUnique, a, b) {
            var i, lResult = false;
            for (i = 0; i < aIndexUnique.length; i++) {
                if (aIndexUnique[i]) {
                    if (_comparateurChampIndex(aIndexUnique[i], a, b)) {
                        lResult = true;
                    } else {
                        return false;
                    }
                }
            }
            return lResult;
        }

        function _comparateurChampIndex(aChampIndex, a, b) {
            if (!aChampIndex || !aChampIndex.valeur) {
                return false;
            }
            if (!a || !b) {
                return false;
            }
            var lValeurA, lValeurB;
            if (aChampIndex.estFonction) {
                lValeurA = aChampIndex.valeur(a);
                lValeurB = aChampIndex.valeur(b);
            } else if (aChampIndex.estAccesseurChaine) {
                lValeurA = MethodesObjet.get(a, aChampIndex.valeur);
                lValeurB = MethodesObjet.get(b, aChampIndex.valeur);
            } else {
                lValeurA = a[aChampIndex.valeur];
                lValeurB = b[aChampIndex.valeur];
            }
            if (lValeurA && lValeurA.getTime) {
                lValeurA = lValeurA.getTime();
            }
            if (lValeurB && lValeurB.getTime) {
                lValeurB = lValeurB.getTime();
            }
            if (aChampIndex.sensibleCasse !== true) {
                if (lValeurA && lValeurA.toLowerCase) {
                    lValeurA = lValeurA.toLowerCase();
                }
                if (lValeurB && lValeurB.toLowerCase) {
                    lValeurB = lValeurB.toLowerCase();
                }
            }
            if (lValeurA === lValeurB && (lValeurA === '' || lValeurA === undefined || lValeurA === null)) {
                return !!aChampIndex.videEstDoublon;
            } else {
                return lValeurA === lValeurB;
            }
        }
        module.exports.ObjetTri = ObjetTri;
        module.exports.ObjetIndexsUnique = ObjetIndexsUnique;
    },
    fn: "objettri.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var EGenreEtat = require('Enumere_Etat.js');
        var EGenreTriElement = require('Enumere_TriElement.js');
        var ObjetTri = require('ObjetTri.js').ObjetTri;
        var ObjetElement = require('ObjetElement.js');

        function ObjetListeElements() {
            this.vider();
        }
        ObjetListeElements.prototype.vider = function() {
            this.ListeElements = [];
            return this;
        };
        ObjetListeElements.prototype.add = function(aElement) {
            if (aElement) {
                if (ObjetElement.prototype.isPrototypeOf(aElement)) {
                    this.ListeElements.push(aElement);
                    return this;
                }
                if (aElement.parcourir && ObjetListeElements.prototype.isPrototypeOf(aElement)) {
                    aElement.parcourir(function(a) {
                        this.add(a);
                    }.bind(this));
                    return this;
                }
                if (Array.isArray(aElement)) {
                    aElement.forEach(function(a) {
                        this.add(a);
                    }.bind(this));
                    return this;
                }
            }
            require('IELog.js').addLog('ObjetListeElements.prototype.add : aElement incorrect => ' + aElement);
            return this;
        };
        ObjetListeElements.prototype.AddElement = function(AElement, I) {
            if (I === null || I === undefined) {
                this.ListeElements.push(AElement);
            } else {
                this.ListeElements[I] = AElement;
            }
            return this;
        };
        ObjetListeElements.prototype.insererElement = function(AElement, I) {
            MethodesTableau.insererElement(AElement, this.ListeElements, I);
            return this;
        };
        ObjetListeElements.prototype.DelElement = function() {
            this.ListeElements.pop();
            return this;
        };
        ObjetListeElements.prototype.remove = function(aIndice) {
            MethodesTableau.supprimerElement(this.ListeElements, aIndice);
            return this;
        };
        ObjetListeElements.prototype.GetNbrElements = function() {
            return this.ListeElements.length;
        };
        ObjetListeElements.prototype.GetNbrElementsExistes = function(aGenre) {
            var N = 0,
                I;
            for (I = 0; I < this.ListeElements.length; I++) {
                if (this.Existe(I) && (aGenre === null || aGenre === undefined || this.GetElement(I).Genre === aGenre)) {
                    N++;
                }
            }
            return N;
        };
        ObjetListeElements.prototype.GetListeElements = function() {
            return this.ListeElements;
        };
        ObjetListeElements.prototype.parcourir = function(aFunction, aThis) {
            if (!aFunction || !MethodesObjet.isFunction(aFunction)) {
                return this;
            }
            this.ListeElements.every(function(aElement, aIndex) {
                return aFunction.call(aThis, aElement, aIndex, this) !== false;
            }.bind(this));
            return this;
        };
        ObjetListeElements.prototype.getTableau = function(aFunction) {
            var T = [];
            if (!aFunction || !MethodesObjet.isFunction(aFunction)) {
                return T;
            }
            this.ListeElements.forEach(function(aElement, aIndex) {
                T.push(aFunction(aElement, aIndex));
            });
            return T;
        };
        ObjetListeElements.prototype.removeFilter = function(aFilter) {
            if (aFilter && MethodesObjet.isFunction(aFilter)) {
                var lTab = [];
                this.ListeElements.forEach(function(aElement, aIndex) {
                    if (aFilter(aElement, aIndex) !== true) {
                        lTab.push(aElement);
                    }
                });
                this.ListeElements = lTab;
            }
            return this;
        };
        ObjetListeElements.prototype.getTableauLibelles = function(aGenre, aTrier, aAvecExiste) {
            var T = [],
                I;
            if (aTrier) {
                this.trier();
            }
            for (I = 0; I < this.ListeElements.length; I++) {
                if ((aGenre === null || aGenre === undefined) || ($.isNumeric(aGenre) && aGenre === this.GetGenre(I)) || ($.isArray(aGenre) && $.inArray(this.GetGenre(I), aGenre) > -1)) {
                    if (!aAvecExiste || this.Existe(I)) {
                        T.push(this.GetLibelle(I));
                    }
                }
            }
            return T;
        };
        ObjetListeElements.prototype.getTableauNumeros = function(aAvecExiste) {
            var T = [],
                I;
            for (I = 0; I < this.ListeElements.length; I++) {
                if (!aAvecExiste || this.Existe(I)) {
                    T.push(this.GetNumero(I));
                }
            }
            return T;
        };
        ObjetListeElements.prototype.getTableauGenres = function() {
            var T = [],
                I;
            for (I = 0; I < this.ListeElements.length; I++) {
                T.push(this.GetGenre(I));
            }
            return T;
        };
        ObjetListeElements.prototype.getTableauPositions = function() {
            var T = [],
                I;
            for (I = 0; I < this.ListeElements.length; I++) {
                T.push(this.GetPosition(I));
            }
            return T;
        };
        ObjetListeElements.prototype.getCle = function() {
            return this.getTableauNumeros().sort().join('_');
        };
        ObjetListeElements.prototype.GetElement = function(I) {
            return this.ListeElements[I];
        };
        ObjetListeElements.prototype.getListeElements = function(aFiltre) {
            var lListe = new ObjetListeElements(),
                I;
            for (I = 0; I < this.ListeElements.length; I++) {
                if (!aFiltre || aFiltre(this.ListeElements[I], I)) {
                    lListe.AddElement(this.ListeElements[I]);
                }
            }
            return lListe;
        };
        ObjetListeElements.prototype.getIndiceElementParFiltre = function(aFiltre) {
            var lResult = -1,
                I;
            for (I = 0; I < this.ListeElements.length && lResult < 0; I++) {
                if (!aFiltre || aFiltre(this.ListeElements[I])) {
                    lResult = I;
                }
            }
            return lResult;
        };
        ObjetListeElements.prototype.GetElementParNumero = function(ANumero) {
            var I, lNb;
            for (I = 0, lNb = this.GetNbrElements(); I < lNb; I++) {
                if (this.Existe(I) && (this.GetNumero(I) === ANumero)) {
                    return this.GetElement(I);
                }
            }
        };
        ObjetListeElements.prototype.getListeElementsParNumero = function(aNumero) {
            var lListe = new ObjetListeElements();
            this.parcourir(function(aElement) {
                if (aElement && aElement.Existe() && (aElement.GetNumero() === aNumero)) {
                    lListe.AddElement(aElement);
                }
            }.bind(this));
            return lListe;
        };
        ObjetListeElements.prototype.GetElementParGenre = function(aGenre) {
            var I, lNb;
            for (I = 0, lNb = this.GetNbrElements(); I < lNb; I++) {
                if (this.Existe(I) && (this.GetGenre(I) === aGenre)) {
                    return this.GetElement(I);
                }
            }
        };
        ObjetListeElements.prototype.GetNumero = function(I) {
            return this.ListeElements[I].Numero;
        };
        ObjetListeElements.prototype.GetGenre = function(I) {
            return this.ListeElements[I].Genre;
        };
        ObjetListeElements.prototype.GetLibelle = function(I) {
            return this.ListeElements[I].Libelle;
        };
        ObjetListeElements.prototype.GetActif = function(I) {
            return this.ListeElements[I].Actif;
        };
        ObjetListeElements.prototype.GetPosition = function(I) {
            return this.ListeElements[I].Position;
        };
        ObjetListeElements.prototype.existeNumero = function(I) {
            var N = this.GetNumero(I);
            return N && (N !== '0') ? true : false;
        };
        ObjetListeElements.prototype.Existe = function(I) {
            return this.ListeElements[I].Existe();
        };
        ObjetListeElements.prototype.PourValidation = function(I) {
            return this.ListeElements[I].PourValidation();
        };
        ObjetListeElements.prototype.SetLibelle = function(I, ALibelle) {
            this.ListeElements[I].Libelle = ALibelle;
        };
        ObjetListeElements.prototype.TrierPourValidation = function() {
            ObjetTri.trierTableau(this.ListeElements, [ObjetTri.init('Etat')]);
        };
        ObjetListeElements.prototype.existeElementPourValidation = function() {
            var I, lNb;
            for (I = 0, lNb = this.GetNbrElements(); I < lNb; I++) {
                if (this.PourValidation(I)) {
                    return true;
                }
            }
            return false;
        };
        ObjetListeElements.prototype.setTri = function(aTableauTris) {
            this._tris = aTableauTris;
            return this;
        };
        ObjetListeElements.prototype.getTri = function() {
            return this._tris;
        };
        ObjetListeElements.prototype.trier = function(aGenreTri) {
            if (this.ListeElements) {
                aGenreTri = aGenreTri === null || aGenreTri === undefined ? EGenreTriElement.Croissant : aGenreTri;
                if (!this._tris) {
                    this.setTri([
                        ObjetTri.init('Position'), ObjetTri.init('Libelle')
                    ]);
                }
                var lTris = [].concat(this._tris);
                lTris.unshift(ObjetTri.init(function(aElement) {
                    return (aElement.Visible === false) || (aElement.Etat === EGenreEtat.Suppression);
                }, aGenreTri));
                ObjetTri.trierTableau(this.ListeElements, lTris);
                if (aGenreTri === EGenreTriElement.Decroissant) {
                    this.ListeElements.reverse();
                }
            }
            return this;
        };
        ObjetListeElements.prototype.GetIndiceParNumeroEtGenre = function(ANumero, AGenre, aAvecExiste) {
            if (this.ListeElements && (((ANumero !== null && ANumero !== undefined)) || ((AGenre !== null && AGenre !== undefined)))) {
                var N = this.GetNbrElements(),
                    I;
                for (I = 0; I < N; I++) {
                    var lElement = this.ListeElements[I];
                    if (lElement && lElement.egalParNumeroEtGenre(ANumero, AGenre, aAvecExiste)) {
                        return I;
                    }
                }
            }
        };
        ObjetListeElements.prototype.GetIndiceExisteParNumeroEtGenre = function(ANumero, AGenre) {
            if (this.ListeElements && (((ANumero !== null && ANumero !== undefined)) || ((AGenre !== null && AGenre !== undefined)))) {
                var N = this.GetNbrElements(),
                    J = -1,
                    I;
                for (I = 0; I < N; I++) {
                    if (this.Existe(I)) {
                        J++;
                        if (((ANumero === null || ANumero === undefined) || (this.GetNumero(I) === ANumero)) && ((AGenre === null || AGenre === undefined) || (this.GetGenre(I) === AGenre))) {
                            return J;
                        }
                    }
                }
            }
        };
        ObjetListeElements.prototype.GetElementParNumeroEtGenre = function(ANumero, AGenre, aAvecExiste) {
            return this.GetElement(this.GetIndiceParNumeroEtGenre(ANumero, AGenre, aAvecExiste));
        };
        ObjetListeElements.prototype.GetIndiceParElement = function(aElement, aAvecExiste) {
            return aElement ? this.GetIndiceParNumeroEtGenre(aElement.GetNumero(), aElement.GetGenre(), aAvecExiste) : null;
        };
        ObjetListeElements.prototype.GetIndiceExisteParElement = function(aElement) {
            return this.GetIndiceExisteParNumeroEtGenre(aElement.GetNumero(), aElement.GetGenre());
        };
        ObjetListeElements.prototype.GetElementParElement = function(aElement, aAvecExiste) {
            return this.GetElement(this.GetIndiceParElement(aElement, aAvecExiste));
        };
        ObjetListeElements.prototype.GetIndiceParLibelle = function(ALibelle) {
            if (this.ListeElements) {
                var I, N = this.GetNbrElements();
                for (I = 0; I < N; I++) {
                    if (this.GetLibelle(I) === ALibelle) {
                        return I;
                    }
                }
            }
        };
        ObjetListeElements.prototype.GetIndiceParParsingLibelle = function(aLibelle) {
            if (!this.ListeElements) {
                return -1;
            }
            if (aLibelle.length === 0) {
                return 0;
            }
            var I, N, lIndice = 0;
            for (I = 0, N = this.GetNbrElements(); I < N; I++) {
                var lLibelle = this.GetLibelle(I);
                if (lLibelle.toUpperCase() < aLibelle.toUpperCase()) {
                    lIndice++;
                } else {
                    break;
                }
            }
            return lIndice >= N ? lIndice - 1 : lIndice;
        };
        ObjetListeElements.prototype.GetElementParLibelle = function(ALibelle) {
            return this.GetElement(this.GetIndiceParLibelle(ALibelle));
        };
        ObjetListeElements.prototype.GetPremierElement = function() {
            var i, lNb, lResult = null;
            for (i = 0, lNb = this.GetNbrElements(); i < lNb && !lResult; i++) {
                if (this.Existe(i)) {
                    lResult = this.GetElement(i);
                }
            }
            return lResult;
        };
        ObjetListeElements.prototype.FusionnerListe = function(AListeElements, APere, AFaireCeQuIlFaut) {
            if (AListeElements) {
                var I, LNbrElts = AListeElements.GetNbrElements();
                for (I = 0; I < LNbrElts; I++) {
                    var LRetour = true;
                    if (APere && AFaireCeQuIlFaut) {
                        LRetour = AFaireCeQuIlFaut.call(APere, AListeElements.GetElement(I));
                    }
                    if (LRetour) {
                        this.AddElement(AListeElements.GetElement(I));
                    }
                }
            }
            return this;
        };
        ObjetListeElements.prototype.listeIdentiqueParElementsOrdonnes = function(aListeElements) {
            if (!aListeElements || !aListeElements.GetNbrElements) {
                return false;
            }
            if (this.GetNbrElements() !== aListeElements.GetNbrElements()) {
                return false;
            }
            var lResult = true;
            this.parcourir(function(aElement, aIndice) {
                var lIndice = aListeElements.GetIndiceParElement(aElement);
                if (lIndice !== aIndice) {
                    lResult = false;
                    return false;
                }
            });
            return lResult;
        };
        ObjetListeElements.prototype.setSerialisateurJSON = function(aSerialisateur) {
            this.serialisateurJSON = {
                ignorerEtatsElements: false,
                methodeSerialisation: null,
                nePasTrierPourValidation: false
            };
            Object.assign(this.serialisateurJSON, aSerialisateur);
            return this;
        };
        ObjetListeElements.prototype.toJSON = function() {
            var I, lNb, lElement, lJSONElement, lGarderElement, lExisteElement, lAvecSerialisation = this.serialisateurJSON && this.serialisateurJSON.methodeSerialisation,
                lResult = [],
                lListe = new ObjetListeElements();
            lListe.FusionnerListe(this);
            if (!this.serialisateurJSON || !this.serialisateurJSON.nePasTrierPourValidation) {
                lListe.TrierPourValidation();
            }
            for (I = 0, lNb = lListe.GetNbrElements(); I < lNb; I++) {
                lElement = lListe.GetElement(I);
                if (lElement) {
                    lExisteElement = (this.serialisateurJSON && this.serialisateurJSON.ignorerEtatsElements) || lElement.PourValidation();
                    lJSONElement = null;
                    if (lExisteElement || lAvecSerialisation) {
                        lJSONElement = lElement.toJSON();
                        if (lAvecSerialisation) {
                            lGarderElement = this.serialisateurJSON.methodeSerialisation(lElement, lJSONElement, I);
                            lExisteElement = lGarderElement === null || lGarderElement === undefined ? lExisteElement : lGarderElement;
                        }
                    }
                    if (lExisteElement && lJSONElement) {
                        lResult.push(lJSONElement);
                    }
                }
            }
            return lResult;
        };
        ObjetListeElements.prototype.fromJSON = function(aJSON, aMethodeDeserialisation, aTrier) {
            if (!aJSON || !MethodesObjet.isArray(aJSON)) {
                return this;
            }
            var i, lNb;
            for (i = 0, lNb = aJSON.length; i < lNb; i++) {
                var lElement = new ObjetElement().fromJSON(aJSON[i]);
                if (!aMethodeDeserialisation || (aMethodeDeserialisation(aJSON[i], lElement, i) !== false)) {
                    this.AddElement(lElement);
                }
            }
            if (aTrier) {
                this.trier();
            }
            return this;
        };
        module.exports = ObjetListeElements;
    },
    fn: "objetlisteelements.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var TypeChampsJSON = require('Enumere_ChampsJSON.js');
        var ObjetElement = require('ObjetElement.js');
        var TypeHttpVariable = require('TypeHttpVariable.js').TypeHttpVariable;

        function TypeDomaine(AValeurParDefaut, ANombreValeurs) {
            this.valeurSemaine = {
                plein: '1',
                vide: '0'
            };
            this.nombreValeurs = ANombreValeurs ? ANombreValeurs : TypeDomaine.C_MaxDomaineCycle;
            AValeurParDefaut = (AValeurParDefaut === null) || AValeurParDefaut === undefined || (AValeurParDefaut === '') ? '[]' : AValeurParDefaut;
            this.Domaine = _getDomaine.call(this, AValeurParDefaut, this.nombreValeurs);
            this.cache = {};
        }
        TypeDomaine.CTailleOuverte = -1;
        TypeDomaine.C_MaxDomaineCycle = 62;

        function _getDomaine(AValeurParDefaut, ANombreValeurs) {
            var lType = typeof(AValeurParDefaut);
            var D;
            if ((lType !== 'objet') && (lType !== 'string')) {
                D = new Array(1 + (ANombreValeurs === null || ANombreValeurs === undefined ? TypeDomaine.C_MaxDomaineCycle : ANombreValeurs)).join((lType === 'boolean') && AValeurParDefaut ? this.valeurSemaine.plein : this.valeurSemaine.vide).split('');
            }
            switch (lType) {
                case 'number':
                    D[AValeurParDefaut - 1] = this.valeurSemaine.plein;
                    return D;
                case 'objet':
                    return AValeurParDefaut;
                case 'string':
                    return this.strToDomaine(AValeurParDefaut, ANombreValeurs);
                case 'boolean':
                    return D;
                default:
                    return D;
            }
        }
        TypeDomaine.prototype.strToDomaine = function(aChaine, aNombreValeurs) {
            if (!((aChaine.charAt(0) === '[') && (aChaine.charAt(aChaine.length - 1) === ']'))) {
                var lTab = aChaine.split('');
                if (aNombreValeurs !== null && aNombreValeurs >= 0) {
                    lTab.length = aNombreValeurs;
                }
                return lTab;
            }
            aChaine = aChaine.substring(1, aChaine.length - 1);
            var R = new Array(aNombreValeurs !== TypeDomaine.CTailleOuverte ? aNombreValeurs : 0);
            var T1 = aChaine.split(',');
            for (var I = 0; I < T1.length; I++) {
                var T2 = T1[I].split('..');
                var V1 = parseInt(T2[0]);
                var V2 = parseInt(T2.length === 1 ? V1 : T2[1]);
                for (var J = V1; J <= V2; J++) {
                    R[J - 1] = this.valeurSemaine.plein;
                }
            }
            if (this.nombreValeurs !== TypeDomaine.CTailleOuverte) {
                this.nombreValeurs = R.length;
            }
            return R;
        };
        TypeDomaine.prototype.toString = function() {
            var S = '',
                N = 0;
            for (var I = 0; I <= this.Domaine.length; I++) {
                if (this.Domaine[I] === '1') {
                    N++;
                } else if (N > 0) {
                    if (S.length) {
                        S += ',';
                    }
                    if (N > 1) {
                        S += (I + 1 - N) + '..';
                    }
                    S += (I);
                    N = 0;
                }
            }
            return '[' + S + ']';
        };
        TypeDomaine.prototype.Vider = function() {
            this.cache = {};
            this.SetValeur(false, 1, this.GetTaille());
            return this;
        };
        TypeDomaine.prototype.EstVide = function() {
            return this.GetNbrValeurs(true) === 0;
        };
        TypeDomaine.prototype.SetValeur = function(AValeur, ADeb, AFin) {
            if ((ADeb > this.GetTaille()) && (this.nombreValeurs !== TypeDomaine.CTailleOuverte)) {
                return;
            }
            this.cache = {};
            if (this.nombreValeurs !== TypeDomaine.CTailleOuverte) {
                ADeb = Math.borner(ADeb, 1, this.GetTaille());
                AFin = Math.borner(AFin === null || AFin === undefined ? ADeb : AFin, 1, this.GetTaille());
            } else {
                ADeb = Math.max(ADeb, 1);
                AFin = AFin === null || AFin === undefined ? ADeb : Math.max(ADeb, AFin);
            }
            for (var I = ADeb - 1; I < AFin; I++) {
                this.Domaine[I] = AValeur ? this.valeurSemaine.plein : this.valeurSemaine.vide;
            }
            return this;
        };
        TypeDomaine.prototype.GetValeur = function(APos) {
            return this.Domaine[APos - 1] === this.valeurSemaine.plein;
        };
        TypeDomaine.prototype.GetPremierePosition = function(aValeur) {
            for (var I = 0; I < this.Domaine.length; I++) {
                var lValeur = this.Domaine[I] === null || this.Domaine[I] === undefined ? this.valeurSemaine.vide : this.Domaine[I];
                if (lValeur === (aValeur === false ? this.valeurSemaine.vide : this.valeurSemaine.plein)) {
                    return I + 1;
                }
            }
            return -1;
        };
        TypeDomaine.prototype.enListeDomainesContinues = function() {
            var ObjetListeElements = require('ObjetListeElements.js');
            var lResult = new ObjetListeElements();
            var lValeurPrecedente;
            var lPeriode = new ObjetElement('');
            for (var I = 0; I < this.Domaine.length; I++) {
                var lValeur = this.Domaine[I] === null || this.Domaine[I] === undefined ? this.valeurSemaine.vide : this.Domaine[I];
                if (lValeur === (this.valeurSemaine.plein)) {
                    if (lPeriode.debut === undefined) {
                        lPeriode.debut = I + 1;
                    }
                    if (lValeurPrecedente === this.valeurSemaine.plein || lPeriode.fin === undefined) {
                        lPeriode.fin = I + 1;
                    }
                } else {
                    if (lPeriode.debut !== undefined) {
                        lResult.AddElement(lPeriode);
                    }
                    lPeriode = new ObjetElement('');
                }
                lValeurPrecedente = lValeur;
            }
            if (lPeriode.debut !== undefined) {
                lResult.AddElement(lPeriode);
            }
            return lResult;
        };
        TypeDomaine.prototype.GetDernierePosition = function(aValeur) {
            for (var I = this.Domaine.length - 1; I >= 0; I--) {
                var lValeur = this.Domaine[I] === null || this.Domaine[I] === undefined ? this.valeurSemaine.vide : this.Domaine[I];
                if (lValeur === (aValeur === false ? this.valeurSemaine.vide : this.valeurSemaine.plein)) {
                    return I + 1;
                }
            }
            return -1;
        };
        TypeDomaine.prototype.GetNbrValeurs = function(AValeur) {
            var N = 0;
            var LValeur = AValeur || (AValeur === null) || AValeur === undefined ? this.valeurSemaine.plein : this.valeurSemaine.vide;
            if (this.cache['GetNbrValeurs_' + LValeur] !== undefined) {
                return this.cache['GetNbrValeurs_' + LValeur];
            }
            for (var I = 0; I < this.Domaine.length; I++) {
                if (this.Domaine[I] === LValeur) {
                    N++;
                }
            }
            this.cache['GetNbrValeurs_' + LValeur] = N;
            return N;
        };
        TypeDomaine.prototype.EstUnNombre = function() {
            return this.GetNbrValeurs(true) <= 1;
        };
        TypeDomaine.prototype.getNombre = function() {
            return this.GetNbrValeurs(true) === 1 ? this.GetPremierePosition(true) : 0;
        };
        TypeDomaine.prototype.GetTaille = function() {
            return this.Domaine.length;
        };
        TypeDomaine.prototype.GetIntersection = function(aDomaine) {
            if (!aDomaine) {
                return MethodesObjet.dupliquer(this);
            }
            var lTaille = Math.min(this.GetTaille(), aDomaine.GetTaille());
            var lIntersect = new TypeDomaine(null, lTaille);
            for (var I = 1; I <= lTaille; I++) {
                if (this.GetValeur(I) && aDomaine.GetValeur(I)) {
                    lIntersect.SetValeur(true, I);
                }
            }
            return lIntersect;
        };
        TypeDomaine.prototype.getInversion = function() {
            var lTaille = this.GetTaille();
            var lInversion = new TypeDomaine(null, lTaille);
            for (var I = 1; I <= lTaille; I++) {
                lInversion.SetValeur(!this.GetValeur(I), I);
            }
            return lInversion;
        };
        TypeDomaine.prototype.getDomaineSoustraction = function(aDomaineASoustraire) {
            var lDomaine = MethodesObjet.dupliquer(this);
            if (!aDomaineASoustraire || !aDomaineASoustraire.GetTaille || !aDomaineASoustraire.GetValeur) {
                return lDomaine;
            }
            for (var I = 1, lTaille = aDomaineASoustraire.GetTaille(); I <= lTaille; I++) {
                if (aDomaineASoustraire.GetValeur(I)) {
                    lDomaine.SetValeur(false, I);
                }
            }
            return lDomaine;
        };
        TypeDomaine.prototype.getDomaineUnion = function(aDomaineAAjouter) {
            var lDomaine = MethodesObjet.dupliquer(this);
            if (!aDomaineAAjouter) {
                return lDomaine;
            }
            for (var I = 1, lTaille = aDomaineAAjouter.GetTaille(); I <= lTaille; I++) {
                if (aDomaineAAjouter.GetValeur(I)) {
                    lDomaine.SetValeur(true, I);
                }
            }
            return lDomaine;
        };
        TypeDomaine.prototype.egal = function(aDomaine) {
            if (!aDomaine || !aDomaine.GetTaille || !aDomaine.GetValeur) {
                return false;
            }
            for (var I = 1, lTaille = this.GetTaille(); I <= lTaille; I++) {
                if (this.GetValeur(I) !== aDomaine.GetValeur(I)) {
                    return false;
                }
            }
            return true;
        };
        TypeDomaine.prototype.getSemaines = function() {
            if (this.cache['getSemaines'] !== undefined) {
                return this.cache['getSemaines'];
            }
            var lTaille = this.GetTaille(),
                lSemaines = [],
                I;
            for (I = 1; I <= lTaille; I++) {
                if (this.GetValeur(I)) {
                    lSemaines.push(I);
                }
            }
            this.cache['getSemaines'] = lSemaines;
            return lSemaines;
        };
        TypeDomaine.prototype.dupliquer = function() {
            var lDomaine = new TypeDomaine(null, this.nombreValeurs);
            lDomaine.Domaine = [].concat(this.Domaine);
            return lDomaine;
        };
        TypeDomaine.prototype.toJSON = function() {
            var lJSON = {};
            lJSON[TypeChampsJSON.type] = TypeHttpVariable.TypeHttpDomaine;
            lJSON[TypeChampsJSON.valeur] = this.toString();
            return lJSON;
        };
        module.exports = TypeDomaine;
    },
    fn: "typedomaine.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        require('divers.js');
        var GChaine = require('_ObjetChaine.js').GChaine;
        var trad = require('traductions.js');

        function ObjetTraduction() {}
        ObjetTraduction.prototype.add = function(aNom, aValeur, aAccepteTableau) {
            try {
                var lNomDernierNoeud = aNom;
                var lObjet = this;
                if (aNom.indexOf('.') > 0) {
                    var T = aNom.split('.');
                    for (var J = 0; J < T.length - 1; J++) {
                        var lProp = aNom.split('.')[J];
                        if (!lObjet[lProp]) {
                            lObjet[lProp] = new ObjetTraduction();
                        }
                        lObjet = lObjet[lProp];
                    }
                    if (T.length > 0) {
                        lNomDernierNoeud = aNom.split('.')[T.length - 1];
                    }
                }
                if (MethodesObjet.isString(lObjet)) {
                    return;
                }
                if (lObjet[lNomDernierNoeud] || lObjet[lNomDernierNoeud] === '') {
                    if (MethodesObjet.isString(lObjet[lNomDernierNoeud])) {
                        lObjet[lNomDernierNoeud] = [lObjet[lNomDernierNoeud]];
                    }
                    lObjet[lNomDernierNoeud].push(aValeur || '');
                } else {
                    lObjet[lNomDernierNoeud] = aValeur || '';
                }
            } catch (e) {}
        };
        ObjetTraduction.prototype.getValeur = function(aNom, aTableauRemplacements) {
            var lValeur = MethodesObjet.get(this, aNom);
            if (!lValeur && !MethodesObjet.isString(lValeur)) {
                return lValeur || '';
            }
            if (aTableauRemplacements) {
                if (MethodesObjet.isString(lValeur)) {
                    lValeur = GChaine.Format(lValeur, aTableauRemplacements);
                }
            }
            return lValeur;
        };
        ObjetTraduction.prototype.getTitreMFiche = function(aIdRessource) {
            var lChaine = this.getValeur(aIdRessource);
            if (lChaine !== '') {
                var lJson = JSON.parse(lChaine);
                if (lJson && lJson.titre) {
                    return lJson.titre;
                } else {}
            } else {}
        };
        ObjetTraduction.prototype._DEBUG_PasserEnCleDeTraductions = function(aChaine) {};
        var lTraduction = new ObjetTraduction();
        if (trad) {
            var lFunc = function() {
                lTraduction.add.apply(lTraduction, arguments);
            };
            trad(lFunc);
        }
        module.exports = lTraduction;
    },
    fn: "objettraduction.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreAnnotation = {
            erreur: -1,
            note: 0,
            absent: 1,
            dispense: 2,
            nonNote: 3,
            inapte: 4,
            nonRendu: 5,
            absentZero: 6,
            nonRenduZero: 7,
            felicitations: 8
        };
        module.exports = EGenreAnnotation;
    },
    fn: "enumere_annotation.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ToucheClavier = {};
        ToucheClavier.Backspace = 8;
        ToucheClavier.Tab = 9;
        ToucheClavier.RetourChariot = 13;
        ToucheClavier.Espace = 32;
        ToucheClavier.Shift = 16;
        ToucheClavier.Ctrl = 17;
        ToucheClavier.Alt = 18;
        ToucheClavier.Windows = 91;
        ToucheClavier.ContextMenu = 93;
        ToucheClavier.Echap = 27;
        ToucheClavier.FlecheGauche = 37;
        ToucheClavier.FlecheDroite = 39;
        ToucheClavier.FlecheHaut = 38;
        ToucheClavier.FlecheBas = 40;
        ToucheClavier.Inserer = 45;
        ToucheClavier.Supprimer = 46;
        ToucheClavier.Debut = 36;
        ToucheClavier.Fin = 35;
        ToucheClavier.PageHaut = 33;
        ToucheClavier.PageBas = 34;
        ToucheClavier._0 = 48;
        ToucheClavier._1 = 49;
        ToucheClavier._2 = 50;
        ToucheClavier._3 = 51;
        ToucheClavier._4 = 52;
        ToucheClavier._5 = 53;
        ToucheClavier._6 = 54;
        ToucheClavier._7 = 55;
        ToucheClavier._8 = 56;
        ToucheClavier._9 = 57;
        ToucheClavier.A = 65;
        ToucheClavier.B = 66;
        ToucheClavier.C = 67;
        ToucheClavier.D = 68;
        ToucheClavier.E = 69;
        ToucheClavier.F = 70;
        ToucheClavier.G = 71;
        ToucheClavier.H = 72;
        ToucheClavier.I = 73;
        ToucheClavier.J = 74;
        ToucheClavier.K = 75;
        ToucheClavier.L = 76;
        ToucheClavier.M = 77;
        ToucheClavier.N = 78;
        ToucheClavier.O = 79;
        ToucheClavier.P = 80;
        ToucheClavier.Q = 81;
        ToucheClavier.R = 82;
        ToucheClavier.S = 83;
        ToucheClavier.T = 84;
        ToucheClavier.U = 85;
        ToucheClavier.V = 86;
        ToucheClavier.W = 87;
        ToucheClavier.X = 88;
        ToucheClavier.Y = 89;
        ToucheClavier.Z = 90;
        ToucheClavier.AccoladeDroite = 222;
        ToucheClavier.AccoladeGauche = 220;
        ToucheClavier.Dollar = 223;
        ToucheClavier.CrochetGauche = 186;
        ToucheClavier.CrochetDroite = 192;
        ToucheClavier.Circonflexe = 221;
        ToucheClavier.PointInterrogation = 219;
        ToucheClavier.VerrMaj = 20;
        ToucheClavier.VerrNum = 144;
        ToucheClavier.F1 = 115;
        ToucheClavier.F3 = 114;
        ToucheClavier.F2 = 113;
        ToucheClavier.F5 = 116;
        ToucheClavier.F6 = 117;
        ToucheClavier.F7 = 118;
        ToucheClavier.F8 = 119;
        ToucheClavier.F9 = 120;
        ToucheClavier.F10 = 121;
        ToucheClavier.F11 = 122;
        ToucheClavier.F12 = 123;
        ToucheClavier.ArretDefilement = 145;
        ToucheClavier.Pause = 19;
        ToucheClavier.Inferieur = 226;
        ToucheClavier.Virgule = 188;
        ToucheClavier.Tiret = 189;
        ToucheClavier.Point = 190;
        ToucheClavier.Section = 191;
        ToucheClavier.NumpadPlus = 107;
        ToucheClavier.NumpadMoins = 109;
        ToucheClavier.NumpadSlash = 111;
        ToucheClavier.NumpadStar = 106;
        ToucheClavier.Numpad_0 = 96;
        ToucheClavier.Numpad_1 = 97;
        ToucheClavier.Numpad_2 = 98;
        ToucheClavier.Numpad_3 = 99;
        ToucheClavier.Numpad_4 = 100;
        ToucheClavier.Numpad_5 = 101;
        ToucheClavier.Numpad_6 = 102;
        ToucheClavier.Numpad_7 = 103;
        ToucheClavier.Numpad_8 = 104;
        ToucheClavier.Numpad_9 = 105;
        ToucheClavier.NumpadPoint = 110;
        ToucheClavier.estCaractere = function(aChar, aRegExp) {
            return (aChar === '') || new RegExp('[' + aRegExp + ']').test(aChar);
        };
        ToucheClavier.estEventRetourChariot = function(aEventJQuery) {
            return !!aEventJQuery && aEventJQuery.which === ToucheClavier.RetourChariot && !aEventJQuery.shiftKey && !aEventJQuery.altKey && !aEventJQuery.ctrlKey;
        };
        ToucheClavier.estEventEspace = function(aEventJQuery) {
            return !!aEventJQuery && aEventJQuery.which === ToucheClavier.Espace && !aEventJQuery.shiftKey;
        };
        ToucheClavier.estEventCaractereAlphaNumerique = function(aEventJQuery) {
            return !!aEventJQuery && !aEventJQuery.altKey && !aEventJQuery.ctrlKey && (new RegExp('[0-9.a-z.A-Z]').test(String.fromCharCode(aEventJQuery.which)));
        };
        module.exports = ToucheClavier;
    },
    fn: "toucheclavier.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeChampsJSON = require('Enumere_ChampsJSON.js');
        var TypeHttpVariable = require('TypeHttpVariable.js').TypeHttpVariable;
        var EGenreAnnotation = require('Enumere_Annotation.js');
        var GTraductions = require('ObjetTraduction.js');
        var ToucheClavier = require('ToucheClavier.js');
        var GChaine = require('_ObjetChaine.js').GChaine;
        var MethodesObjet = require('MethodesObjet.js');
        var ObjetTri = require('ObjetTri.js').ObjetTri;

        function TypeNote(aParametre, N) {
            this.note = '0.00';
            this.valeur = 0.00;
            this.genre = EGenreAnnotation.note;
            this.bareme = 0.00;
            var lType = typeof(aParametre);
            if (lType === 'string') {
                this.genre = this.getGenreNote(aParametre);
                this.valeur = this.noteToValeur(aParametre);
                this.note = this.estUneAnnotation() ? this.getChaineAnnotationDeGenre(this.genre) : this.valeurToNote(this.valeur, N);
                if (this.genre === EGenreAnnotation.absentZero || this.genre === EGenreAnnotation.nonRenduZero) {
                    this.valeur = 0.00;
                } else if (this.genre === EGenreAnnotation.felicitations) {
                    var lAvecFelicitationAutorisee = TypeNote.estAnnotationPermise(EGenreAnnotation.felicitations);
                    if (lAvecFelicitationAutorisee) {
                        this.bareme = this.getBaremeNote(aParametre);
                        this.note = this.valeurToNote(this.bareme, N) + this.note;
                        try {
                            var lSurplusBareme = TypeNote.getValeurSurplusBaremeAAppliquer(this.bareme);
                            this.valeur = this.bareme + lSurplusBareme;
                        } catch (error) {}
                    } else {
                        this.genre = EGenreAnnotation.note;
                        this.bareme = this.getBaremeNote(aParametre);
                        this.note = this.valeurToNote(this.bareme, N);
                        this.valeur = this.bareme;
                    }
                }
                this.chaine = aParametre;
            } else if (lType === 'number') {
                this.note = this.valeurToNote(aParametre, N);
                this.valeur = aParametre;
                this.genre = EGenreAnnotation.note;
            }
        }
        var lTableauNotations = null;

        function _getTableauNotations() {
            if (!lTableauNotations) {
                lTableauNotations = ['', GTraductions.getValeur('TypeNote.Annotation.Absent'), GTraductions.getValeur('TypeNote.Annotation.Dispense'), GTraductions.getValeur('TypeNote.Annotation.NonNote'), GTraductions.getValeur('TypeNote.Annotation.Inapte'), GTraductions.getValeur('TypeNote.Annotation.NonRendu'), GTraductions.getValeur('TypeNote.Annotation.Absent') + '*', GTraductions.getValeur('TypeNote.Annotation.NonRendu') + '*', GTraductions.getValeur('TypeNote.Annotation.Felicitations')];
            }
            return lTableauNotations;
        }
        TypeNote.decimalNotation = 2;
        TypeNote.baremeNotation = null;
        TypeNote.surplusBareme = null;
        TypeNote.getValeurSurplusBaremeAAppliquer = function(aValeurBareme) {
            var lSurplusBaremeCalcule = 0;
            if (!!aValeurBareme && !!TypeNote.surplusBareme && TypeNote.surplusBareme.getValeur()) {
                var lBaremeParDefaut = TypeNote.baremeNotation;
                if (!!lBaremeParDefaut && aValeurBareme !== lBaremeParDefaut.getValeur()) {
                    lSurplusBaremeCalcule = (TypeNote.surplusBareme.getValeur() * aValeurBareme) / lBaremeParDefaut.getValeur();
                } else {
                    lSurplusBaremeCalcule = TypeNote.surplusBareme.getValeur();
                }
            }
            return lSurplusBaremeCalcule;
        };
        TypeNote.listeAnnotationsAutorisees = null;
        TypeNote.estAnnotationPermise = function(aGenreAnnotation) {
            var lListeAutorisee = TypeNote.listeAnnotationsAutorisees;
            return !!aGenreAnnotation && (!lListeAutorisee || lListeAutorisee.indexOf(aGenreAnnotation) !== -1);
        };
        TypeNote.avecVirgule = function() {
            return TypeNote.decimalNotation > 0;
        };
        TypeNote.prototype.getCaractereAnnotation = function(aArrayGenresNote) {
            var lCaractereAnnotation = {};
            for (var x in aArrayGenresNote) {
                switch (aArrayGenresNote[x]) {
                    case (EGenreAnnotation.absent):
                        lCaractereAnnotation.Absent = GTraductions.getValeur('TypeNote.CaractereAnnotation.Absent');
                        break;
                    case (EGenreAnnotation.dispense):
                        lCaractereAnnotation.Dispense = GTraductions.getValeur('TypeNote.CaractereAnnotation.Dispense');
                        break;
                    case (EGenreAnnotation.nonNote):
                        lCaractereAnnotation.NonNote = GTraductions.getValeur('TypeNote.CaractereAnnotation.NonNote');
                        break;
                    case (EGenreAnnotation.inapte):
                        lCaractereAnnotation.Inapte = GTraductions.getValeur('TypeNote.CaractereAnnotation.Inapte');
                        break;
                    case (EGenreAnnotation.nonRendu):
                        lCaractereAnnotation.NonRendu = GTraductions.getValeur('TypeNote.CaractereAnnotation.NonRendu');
                        break;
                    case (EGenreAnnotation.absentZero):
                        lCaractereAnnotation.AbsentZero = GTraductions.getValeur('TypeNote.CaractereAnnotation.AbsentZero');
                        break;
                    case (EGenreAnnotation.nonRenduZero):
                        lCaractereAnnotation.NonRenduZero = GTraductions.getValeur('TypeNote.CaractereAnnotation.NonRenduZero');
                        break;
                    case (EGenreAnnotation.felicitations):
                        lCaractereAnnotation.Felicitations = GTraductions.getValeur('TypeNote.CaractereAnnotation.Felicitations');
                        break;
                }
            }
            return lCaractereAnnotation;
        };
        TypeNote.prototype.getGenreNote = function(aChaine) {
            if (aChaine.split('|').length >= 2) {
                return parseInt(aChaine.split('|')[1]);
            }
            var lTabNotations = _getTableauNotations();
            for (var I in lTabNotations) {
                if (lTabNotations[I].toLowerCase() === aChaine.toLowerCase()) {
                    return parseInt(I);
                } else if (parseInt(I) === EGenreAnnotation.felicitations) {
                    var lObjCaracteresAnnotation = this.getCaractereAnnotation([EGenreAnnotation.felicitations]);
                    if (aChaine.indexOf(lObjCaracteresAnnotation.Felicitations) > 0) {
                        return EGenreAnnotation.felicitations;
                    }
                }
            }
            return EGenreAnnotation.note;
        };
        TypeNote.prototype.getBaremeNote = function(aChaine) {
            var lStrBareme = aChaine.split('|')[2];
            if (!!lStrBareme) {
                lStrBareme = lStrBareme.replace(',', '.');
            }
            return parseFloat(lStrBareme);
        };
        TypeNote.prototype.getNote = function() {
            return this.note;
        };
        TypeNote.prototype.getValeur = function() {
            return this.valeur;
        };
        TypeNote.prototype.getGenre = function() {
            return this.genre;
        };
        TypeNote.prototype.estUneValeur = function() {
            return !isNaN(this.valeur);
        };
        TypeNote.prototype.toString = function() {
            return this.note;
        };
        TypeNote.prototype.getNoteSansDecimaleForcee = function() {
            if (this.genre === EGenreAnnotation.note && !isNaN(this.valeur)) {
                return this.valeur.toString().replace('.', ',');
            }
            return this.getNote();
        };
        TypeNote.prototype.toStr = function() {
            var str;
            if (this.genre === EGenreAnnotation.note) {
                str = this.note;
            } else {
                str = '|' + this.genre;
                if (this.genre === EGenreAnnotation.felicitations && (this.bareme !== null && this.bareme !== undefined)) {
                    str += '|' + this.bareme;
                }
            }
            return str;
        };
        TypeNote.prototype.toJSON = function() {
            var lJSON = {};
            lJSON[TypeChampsJSON.type] = TypeHttpVariable.TypeHttpNote;
            lJSON[TypeChampsJSON.valeur] = this.toStr();
            return lJSON;
        };
        TypeNote.prototype.noteToValeur = function(aStrNote) {
            return parseFloat(aStrNote.replace(',', '.'));
        };
        TypeNote.prototype.valeurToNote = function(aValeur, N) {
            if (isNaN(aValeur)) {
                return '';
            }
            N = N === null || N === undefined ? TypeNote.decimalNotation : N;
            return ('' + (parseFloat(aValeur).toFixed(N))).replace('.', ',');
        };
        TypeNote.prototype.estUneNoteVide = function() {
            return (this.note === '');
        };
        TypeNote.prototype.estUneAnnotation = function() {
            return (this.genre !== EGenreAnnotation.note);
        };
        TypeNote.prototype.estVide = function() {
            return (this.note === '') && !this.estUneValeur();
        };
        TypeNote.prototype.estUneNoteValide = function(aNoteMin, aNoteMax, aAvecNotationSpecifique, aAvecVide) {
            if (this.estUneNoteVide()) {
                return aAvecVide === true;
            }
            if (aAvecNotationSpecifique) {
                if (this.genre !== EGenreAnnotation.note) {
                    return true;
                }
            }
            var lChaine = this.note.replace(/\./g, ',');
            if (lChaine.indexOf(',') === -1) {
                lChaine += ',';
            }
            var lPosVirgule = lChaine.indexOf(',');
            var lNbrVirgule = lChaine.split(',').length - 1;
            var lPosMoins = lChaine.indexOf('-');
            var lPosVirguleMax = Math.max(('' + (parseInt(aNoteMin))).length, ('' + (parseInt(aNoteMax))).length);
            return (lPosMoins <= 0) && (lPosVirgule <= lPosVirguleMax) && (lChaine.length - (lPosVirgule + 1) <= TypeNote.decimalNotation) && (lNbrVirgule <= 1) && (this.valeur >= aNoteMin.getValeur()) && (this.valeur <= aNoteMax.getValeur());
        };
        TypeNote.prototype.getNoteEntier = function() {
            return this.estUneValeur() ? this.getNote().enleverZero() : this.getNote();
        };
        TypeNote.prototype.getBaremeEntier = function() {
            return '/' + this.getNote().enleverZero();
        };
        TypeNote.prototype.getBaremeEntierSansSlash = function() {
            return this.getNote().enleverZero();
        };
        TypeNote.prototype.getCoefficientEntier = function() {
            return this.getNote().enleverZero();
        };
        TypeNote.prototype.estBaremeParDefaut = function() {
            return TypeNote.baremeNotation ? this.getValeur() === TypeNote.baremeNotation.getValeur() : false;
        };
        TypeNote.prototype.estCoefficientParDefaut = function() {
            return this.valeur === 1;
        };
        TypeNote.prototype.getCoefficient = function() {
            if (this.estUneValeur()) {
                return this.getNote();
            } else {
                return 'xx.xx';
            }
        };
        TypeNote.getGenreAnnotationDeRaccourci = function(aCaractere) {
            var lGenreAnnotation = null;
            if (!!aCaractere && aCaractere.toLowerCase) {
                switch (aCaractere.toLowerCase()) {
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.Absent')):
                        lGenreAnnotation = EGenreAnnotation.absent;
                        break;
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.Dispense')):
                        lGenreAnnotation = EGenreAnnotation.dispense;
                        break;
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.NonNote')):
                        lGenreAnnotation = EGenreAnnotation.nonNote;
                        break;
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.Inapte')):
                        lGenreAnnotation = EGenreAnnotation.inapte;
                        break;
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.NonRendu')):
                        lGenreAnnotation = EGenreAnnotation.nonRendu;
                        break;
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.AbsentZero')):
                        lGenreAnnotation = EGenreAnnotation.absentZero;
                        break;
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.NonRenduZero')):
                        lGenreAnnotation = EGenreAnnotation.nonRenduZero;
                        break;
                    case (GTraductions.getValeur('TypeNote.CaractereAnnotation.Felicitations')):
                        lGenreAnnotation = EGenreAnnotation.felicitations;
                        break;
                }
            }
            return lGenreAnnotation;
        };
        TypeNote.prototype.getChaineAnnotationDeCaractere = function(aCaractere) {
            var lAnnotation = TypeNote.getGenreAnnotationDeRaccourci(aCaractere);
            if (!!lAnnotation) {
                return _getTableauNotations()[lAnnotation];
            }
        };
        TypeNote.prototype.getChaineAnnotationDeGenre = function(aGenre) {
            return _getTableauNotations()[aGenre];
        };
        TypeNote.prototype.egal = function(aNote) {
            return !!aNote && this.toStr() === aNote.toStr();
        };
        TypeNote.prototype.dupliquer = function() {
            var lNote = new TypeNote();
            lNote.note = this.note;
            lNote.valeur = this.valeur;
            lNote.genre = this.genre;
            return lNote;
        };
        TypeNote.estCaractereNote = function(aChar, aAvecLettre, aAvecVirgule, aAvecMoins, aCaractereAnnotation) {
            aAvecLettre = aAvecLettre === null || aAvecLettre === undefined ? true : aAvecLettre;
            aAvecVirgule = aAvecVirgule === null || aAvecVirgule === undefined ? true : aAvecVirgule;
            aAvecMoins = aAvecMoins === null || aAvecMoins === undefined ? true : aAvecMoins;
            aCaractereAnnotation = aCaractereAnnotation === null || aCaractereAnnotation === undefined ? GTraductions.getValeur('TypeNote.CaractereAnnotation') : aCaractereAnnotation;
            var lRegExp = '0-9';
            if (aAvecLettre) {
                var lCarAnnot = '';
                for (var x in aCaractereAnnotation) {
                    if (aCaractereAnnotation[x].toLowerCase && aCaractereAnnotation[x] !== ' ') {
                        lCarAnnot += aCaractereAnnotation[x].toLowerCase();
                    }
                }
                lRegExp += lCarAnnot + lCarAnnot.toUpperCase();
            }
            if (aAvecVirgule) {
                lRegExp += '.,';
            }
            if (aAvecMoins) {
                lRegExp += '-';
            }
            return ToucheClavier.estCaractere(aChar, lRegExp);
        };
        TypeNote.formatStrToNote = function(aChaine, aOptions) {
            var lNote = new TypeNote(aChaine);
            if (lNote.getGenre() > 0) {
                return lNote;
            }
            if (aChaine === '') {
                return aOptions.sansNotePossible ? lNote : null;
            }
            if (aChaine === ',' || aChaine === '.') {
                return aOptions && aOptions.avecVirgule && aOptions.sansNotePossible ? lNote : null;
            }
            if (aChaine === '-') {
                return aOptions.min < 0 ? lNote : null;
            }
            if (aOptions.avecAnnotation && lNote.getChaineAnnotationDeCaractere(aChaine)) {
                return lNote;
            }
            if (lNote.estUneValeur()) {
                var lTest = '0-9' + (aOptions.avecVirgule ? ',.' : '') + (aOptions.min < 0 ? '-' : '');
                if (new RegExp('^[' + lTest + ']+$').test(aChaine)) {
                    return lNote;
                }
            }
            return null;
        };
        TypeNote.validerNote = function(aValeur, aOptions) {
            var lDefault = {
                avecVirgule: true,
                afficherAvecVirgule: true,
                avecAnnotation: true,
                sansNotePossible: true,
                min: 0,
                max: 100,
                titreMessageMinMax: '',
                messageMinMax: GTraductions.getValeur('InputNote.MinMax')
            };
            var lOptions = $.extend(lDefault, aOptions);
            if (!lOptions.avecVirgule) {
                lOptions.afficherAvecVirgule = false;
            }
            var lResult;
            var lValueTemp = aValeur;
            if (lValueTemp.search(/^[0-9]*(,|\.)[0-9]+/) === 0) {
                var lRegExp = new RegExp('^([0-9]*(,|.)[0-9]{' + TypeNote.decimalNotation + '}).*$');
                lValueTemp = lValueTemp.replace(lRegExp, "$1");
            }
            var lNote = TypeNote.formatStrToNote(lValueTemp, lOptions);
            var lValeurMin;
            if (MethodesObjet.isFunction(lOptions.min)) {
                lValeurMin = lOptions.min();
            } else {
                lValeurMin = lOptions.min;
            }
            var lValeurMax;
            if (MethodesObjet.isFunction(lOptions.max)) {
                lValeurMax = lOptions.max();
            } else {
                lValeurMax = lOptions.max;
            }
            var lNoteMin = new TypeNote(lValeurMin),
                lNoteMax = new TypeNote(lValeurMax);
            if (!lNote ||
                !lNote.estUneNoteValide(lNoteMin, lNoteMax, lOptions.avecAnnotation, lOptions.sansNotePossible) ||
                lValueTemp === '-') {
                var lMessage = GChaine.Format(lOptions.messageMinMax, [
                    lOptions.afficherAvecVirgule ? lNoteMin.getNote() : lNoteMin.getNoteSansDecimaleForcee(), lOptions.afficherAvecVirgule ? lNoteMax.getNote() : lNoteMax.getNoteSansDecimaleForcee()
                ]);
                lResult = {
                    estValide: false,
                    titre: lOptions.titreMessageMinMax,
                    message: lMessage
                };
            } else {
                lResult = {
                    estValide: true,
                    note: lNote
                };
            }
            return lResult;
        };
        TypeNote.getTrisDefaut = function(aGetNote, aGenreTri) {
            if (!MethodesObjet.isFunction(aGetNote)) {
                return [];
            }
            return [
                ObjetTri.init(function(D) {
                    var lNote = aGetNote(D);
                    if (lNote && lNote.genre === EGenreAnnotation.note && lNote.estUneValeur()) {
                        return lNote.valeur;
                    }
                    return -1000;
                }, aGenreTri), ObjetTri.init(function(D) {
                    var lNote = aGetNote(D);
                    if (lNote) {
                        return lNote.genre === EGenreAnnotation.note ? -100 : lNote.genre;
                    }
                    return -1000;
                }, aGenreTri)
            ];
        };
        module.exports = TypeNote;
    },
    fn: "typenote.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreArrondi = {
            sans: 0,
            superieur: 1,
            inferieur: 2,
            plusProche: 3
        };
        module.exports = EGenreArrondi;
    },
    fn: "enumere_arrondi.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeChampsJSON = require('Enumere_ChampsJSON.js');
        var GTraductions = require('ObjetTraduction.js');
        var TypeHttpVariable = require('TypeHttpVariable.js').TypeHttpVariable;
        var TypeNote = require('TypeNote.js');
        var EGenreArrondi = require('Enumere_Arrondi.js');

        function TypeArrondi(aGenrePronote) {
            this.precision = 0;
            this.genre = EGenreArrondi.sans;
            this.precisionMini = 1 / Math.pow(10, TypeNote.decimalNotation);
            this.toType(aGenrePronote);
        }
        TypeArrondi.prototype.getPrecision = function() {
            return this.precision;
        };
        TypeArrondi.prototype.getGenre = function() {
            return this.genre;
        };
        TypeArrondi.prototype.setPrecision = function(aPrecision) {
            this.precision = aPrecision;
        };
        TypeArrondi.prototype.setGenre = function(aGenre) {
            this.genre = aGenre;
        };
        TypeArrondi.prototype.arrondir = function(aValeur) {
            aValeur = Math.round(Number(aValeur / this.precisionMini).toFixed(TypeNote.decimalNotation)) * this.precisionMini;
            switch (this.genre) {
                case EGenreArrondi.superieur:
                    return Math.ceil(Number(aValeur / this.precision).toFixed(TypeNote.decimalNotation)) * this.precision;
                case EGenreArrondi.inferieur:
                    return Math.floor(Number(aValeur / this.precision).toFixed(TypeNote.decimalNotation)) * this.precision;
                case EGenreArrondi.plusProche:
                    return Math.round(Number(aValeur / this.precision).toFixed(TypeNote.decimalNotation)) * this.precision;
                default:
                    return aValeur;
            }
        };
        TypeArrondi.prototype.toType = function(aGenrePronote) {
            this.precision = [this.precisionMini, 0.10, 0.25, 0.50, 1, 0.10, 0.25, 0.50, 1][aGenrePronote];
            this.genre = parseInt(aGenrePronote) !== 0 ? parseInt(aGenrePronote) <= 4 ? EGenreArrondi.superieur : EGenreArrondi.plusProche : EGenreArrondi.sans;
        };
        TypeArrondi.prototype.toString = function() {
            switch (this.genre) {
                case EGenreArrondi.sans:
                    return 0;
                case EGenreArrondi.superieur:
                    switch (this.precision) {
                        case 0.10:
                            return 1;
                        case 0.25:
                            return 2;
                        case 0.50:
                            return 3;
                        case 1:
                            return 4;
                        default:
                            ;
                            return 0;
                    }
                    case EGenreArrondi.plusProche:
                        switch (this.precision) {
                            case 0.10:
                                return 5;
                            case 0.25:
                                return 6;
                            case 0.50:
                                return 7;
                            case 1:
                                return 8;
                            default:
                                ;
                                return 0;
                        }
                        default:
                            return 0;
            }
        };
        TypeArrondi.prototype.strPrecision = function() {
            switch (this.precision) {
                case this.precisionMini:
                    return GTraductions.Arrondi[0];
                case 0.10:
                    return GTraductions.Arrondi[1];
                case 0.25:
                    return GTraductions.Arrondi[2];
                case 0.50:
                    return GTraductions.Arrondi[3];
                case 1.00:
                    return GTraductions.Arrondi[4];
            }
            return GTraductions.Arrondi[0];
        };
        TypeArrondi.prototype.dupliquer = function() {
            var lArrondi = new TypeArrondi(0);
            lArrondi.precision = this.precision;
            lArrondi.genre = this.genre;
            return lArrondi;
        };
        TypeArrondi.prototype.toJSON = function() {
            var lJSON = {};
            lJSON[TypeChampsJSON.type] = TypeHttpVariable.TypeHttpArrondi;
            lJSON[TypeChampsJSON.valeur] = this.toString();
            return lJSON;
        };
        module.exports = TypeArrondi;
    },
    fn: "typearrondi.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var TypeChampsJSON = require('Enumere_ChampsJSON.js');
        var TypeHttpVariable = require('TypeHttpVariable.js').TypeHttpVariable;

        function TypeEnsembleNombre(aValeur) {
            this.clear();
            this.add(aValeur);
        }
        TypeEnsembleNombre.prototype.clear = function() {
            this._hash = {};
            this._cacheItems = null;
            return this;
        };
        TypeEnsembleNombre.prototype.add = function(aValeur) {
            var lProp, lNombre;
            this._cacheItems = null;
            if (MethodesObjet.isNumber(aValeur)) {
                this._hash[aValeur] = true;
            } else if (aValeur instanceof TypeEnsembleNombre) {
                for (lProp in aValeur._hash) {
                    this._hash[lProp] = true;
                }
            } else if (MethodesObjet.isArray(aValeur)) {
                for (lProp in aValeur) {
                    lNombre = aValeur[lProp];
                    if (MethodesObjet.isNumber(lNombre)) {
                        this._hash[lNombre] = true;
                    }
                }
            }
            return this;
        };
        TypeEnsembleNombre.prototype.remove = function(aValeur) {
            var lProp, lNombre;
            this._cacheItems = null;
            if (MethodesObjet.isNumber(aValeur)) {
                delete this._hash[aValeur];
            } else if (aValeur instanceof TypeEnsembleNombre) {
                for (lProp in aValeur._hash) {
                    delete this._hash[lProp];
                }
            } else if (MethodesObjet.isArray(aValeur)) {
                for (lProp in aValeur) {
                    lNombre = aValeur[lProp];
                    if (MethodesObjet.isNumber(lNombre)) {
                        delete this._hash[lNombre];
                    }
                }
            }
            return this;
        };
        TypeEnsembleNombre.prototype.contains = function(aValeur) {
            var lProp, lResult;
            if (MethodesObjet.isNumber(aValeur)) {
                return this._hash[aValeur] !== undefined;
            }
            if (aValeur instanceof TypeEnsembleNombre) {
                lResult = false;
                for (lProp in aValeur._hash) {
                    if (!this._hash[lProp]) {
                        return false;
                    }
                    lResult = true;
                }
                return lResult;
            }
            if (MethodesObjet.isArray(aValeur)) {
                if (aValeur.length === 0) {
                    return false;
                }
                for (lProp in aValeur) {
                    if (!this._hash[aValeur[lProp]]) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        };
        TypeEnsembleNombre.prototype.intersect = function(aValeur) {
            var lProp, lNombre, lHash = {};
            this._cacheItems = null;
            if (aValeur instanceof TypeEnsembleNombre) {
                for (lProp in aValeur._hash) {
                    if (this._hash[lProp]) {
                        lHash[lProp] = true;
                    }
                }
                this._hash = lHash;
            } else if (MethodesObjet.isArray(aValeur)) {
                for (lProp in aValeur) {
                    lNombre = aValeur[lProp];
                    if (this._hash[lNombre]) {
                        lHash[lNombre] = true;
                    }
                }
                this._hash = lHash;
            } else {}
            return this;
        };
        TypeEnsembleNombre.prototype.get = function(aIndex) {
            var lItems = this.items();
            if (aIndex < 0 || aIndex > lItems.length || !MethodesObjet.isNumber(aIndex)) {
                return null;
            }
            return lItems[aIndex];
        };
        TypeEnsembleNombre.prototype.indexOf = function(aValeur) {
            if (this._hash[aValeur] === undefined) {
                return -1;
            }
            return MethodesTableau.binaryIndexOf(this.items(), aValeur);
        };
        TypeEnsembleNombre.prototype.items = function() {
            if (!this._cacheItems) {
                this._cacheItems = [];
                var lProp;
                for (lProp in this._hash) {
                    this._cacheItems.push(parseInt(lProp, 10));
                }
                this._cacheItems.sort(_sort);
            }
            return this._cacheItems;
        };
        TypeEnsembleNombre.prototype.count = function() {
            if (this._cacheItems) {
                return this._cacheItems.length;
            }
            return Object.keys(this._hash).length;
        };
        TypeEnsembleNombre.prototype.each = function(aMethode, thisArg) {
            var lItems = this.items(),
                i, lNb = lItems.length;
            for (i = 0; i < lNb; i++) {
                aMethode.call(thisArg, lItems[i], i);
            }
            return this;
        };
        TypeEnsembleNombre.prototype.dupliquer = function() {
            var lEnsemble = new TypeEnsembleNombre(),
                i;
            for (i in this._hash) {
                lEnsemble._hash[i] = true;
            }
            return lEnsemble;
        };
        TypeEnsembleNombre.prototype.toString = function() {
            var lResult = '',
                lIx, lNbDeSuite = 0,
                lValeur, lItems = this.items();
            for (lIx = 1; lIx <= lItems.length; lIx++) {
                lValeur = lItems[lIx];
                if ((lItems.length > lIx) && (lValeur === lItems[lIx - 1] + 1)) {
                    lNbDeSuite++;
                } else {
                    if (lResult.length > 0) {
                        lResult += ',';
                    }
                    if (lNbDeSuite > 0) {
                        lResult += lItems[lIx - 1 - lNbDeSuite] + '..';
                    }
                    lResult += lItems[lIx - 1];
                    lNbDeSuite = 0;
                }
            }
            return '[' + lResult + ']';
        };
        TypeEnsembleNombre.prototype.fromString = function(aChaine) {
            if (!aChaine || !aChaine.length || aChaine.length < 2) {
                return this;
            }
            aChaine = aChaine.substring(1, aChaine.length - 1);
            var T1 = aChaine.split(','),
                I, J, T2, V1, V2;
            for (I = 0; I < T1.length; I++) {
                T2 = T1[I].split('..');
                V1 = parseInt(T2[0], 10);
                V2 = parseInt(T2.length === 1 ? V1 : T2[1], 10);
                for (J = V1; J <= V2; J++) {
                    this._hash[J] = true;
                }
            }
            return this;
        };
        TypeEnsembleNombre.prototype.toJSON = function() {
            var lJSON = {};
            lJSON[TypeChampsJSON.type] = TypeHttpVariable.TypeHttpEnsembleNombre;
            lJSON[TypeChampsJSON.valeur] = this.toString();
            return lJSON;
        };

        function _sort(a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
        }
        module.exports = TypeEnsembleNombre;
    },
    fn: "typeensemblenombre.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJQuery.js');
        var MethodesObjet = require('MethodesObjet.js');
        var TypeChampsJSON = require('Enumere_ChampsJSON.js');
        var ObjetElement = require('ObjetElement.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var TypeHttpVariable = require('TypeHttpVariable.js').TypeHttpVariable;
        var TypeDomaine = require('TypeDomaine.js');
        var TypeArrondi = require('TypeArrondi.js');
        var TypeEnsembleNombre = require('TypeEnsembleNombre.js');
        var GChaine = require('_ObjetChaine.js').GChaine;
        var TypeNote = require('TypeNote.js');
        var ObjetJSON = {};
        ObjetJSON.parse = function(data, aParametres) {
            var lParametres = Object.assign({
                ignorerEntites: false,
                JSONCollection: null
            }, aParametres);
            var lJSON = ObjetJSON.parseJSON(data);
            return ObjetJSON.parseVariables(lJSON, lParametres);
        };
        ObjetJSON.parseJSON = function(data) {
            var lJSON;
            try {
                lJSON = JSON.parse(data);
            } catch (e) {
                lJSON = '';
            }
            return lJSON;
        };
        ObjetJSON.parseVariables = function(aJSON, aParametres) {
            var lJSON;
            var lParametres = Object.assign({
                ignorerEntites: false,
                JSONCollection: null
            }, aParametres);
            try {
                lJSON = _parseVariables(aJSON, lParametres);
            } catch (e) {
                lJSON = {};
            }
            return lJSON;
        };
        ObjetJSON.toJSON = function(aObjet, aParametres) {
            var lJSON;
            try {
                if (aParametres && aParametres.ignorerEntites && !aParametres.JSONCollection) {
                    lJSON = aObjet;
                } else {
                    lJSON = ObjetJSON.preparerJSON(aObjet, aParametres);
                }
                lJSON = JSON.stringify(lJSON);
            } catch (e) {}
            return lJSON;
        };
        ObjetJSON.preparerJSON = function(aObjet, aParametres) {
            var lJSON, lChaine;
            lChaine = JSON.stringify(aObjet);
            lJSON = JSON.parse(lChaine);
            if (aParametres && aParametres.ignorerEntites && !aParametres.JSONCollection) {
                return lJSON;
            }
            lJSON = _toJSON(lJSON, {
                ignorerEntites: !!(aParametres && aParametres.ignorerEntites),
                JSONCollection: aParametres && aParametres.JSONCollection ? aParametres.JSONCollection : null
            });
            return lJSON;
        };

        function _parseElement(aJSON, aParametres) {
            var lElement = new ObjetElement().fromJSON(aJSON),
                lValeur, lProp;
            if (aJSON) {
                if (lElement.Libelle) {
                    lElement.Libelle = aParametres.ignorerEntites ? lElement.Libelle : GChaine.ajouterEntites(lElement.Libelle);
                }
                for (lProp in aJSON) {
                    if (lProp !== ObjetElement.const_JSON.libelle.JSON && lProp !== ObjetElement.const_JSON.numero.JSON && lProp !== ObjetElement.const_JSON.genre.JSON && lProp !== ObjetElement.const_JSON.position.JSON && lProp !== ObjetElement.const_JSON.actif.JSON) {
                        lValeur = aJSON[lProp];
                        if (!_parseVariablesDeSource(lElement, lProp, lValeur, aParametres)) {
                            lElement[lProp] = lValeur;
                        }
                    }
                }
            }
            return lElement;
        }

        function _strToNote(aNote) {
            if (!TypeNote) {
                return null;
            }
            if (MethodesObjet.isArray(aNote)) {
                var T = [],
                    i;
                for (i in aNote) {
                    T[i] = new TypeNote(aNote[i]);
                }
                return T;
            }
            return new TypeNote(aNote);
        }

        function _parseVariable(aJSON, aParametres) {
            if (!aJSON) {
                return null;
            }
            var lType = aJSON[TypeChampsJSON.type],
                lValeur = aJSON[TypeChampsJSON.valeur],
                i, lNb;
            switch (lType) {
                case TypeHttpVariable.TypeHttpElement:
                    if (MethodesObjet.isArray(lValeur)) {
                        var lListeElements = new ObjetListeElements();
                        if (lValeur && lValeur.length) {
                            for (i = 0, lNb = lValeur.length; i < lNb; i++) {
                                var lElement = _parseElement(lValeur[i], aParametres);
                                lListeElements.AddElement(lElement);
                            }
                        }
                        return lListeElements;
                    }
                    return _parseElement(lValeur, aParametres);
                case TypeHttpVariable.TypeHttpFichierBase64:
                    if (aParametres && aParametres.JSONCollection && aParametres.JSONCollection.fichiers && aParametres.JSONCollection.fichiers) {
                        var lFichierBase64 = aParametres.JSONCollection.fichiers[lValeur];
                        aParametres.JSONCollection.fichiers[lValeur] = null;
                        return lFichierBase64;
                    };
                    return '';
                case TypeHttpVariable.TypeHttpCardinal:
                    return GChaine.StrToCardinal(lValeur);
                case TypeHttpVariable.TypeHttpBoolean:
                    return GChaine.StrToBoolean(lValeur);
                case TypeHttpVariable.TypeHttpString:
                    return GChaine.ajouterEntites(lValeur);
                case TypeHttpVariable.TypeHttpColor:
                    return lValeur;
                case TypeHttpVariable.TypeHttpDateTime:
                    return GChaine.StrToDate(lValeur);
                case TypeHttpVariable.TypeHttpNote:
                    return _strToNote(lValeur);
                case TypeHttpVariable.TypeHttpTraduction:
                    return lValeur;
                case TypeHttpVariable.TypeHttpIP:
                    return GChaine.strToIp(lValeur);
                case TypeHttpVariable.TypeHttpInteger:
                    return GChaine.strToInteger(lValeur);
                case TypeHttpVariable.TypeHttpDouble:
                    return GChaine.strToDouble(lValeur);
                case TypeHttpVariable.TypeHttpDomaine:
                case TypeHttpVariable.TypeHttpEnsemble:
                    return new TypeDomaine(lValeur);
                case TypeHttpVariable.TypeHttpEnsembleCardinal:
                    return new TypeDomaine(lValeur, TypeDomaine.CTailleOuverte);
                case TypeHttpVariable.TypeHttpArrondi:
                    return new TypeArrondi(lValeur);
                case TypeHttpVariable.TypeHttpHtml:
                    var lDiv = document.createElement('div');
                    lDiv.insertAdjacentHTML('afterbegin', lValeur);
                    return lDiv.innerHTML;
                case TypeHttpVariable.TypeHttpEnsembleNombre:
                    return new TypeEnsembleNombre().fromString(lValeur);
                default:
                    return lValeur;
            }
        }

        function _estVariable(aJSON) {
            if (aJSON && aJSON[TypeChampsJSON.type] && aJSON[TypeChampsJSON.valeur] !== undefined && aJSON[TypeChampsJSON.type] >= 0) {
                var lKeys = Object.keys(aJSON);
                if (lKeys.length === 2 && ((lKeys[0] === TypeChampsJSON.type && lKeys[1] === TypeChampsJSON.valeur) || (lKeys[1] === TypeChampsJSON.type && lKeys[0] === TypeChampsJSON.valeur))) {
                    return true;
                }
                return false;
            }
            return false;
        }

        function _estObjet(aValeur) {
            return aValeur && !aValeur.trim && typeof aValeur === 'object';
        }

        function _parseVariablesDeSource(aObjetResultat, aNomProprieteSource, aValeurSource, aParametres) {
            var lEstVariable, lResult = true;
            if (MethodesObjet.isString(aValeurSource)) {
                aObjetResultat[aNomProprieteSource] = aParametres.ignorerEntites ? aValeurSource : GChaine.ajouterEntites(aValeurSource);
            } else if (_estObjet(aValeurSource)) {
                lEstVariable = false;
                if (!aValeurSource.pop) {
                    lEstVariable = _estVariable(aValeurSource);
                }
                aObjetResultat[aNomProprieteSource] = lEstVariable ? _parseVariable(aValeurSource, aParametres) : _parseVariables(aValeurSource, aParametres);
            } else {
                lResult = false;
            }
            return lResult;
        }

        function _parseVariables(aJSON, aParametres) {
            if (!aJSON) {
                return aJSON;
            }
            var i;
            for (i in aJSON) {
                _parseVariablesDeSource(aJSON, i, aJSON[i], aParametres);
            }
            return aJSON;
        }

        function _preparerVariableToJSON(aJSON, aParametres) {
            if (!aJSON) {
                return aJSON;
            }
            var lType = aJSON[TypeChampsJSON.type];
            switch (lType) {
                case TypeHttpVariable.TypeHttpFichierBase64:
                    if (aParametres && aParametres.JSONCollection) {
                        if (!aParametres.JSONCollection.fichiers) {
                            aParametres.JSONCollection.fichiers = [];
                        }
                        aParametres.JSONCollection.fichiers.push(aJSON[TypeChampsJSON.valeur]);
                        aJSON[TypeChampsJSON.valeur] = aParametres.JSONCollection.fichiers.length - 1;
                        return aJSON;
                    };
                    return aJSON;
                default:
                    return aJSON;
            }
        }

        function _toJSON(aJSON, aParametres) {
            if (!aJSON) {
                return aJSON;
            }
            var i, lValeur;
            for (i in aJSON) {
                lValeur = aJSON[i];
                if (lValeur) {
                    if (!!lValeur.trim && !!lValeur.toLowerCase) {
                        if (!aParametres.ignorerEntites) {
                            aJSON[i] = GChaine.enleverEntites(lValeur);
                        }
                    } else if (_estVariable(lValeur)) {
                        aJSON[i] = _preparerVariableToJSON(lValeur, aParametres);
                    } else if (lValeur !== true && !lValeur.MAX_VALUE && !lValeur.getDate && typeof lValeur === 'object') {
                        aJSON[i] = _toJSON(lValeur, aParametres);
                    }
                }
            }
            return aJSON;
        }
        module.exports = ObjetJSON;
    },
    fn: "objetjson.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJQuery.js');
        require('divers.js');
        require('jInputDisabled.js');
        require('jInputChecked.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');
        var ObjetJSON = require('ObjetJSON.js');
        var GChaine = require('_ObjetChaine.js').GChaine;
        var ToucheClavier = require('ToucheClavier.js');
        var Support = require('ObjetSupport.js');
        var IEHtml = (function() {
            var uBalises = {},
                uAttributs = {},
                lNodeNames = [],
                lGUIDControleur1 = 1,
                lGUIDControleur2 = 1,
                lGUIDCollectionIdentite = 1,
                C_id_event_iemodel = 'ie-model_verification',
                C_RegExp_Match = /^\/(.*)\/([gim]*)$/,
                lOutils, uInvocateur = new ObjetInvocateur();
            var uTailleMaxTelephone = null;

            function _$refreshSelf_controleur(aForcerSynchrone) {
                if (this.instance && this.instance.isDestroyed && this.instance.isDestroyed()) {
                    this.$promRefreshSelf = null;
                    return Promise.resolve();
                }
                if (this.$asyncPromise !== false && !aForcerSynchrone) {
                    if (this.$promRefreshSelf && !this.$promRefreshSelf._isFullfilled) {
                        return this.$promRefreshSelf;
                    }
                    this.$promRefreshSelf = new Promise(function(aResolve) {
                        setTimeout(function() {
                            this.$promRefreshSelf._isFullfilled = true;
                            this.$promRefreshSelf = null;
                            aResolve(this.$invocateur.evenement(C_id_event_iemodel));
                        }.bind(this), 0);
                    }.bind(this));
                    return this.$promRefreshSelf;
                }
                this.$invocateur.evenement(C_id_event_iemodel);
                return Promise.resolve();
            }

            function _$refresh_controleur(aHashCibles, aForcerSynchrone) {
                if (this.$asyncPromise !== false && !aForcerSynchrone) {
                    if (this.$promRefresh && !this.$promRefresh._isFullfilled) {
                        return this.$promRefresh;
                    }
                    this.$promRefresh = new Promise(function(aResolve) {
                        setTimeout(function() {
                            this.$promRefresh._isFullfilled = true;
                            this.$promRefresh = null;
                            aResolve(uInvocateur.evenement(C_id_event_iemodel, this.$GUID, aHashCibles));
                        }.bind(this), 0);
                    }.bind(this));
                    return this.$promRefresh;
                }
                uInvocateur.evenement(C_id_event_iemodel, this.$GUID, aHashCibles);
                return Promise.resolve();
            }

            function _initControleur(aControleur) {
                if (!aControleur.$GUID) {
                    aControleur.$GUID = lGUIDControleur1 + '_' + lGUIDControleur2;
                    if (lGUIDControleur1 === Number.MAX_VALUE) {
                        lGUIDControleur1 = 1;
                        lGUIDControleur2 += 1;
                    } else {
                        lGUIDControleur1 += 1;
                    }
                }
                if (!aControleur.$refreshSelf) {
                    aControleur.$refreshSelf = _$refreshSelf_controleur;
                }
                if (!aControleur.$refresh) {
                    aControleur.$refresh = _$refresh_controleur;
                }
                if (!aControleur.$invocateur) {
                    aControleur.$invocateur = new ObjetInvocateur();
                }
                return aControleur;
            }

            function _transfererFragmentDansHTML(aNodesFragment, aParent, aInsererAvantLeNode) {
                var lTab = _sliceNodes(aNodesFragment);
                while (aNodesFragment && aNodesFragment.firstChild) {
                    aNodesFragment.removeChild(aNodesFragment.firstChild);
                }
                for (var i = 0; i < lTab.length; i++) {
                    if (aInsererAvantLeNode) {
                        aParent.insertBefore(lTab[i], aInsererAvantLeNode);
                    } else {
                        aParent.appendChild(lTab[i]);
                    }
                }
                var lNode = lTab[0];
                if (_estNoeudCommentaire(lNode) && lTab[1]) {
                    lNode = lTab[1];
                }
                return lNode;
            }

            function _sliceNodes(aNodes) {
                var lResult = [],
                    i;
                for (i = 0; i < aNodes.length; i++) {
                    lResult.push(aNodes[i]);
                }
                return lResult;
            }

            function _preInjectionHTML(aElementParent, aIgnorerScroll) {
                var lResult = {
                    elementParent: aElementParent,
                    parentDocument: false,
                    initOverflowParent: false
                };
                var lElement = aElementParent,
                    lParent;
                while (!lResult.parentDocument && lElement) {
                    lParent = null;
                    if (lElement.nodeType === 1) {
                        if (lElement.parentElement) {
                            lParent = lElement.parentElement;
                        } else if (lElement.parentNode) {
                            lParent = lElement.parentNode;
                        }
                    }
                    lElement = lParent;
                    lResult.parentDocument = lElement === document;
                }
                if (lResult.parentDocument && aIgnorerScroll !== true) {
                    var lOverflow = $(aElementParent).css('overflow');
                    lResult.initOverflowParent = lOverflow === 'auto' || lOverflow === 'scroll';
                    lOverflow = null;
                }
                return lResult;
            }

            function _finaliserInjectionHTML(aPreInjectionHtml, aContexte) {
                if (aPreInjectionHtml.parentDocument) {
                    if (aPreInjectionHtml.initOverflowParent && aPreInjectionHtml.elementParent) {
                        aPreInjectionHtml.elementParent.scrollLeft = 0;
                        aPreInjectionHtml.elementParent.scrollTop = 0;
                    }
                    if (aContexte && aContexte.eventsInjectionHtml && aContexte.eventsInjectionHtml.length > 0) {
                        var lMeasures = [];
                        var lMutates = [];
                        var lMeasureMutate = {
                            addMeasure: function(aMethode) {
                                lMeasures.push(aMethode);
                            },
                            addMutate: function(aMethode) {
                                lMutates.push(aMethode);
                            }
                        };
                        var lExec = function() {
                            lMeasures.forEach(function(aMethode) {
                                if (aMethode) {
                                    aMethode();
                                }
                            });
                            lMutates.forEach(function(aMethode) {
                                if (aMethode) {
                                    aMethode();
                                }
                            });
                        };
                        aContexte.eventsInjectionHtml.forEach(function(aElement) {
                            if (aElement && !aElement.after && aElement.methode) {
                                aElement.methode(lMeasureMutate);
                            }
                        });
                        lExec();
                        lMeasures = [];
                        lMutates = [];
                        aContexte.eventsInjectionHtml.forEach(function(aElement) {
                            if (aElement && aElement.after && aElement.methode) {
                                aElement.methode(lMeasureMutate);
                            }
                        });
                        lExec();
                        delete aContexte.eventsInjectionHtml;
                    }
                }
            }

            function _findFirstChild(aNode, aNiveau) {
                var lNode = aNode,
                    lNiveau = aNiveau;
                while (lNode && lNiveau > 0) {
                    lNode = lNode.firstChild;
                    lNiveau -= 1;
                }
                return lNode;
            }

            function _getPremiereBalise(aChaine) {
                if (!aChaine || !aChaine.search) {
                    return '';
                }
                var lPosDebut = aChaine.search('<');
                if (lPosDebut < 0) {
                    return '';
                }
                lPosDebut += 1;
                var lChaine = aChaine.slice(lPosDebut),
                    lPosFinSup = lChaine.search('>'),
                    lPosFinEsp = lChaine.search(' ');
                if (lPosFinSup < 0 && lPosFinEsp < 0) {
                    return '';
                }
                if (lPosFinSup < 0) {
                    lPosFinSup = lChaine.length;
                }
                if (lPosFinEsp < 0) {
                    lPosFinEsp = lChaine.length;
                }
                return aChaine.slice(lPosDebut, lPosDebut + Math.min(lPosFinSup, lPosFinEsp)).toLowerCase();
            }

            function _createSafeFragment(document) {
                var list = [].concat(lNodeNames),
                    safeFrag = document.createDocumentFragment();
                if (safeFrag.createElement) {
                    while (list.length) {
                        safeFrag.createElement(list.pop());
                    }
                }
                return safeFrag;
            }

            function _injectEtCompilNode(aParametres) {
                var lSafe = _createSafeFragment(document),
                    lNodeParent, lNiveauFirstChild;
                lNodeParent = lSafe.appendChild(document.createElement('div'));
                if (aParametres.html && aParametres.html.nodeType > 0) {
                    switch (aParametres.html.nodeName.toLowerCase()) {
                        case 'td':
                            lNodeParent.appendChild(document.createElement('table'));
                            lNodeParent.firstChild.appendChild(document.createElement('tbody'));
                            lNodeParent.firstChild.firstChild.appendChild(document.createElement('tr'));
                            lNodeParent = lNodeParent.firstChild.firstChild.firstChild;
                            break;
                        case 'tr':
                            lNodeParent.appendChild(document.createElement('table'));
                            lNodeParent = lNodeParent.firstChild;
                            lNodeParent.appendChild(document.createElement('tbody'));
                            lNodeParent = lNodeParent.firstChild;
                            break;
                        case 'ul':
                            lNodeParent.appendChild(document.createElement('ul'));
                            lNodeParent = lNodeParent.firstChild;
                            break;
                        default:
                            lNodeParent.appendChild(document.createElement('div'));
                            lNodeParent = lNodeParent.firstChild;
                    }
                    lNodeParent.appendChild(aParametres.html);
                } else {
                    lNiveauFirstChild = 1;
                    switch (_getPremiereBalise(aParametres.html)) {
                        case 'td':
                            lNodeParent.insertAdjacentHTML('beforeend', '<table><tbody><tr>' + aParametres.html + '</tr></tbody></table>');
                            lNiveauFirstChild = 3;
                            break;
                        case 'tr':
                            lNodeParent.insertAdjacentHTML('beforeend', '<table><tbody>' + aParametres.html + '</tbody></table>');
                            lNiveauFirstChild = 2;
                            break;
                        case 'li':
                            lNodeParent.insertAdjacentHTML('beforeend', '<ul>' + aParametres.html + '</ul>');
                            break;
                        default:
                            lNodeParent.insertAdjacentHTML('beforeend', '<div>' + aParametres.html + '</div>');
                    }
                    lNodeParent = _findFirstChild(lNodeParent, lNiveauFirstChild);
                }
                if (!aParametres.contexte) {
                    aParametres.contexte = {};
                }
                aParametres.childNodes = lNodeParent.childNodes;
                _compile(aParametres.childNodes, aParametres.element, aParametres.controleur, aParametres.contexte, aParametres.invocateur, 0);
                lNodeParent = null;
                lSafe = null;
            }

            function _injectHTML(aParametres) {
                var lNode = null;
                if (aParametres.controleur) {
                    _initControleur(aParametres.controleur);
                }
                if (!aParametres.element || aParametres.element.nodeType === undefined) {
                    return null;
                }
                var lPreInjectionHtml = _preInjectionHTML(aParametres.element, aParametres.ignorerScroll);
                _injectEtCompilNode(aParametres);
                lNode = _transfererFragmentDansHTML(aParametres.childNodes, aParametres.element, aParametres.insererAvantLeNode);
                aParametres.childNodes = null;
                _finaliserInjectionHTML(lPreInjectionHtml, aParametres.contexte);
                return lNode;
            }

            function _hasAttribute(aNode, aNomAttribute) {
                if (aNode.hasAttribute) {
                    return aNode.hasAttribute(aNomAttribute);
                } else {
                    var lNode = aNode.getAttributeNode(aNomAttribute);
                    return !!(lNode && (lNode.specified || lNode.nodeValue));
                }
            }

            function _remplirDataModel(aContexteCourant) {
                var lModele = aContexteCourant.node.getAttribute('ie-model');
                if (!lModele) {
                    return null;
                }
                var lModeleArg = _parseValueEvent(lModele, aContexteCourant.contexte);
                if (lModeleArg && lModeleArg.nom) {
                    aContexteCourant.data.$modeleParsed = lModeleArg;
                    aContexteCourant.data.$modeleValue = lModele;
                }
                return true;
            }

            function _getModel(aContexteCourant) {
                var lAvecModele = _remplirDataModel(aContexteCourant);
                var lModele = aContexteCourant.data.$modeleValue;
                if (!lModele) {
                    return null;
                }
                if (lAvecModele) {
                    aContexteCourant.node.removeAttribute('ie-model');
                    if (!aContexteCourant.ignorerCommentaires) {
                        lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-model="' + lModele + '"');
                    }
                }
                return lModele;
            }

            function _getControleSaisieEvent(aContexteCourant) {
                if (!_hasAttribute(aContexteCourant.node, 'ie-controlesaisie')) {
                    return false;
                }
                aContexteCourant.$controleSaisie = !!ControleSaisieEvenement;
                aContexteCourant.node.removeAttribute('ie-controlesaisie');
                lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-controleSaisie');
                return true;
            }

            function _creerInstanceIdentite(aClass, aParametresIdentite) {
                var lGUID = lGUIDCollectionIdentite;
                lGUIDCollectionIdentite += 1;
                aParametresIdentite.nomComplet = 'IEHtml.collectionIdentite[' + lGUID + ']';
                var lInstance = new aClass(aParametresIdentite);
                IEHtml.collectionIdentite[lGUID] = lInstance;
                return {
                    instance: lInstance,
                    callbackDestruction: function() {
                        delete IEHtml.collectionIdentite[lGUID];
                    }
                };
            }

            function _callbackRefresh(aControleur, aData, aCallback, aGuidEmetteur, aHashGuidCible) {
                if (aHashGuidCible && aControleur && !aHashGuidCible[aControleur.$GUID]) {
                    return;
                }
                if (aControleur && aControleur.$off && aControleur.$off()) {
                    return;
                }
                aCallback(aGuidEmetteur, aHashGuidCible);
            }

            function _abonnerRefresh(aCallback, aElementPourDestruction, aContexteCourant, aCallbackDestroy, aMutationObserverNoeudDetruit) {
                var lCallbacks = [],
                    lAjouterAbonnement = true,
                    lId, lIdSelf;
                if (!aElementPourDestruction) {
                    return;
                }
                if (aContexteCourant.data) {
                    if (!aContexteCourant.data.$callbacksRefresh) {
                        aContexteCourant.data.$callbacksRefresh = [];
                    } else {
                        lAjouterAbonnement = false;
                    }
                    lCallbacks = aContexteCourant.data.$callbacksRefresh;
                }
                lCallbacks.push(function() {
                    _callbackRefresh.call(this, aContexteCourant.controleur, aContexteCourant.data, aCallback);
                });
                if (lAjouterAbonnement) {
                    var lInvocateur = aContexteCourant.invocateur ? aContexteCourant.invocateur : uInvocateur;
                    lId = lInvocateur.abonner(C_id_event_iemodel, function(aGuidEmetteur, aHashGuidCible) {
                        if (aContexteCourant.controleur && aContexteCourant.controleur.instance && aContexteCourant.controleur.instance.isDestroyed && aContexteCourant.controleur.instance.isDestroyed()) {
                            return;
                        }
                        var i, lNb = lCallbacks.length;
                        for (i = 0; i < lNb; i++) {
                            lCallbacks[i](aGuidEmetteur, aHashGuidCible);
                        }
                    }, null, false);
                    if (!aContexteCourant.invocateur) {
                        lIdSelf = aContexteCourant.controleur.$invocateur.abonner(C_id_event_iemodel, function() {
                            if (aContexteCourant.controleur && aContexteCourant.controleur.instance && aContexteCourant.controleur.instance.isDestroyed && aContexteCourant.controleur.instance.isDestroyed()) {
                                return;
                            }
                            var i, lNb = lCallbacks.length;
                            for (i = 0; i < lNb; i++) {
                                lCallbacks[i]();
                            }
                        }, null, false);
                    }
                    var lDejaDetruit = false,
                        lObserver = null;
                    var lDestroy = function() {
                        if (lDejaDetruit) {
                            return;
                        }
                        lInvocateur.desabonner([lId]);
                        if (!aContexteCourant.invocateur) {
                            aContexteCourant.controleur.$invocateur.desabonner([lIdSelf]);
                        }
                        if (aContexteCourant.data) {
                            aContexteCourant.data.$destroy = true;
                        }
                        if (lObserver && lObserver.disconnect) {
                            lObserver.disconnect();
                            lObserver = null;
                        }
                        if (aCallbackDestroy) {
                            aCallbackDestroy();
                        }
                        lDejaDetruit = true;
                    };
                    $(aElementPourDestruction).on('destroyed', lDestroy);
                    if (aMutationObserverNoeudDetruit) {
                        var lMutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
                        if (lMutationObserver) {
                            lObserver = new lMutationObserver(function(mutations) {
                                MethodesTableau.parcourir(mutations, function(mutation) {
                                    if (!lDejaDetruit && mutation.type === 'childList') {
                                        try {
                                            if (aMutationObserverNoeudDetruit()) {
                                                lDestroy();
                                                return false;
                                            }
                                        } catch (e) {}
                                    }
                                });
                            });
                        }
                        if (lObserver) {
                            lObserver.observe(aElementPourDestruction, {
                                childList: true
                            });
                        }
                    }
                }
            }

            function _getAccesParametres(aNomEnChaine, aContexteCourant, aAccepteErreur, aIgnorerNomOrigine) {
                var lParsed = null,
                    lResult = {
                        valide: false,
                        estFonction: false,
                        nom: aNomEnChaine,
                        args: []
                    };
                if (aNomEnChaine) {
                    lParsed = _parseValueEvent(aNomEnChaine, aContexteCourant.contexte, aAccepteErreur);
                    if (lParsed) {
                        aNomEnChaine = lParsed.nom;
                    }
                }
                var lNomEnChaineOrigine = aNomEnChaine;
                if (aNomEnChaine && (!aContexteCourant.data || !aContexteCourant.data.$modeleParsed)) {
                    if (!lParsed) {
                        return lResult;
                    }
                }
                var lAncreControleur = aContexteCourant.controleur;
                var lTab;
                var lNom;
                var lTabRempli;
                if (aContexteCourant.data && aContexteCourant.data.$modeleParsed) {
                    if (!lParsed || !lParsed.args || lParsed.args.length === 0) {
                        lParsed = aContexteCourant.data.$modeleParsed;
                    } else {
                        lParsed.nom = aContexteCourant.data.$modeleParsed.nom;
                    }
                    if (aContexteCourant.data.$modeleParsed.nom) {
                        aNomEnChaine = lParsed.nom + (aNomEnChaine ? '.' + aNomEnChaine : '');
                    }
                }
                var lArgs = lResult.args = lParsed ? lParsed.args : [];
                if (!aContexteCourant.controleur || !aNomEnChaine) {
                    return lResult;
                }
                lTab = aNomEnChaine.split('.');
                lNom = lTab.pop();
                lAncreControleur = MethodesObjet.get(aContexteCourant.controleur, lTab);
                var lEstFonction = lAncreControleur && lAncreControleur[lNom] !== undefined && MethodesObjet.isFunction(lAncreControleur[lNom]);
                if (!lEstFonction && aContexteCourant.data && aContexteCourant.data.$modeleParsed && !aIgnorerNomOrigine) {
                    var lTabHorsModele = lNomEnChaineOrigine.split('.');
                    var lNomHorsModel = lTabHorsModele.pop();
                    var lAncreControleurHorsModele = MethodesObjet.get(aContexteCourant.controleur, lTabHorsModele);
                    if (lAncreControleurHorsModele && lAncreControleurHorsModele[lNom] !== undefined && MethodesObjet.isFunction(lAncreControleurHorsModele[lNomHorsModel])) {
                        lEstFonction = true;
                        lAncreControleur = lAncreControleurHorsModele;
                        lTab = lTabHorsModele;
                        lNom = lNomHorsModel;
                    }
                }
                lTabRempli = lTab.length > 0;
                if (lEstFonction) {
                    var lArgsCallback = lArgs || [],
                        lIx, lAvecArgsBoucleREPEAT = false,
                        lArray;
                    for (lIx = 0; lIx < lArgsCallback.length; lIx++) {
                        if (lArgsCallback[lIx] && lArgsCallback[lIx].getterArray) {
                            lAvecArgsBoucleREPEAT = true;
                            break;
                        }
                    }
                    lResult.valide = true;
                    lResult.controleur = aContexteCourant.controleur;
                    lResult.getAncre = function() {
                        return lTabRempli ? MethodesObjet.get(aContexteCourant.controleur, lTab) : aContexteCourant.controleur;
                    };
                    lResult.callback = function(aTabArguments) {
                        var lAncre = lTabRempli ? MethodesObjet.get(aContexteCourant.controleur, lTab) : aContexteCourant.controleur;
                        if (!lAncre || !lAncre[lNom] || !lAncre[lNom].apply) {
                            return '';
                        }
                        var lArgs = lArgsCallback,
                            lArgCallback;
                        if (lAvecArgsBoucleREPEAT) {
                            lArgs = new Array(lArgsCallback.length);
                            for (var lIx = 0, lLength = lArgsCallback.length; lIx < lLength; lIx++) {
                                lArgCallback = lArgsCallback[lIx];
                                if (lArgCallback && lArgCallback.getterArray) {
                                    lArray = lArgCallback.getterArray();
                                    lArgs[lIx] = {
                                        indice: lArgCallback.indice,
                                        element: lArray[lArgCallback.indice],
                                        tableau: lArray,
                                        arguments: lArgCallback.arguments
                                    };
                                } else {
                                    lArgs[lIx] = lArgsCallback[lIx];
                                }
                            }
                        }
                        try {
                            return lAncre[lNom].apply(aContexteCourant, aTabArguments && aTabArguments.length > 0 ? lArgs.concat(aTabArguments) : lArgs);
                        } catch (e) {}
                    };
                    lResult.estFonction = true;
                    lResult.nom = lNom;
                    return lResult;
                }
                lResult.valide = !!MethodesObjet.get(aContexteCourant.controleur.instance, lTab);
                lResult.getAncre = function() {
                    return lTabRempli ? MethodesObjet.get(aContexteCourant.controleur.instance, lTab) : aContexteCourant.controleur.instance;
                };
                lResult.getAncreControleur = lAncreControleur && lAncreControleur[lNom] !== undefined ? function() {
                    return lTabRempli ? MethodesObjet.get(aContexteCourant.controleur, lTab) : aContexteCourant.controleur;
                } : null;
                lResult.callback = function() {
                    var lAncre = lTabRempli ? MethodesObjet.get(aContexteCourant.controleur.instance, lTab) : aContexteCourant.controleur.instance;
                    if (!lAncre) {
                        return '';
                    }
                    return lAncre[lNom];
                };
                lResult.estFonction = false;
                lResult.nom = lNom;
                return lResult;
            }

            function _getAccesParametresModel(aNomEnChaine, aContexteCourant, aAccepteErreur) {
                return _getAccesParametres(aNomEnChaine, aContexteCourant, aAccepteErreur, true);
            }

            function _addCommentaireDebug(aNode, aCommentaire) {}

            function _estNoeudCommentaire(aNode) {
                return !!aNode && aNode.nodeType === 8;
            }

            function _getContexteCourant(aControleur, aContexte, aNode, aData, aInvocateur) {
                return {
                    controleur: aControleur,
                    instance: aControleur ? aControleur.instance : null,
                    contexte: aContexte,
                    data: aData,
                    node: aNode,
                    invocateur: aInvocateur
                };
            }

            function _getAttributesDeNode(aNode) {
                return _sliceNodes(aNode.attributes);
            }

            function _getMapDeNode(aNode) {
                var lMap = {},
                    lName;
                for (var attr, nAttrs = _getAttributesDeNode(aNode), j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                    attr = nAttrs[j];
                    if (attr.name) {
                        lName = attr.name.toLowerCase();
                        lMap[lName] = attr.value;
                    }
                }
                return lMap;
            }

            function _copyAttributs(aNodeSource, aNodeCible, aCallback) {
                var lMap = _getMapDeNode(aNodeSource);
                var llName;
                var lJCible = $(aNodeCible);
                for (llName in lMap) {
                    try {
                        if (!aCallback || aCallback(llName, lMap[llName], lMap) !== false) {
                            lJCible.attr(llName, lMap[llName]);
                        }
                    } catch (e) {}
                }
                return lMap;
            }
            lOutils = {
                parseValueEvent: _parseValueEvent,
                getModel: _getModel,
                creerInstanceIdentite: _creerInstanceIdentite,
                abonnerRefresh: _abonnerRefresh,
                getAccesParametres: _getAccesParametres,
                getAccesParametresModel: _getAccesParametresModel,
                hasAttribute: _hasAttribute,
                injectHTML: _injectHTML,
                getContexteCourant: _getContexteCourant,
                getControleSaisieEvent: _getControleSaisieEvent,
                getAttributesDeNode: _getAttributesDeNode,
                getMapDeNode: _getMapDeNode,
                copyAttributs: _copyAttributs,
                gererInputCB: _gererInputCB,
                gererInputText: _gererInputText,
                addCommentaireDebug: _addCommentaireDebug,
                composantsAttributs: uAttributs,
                caret: _caret,
                compile: _compile,
                surInjectionHtml: function(aContexteCourant, aMethode, aAfter) {
                    if (!aContexteCourant || !aContexteCourant.contexte) {
                        return;
                    }
                    if (!aContexteCourant.contexte.eventsInjectionHtml) {
                        aContexteCourant.contexte.eventsInjectionHtml = [];
                    }
                    if (MethodesObjet.isFunction(aMethode)) {
                        if (aAfter) {
                            aContexteCourant.contexte.eventsInjectionHtml.unshift({
                                methode: aMethode,
                                after: true
                            });
                        } else {
                            aContexteCourant.contexte.eventsInjectionHtml.push({
                                methode: aMethode,
                                after: false
                            });
                        }
                    } else {}
                },
                surNodeEtNodeAfter: function(aContexteCourant) {
                    var lInfosGetNode = this.getAccesParametres('node', aContexteCourant);
                    if (lInfosGetNode && lInfosGetNode.estFonction) {
                        this.surInjectionHtml(aContexteCourant, function() {
                            lInfosGetNode.callback(Array.prototype.slice.call(arguments));
                        });
                    }
                    var lInfosGetNodeAfter = this.getAccesParametres('nodeAfter', aContexteCourant);
                    if (lInfosGetNodeAfter && lInfosGetNodeAfter.estFonction) {
                        this.surInjectionHtml(aContexteCourant, function() {
                            lInfosGetNodeAfter.callback(Array.prototype.slice.call(arguments));
                        }, true);
                    }
                },
                replaceNode: function(aNodeAncien, aNodeNouveau) {
                    if (aNodeAncien && aNodeNouveau && aNodeAncien.parentNode && aNodeAncien.parentNode.replaceChild) {
                        $.cleanData(aNodeAncien);
                        aNodeAncien.parentNode.replaceChild(aNodeNouveau, aNodeAncien);
                    }
                }
            };

            function _parseArg(aArg, aEstChaine, aContexte) {
                if (aEstChaine) {
                    return aArg;
                }
                if (aContexte && aContexte.repeat && aContexte.repeat[aArg]) {
                    return aContexte.repeat[aArg];
                }
                if (aArg === 'null') {
                    return null;
                }
                if (aArg === 'undefined') {
                    return undefined;
                }
                if (aArg === 'true') {
                    return true;
                }
                if (aArg === 'false') {
                    return false;
                }
                var lNumber = parseInt(aArg, 10);
                if (isNaN(lNumber)) {
                    lNumber = null;
                    throw 'erreur _parseArg';
                }
                return lNumber;
            }

            function _parseValueEvent(aValue, aContexte, aSortieEnErreur) {
                if (!aValue) {
                    return null;
                }
                var lResult = {
                        nom: '',
                        args: []
                    },
                    lIPars = null,
                    lEtat = 'rech_fonction',
                    lChar, lNomFonction = '',
                    lArg = '',
                    LArgEstChaine = false,
                    lLength = aValue.length,
                    lSepDebut = '(',
                    lSepFin = ')';
                try {
                    for (lIPars = 0; lIPars < lLength; lIPars++) {
                        lChar = aValue.charAt(lIPars);
                        switch (lEtat) {
                            case 'rech_fonction':
                                if (lChar === lSepDebut || lIPars === lLength - 1) {
                                    lEtat = 'rech_param';
                                    if (lIPars === aValue.length - 1) {
                                        lNomFonction += lChar;
                                    }
                                    lResult.nom = lNomFonction.trim();
                                    if (lResult.nom.length === 0) {
                                        return null;
                                    }
                                    lArg = '';
                                } else {
                                    lNomFonction += lChar;
                                }
                                break;
                            case 'rech_param':
                                if (lChar === lSepFin) {
                                    if (lIPars < lLength - 1) {
                                        if (aValue.charAt(lIPars + 1) !== ';') {
                                            throw 'erreur fermeture fonction';
                                        }
                                    }
                                    lArg = lArg.trim();
                                    if (LArgEstChaine || lArg.length > 0 || lResult.args.length > 0) {
                                        lResult.args.push(_parseArg(lArg, LArgEstChaine, aContexte));
                                    }
                                    lEtat = 'fin';
                                    break;
                                }
                                if (lChar === ',') {
                                    lResult.args.push(_parseArg(lArg.trim(), LArgEstChaine, aContexte));
                                    lArg = '';
                                    LArgEstChaine = false;
                                } else if (lChar === '\'') {
                                    if (lArg.trim().length > 0) {}
                                    lArg = '';
                                    lEtat = 'rech_chaine';
                                } else {
                                    lArg += lChar;
                                }
                                break;
                            case 'rech_chaine':
                                if (lChar === '\'' && (aValue.charAt(lIPars + 1) === ')' || aValue.charAt(lIPars + 1) === ',')) {
                                    lEtat = 'rech_param';
                                    LArgEstChaine = true;
                                    break;
                                }
                                lArg += lChar;
                                break;
                            case 'fin':
                                if (lChar !== ';') {
                                    throw 'erreur fin fonction';
                                }
                                break;
                            default:
                                throw 'cas non géré';
                        }
                    }
                } catch (e) {
                    if (aSortieEnErreur) {
                        return null;
                    }
                }
                return lResult;
            }

            function _positionnerObjetSelonAccesseur(aChaineAccesseur, aObjet) {
                if (!aObjet) {
                    return null;
                }
                var lTab = aChaineAccesseur.split('.'),
                    lResult = aObjet,
                    i;
                for (i = 0; i < lTab.length; i++) {
                    lResult = lResult[lTab[i]];
                    if (!lResult) {
                        return null;
                    }
                }
                return lResult;
            }

            function _caret(aElement, begin, end) {
                var range;
                if (!aElement) {
                    return;
                }
                if (typeof begin === 'number') {
                    end = (typeof end === 'number') ? end : begin;
                    var lValue = aElement.value;
                    begin = Math.min(begin, lValue.length);
                    end = Math.min(end, lValue.length);
                    if (aElement.setSelectionRange) {
                        aElement.setSelectionRange(begin, end);
                    } else if (aElement.createTextRange) {
                        range = aElement.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', begin);
                        range.select();
                    }
                } else {
                    if (aElement.setSelectionRange) {
                        begin = aElement.selectionStart;
                        end = aElement.selectionEnd;
                    } else if (document.selection && document.selection.createRange) {
                        range = document.selection.createRange();
                        begin = 0 - range.duplicate().moveStart('character', -100000);
                        end = begin + range.text.length;
                    }
                    return {
                        begin: begin,
                        end: end
                    };
                }
            }

            function _verificationInputModel(aContexteCourant, aParametres, aPatternValidateRegex) {
                if (aParametres.data.$ignoreRefresh) {
                    return;
                }
                var lValue;
                if (aParametres.getterValueInit) {
                    if (aParametres.declencherExitChange) {
                        if (aParametres.getterValue) {
                            lValue = aParametres.getterValue();
                        } else {
                            return;
                        }
                    } else {
                        lValue = aParametres.getterValueInit();
                    }
                } else {
                    if (!aParametres.getterValue) {
                        return;
                    }
                    lValue = aParametres.getterValue();
                }
                var lValueInput;
                if (aParametres.saveValues.value !== lValue) {
                    if (aParametres.estCB) {
                        aParametres.eventActif = false;
                        $(aParametres.node).inputChecked(lValue);
                        aParametres.eventActif = true;
                        aParametres.saveValues.value = aParametres.saveValues.inputValue = lValue;
                    } else {
                        aParametres.eventActif = false;
                        lValueInput = lValue;
                        if (aParametres.toDisplay) {
                            lValueInput = aParametres.toDisplay(lValueInput);
                        }
                        if (aParametres.contentEditable) {
                            aParametres.node.innerHTML = lValueInput;
                        } else {
                            aParametres.node.value = lValueInput;
                        }
                        aParametres.eventActif = true;
                        if (aPatternValidateRegex) {
                            var lAncreControleur = _positionnerObjetSelonAccesseur(aParametres.data.$modeleParsed.nom, aParametres.controleur);
                            if (lAncreControleur) {
                                aContexteCourant.$patternOK = aPatternValidateRegex(lValue);
                            }
                        }
                        aParametres.saveValues.value = lValue;
                        aParametres.saveValues.inputValue = lValueInput;
                    }
                } else {
                    if (aParametres.estCB &&
                        aContexteCourant.data &&
                        aContexteCourant.data.estRadioBouton &&
                        lValue !== $(aContexteCourant.node).is(':checked')) {
                        $(aParametres.node).inputChecked(lValue);
                    }
                    if (aParametres.toDisplay) {
                        lValueInput = aParametres.toDisplay(lValue);
                        if (aParametres.saveValues.inputValue !== lValueInput) {
                            aParametres.eventActif = false;
                            if (aParametres.contentEditable) {
                                aParametres.node.innerHTML = lValueInput;
                            } else {
                                aParametres.node.value = lValueInput;
                            }
                            aParametres.eventActif = true;
                        }
                    }
                }
                if (aParametres.getterDisabled) {
                    lValue = !!aParametres.getterDisabled();
                    if (lValue !== aParametres.saveDisabled) {
                        $(aParametres.node).inputDisabled(lValue);
                        aParametres.saveDisabled = lValue;
                    }
                }
                if (aParametres.getterReadOnly) {
                    lValue = !!aParametres.getterReadOnly();
                    if (lValue !== aParametres.saveReadOnly) {
                        $(aParametres.node).prop('readonly', lValue);
                        aParametres.saveReadOnly = lValue;
                    }
                }
            }

            function _affecterGetterSetterInputModel(aParametres, aContexteCourant, aEstCB) {
                var lInfosGetValue, lInfosGetValueInit, lInfosSetValue, lInfosGetDisabled, lInfosGetReadOnly, lInfosGetSetModele, lInfosExitChange, lInfosInterrompreEvent, lInfosNode, lInfosNodeAfter, lValue, lAncre;
                lInfosGetValueInit = _getAccesParametresModel('getValueInit', aContexteCourant);
                if (lInfosGetValueInit.estFonction) {
                    aParametres.getterValueInit = function() {
                        var lValue = lInfosGetValueInit.callback([aParametres.node]);
                        if (aEstCB) {
                            return !!lValue;
                        }
                        return lValue === undefined || lValue === null ? '' : lValue.toString();
                    };
                }
                lInfosGetValue = _getAccesParametresModel('getValue', aContexteCourant);
                lInfosGetSetModele = _getAccesParametres('', aContexteCourant);
                if (lInfosGetValue.estFonction) {
                    aParametres.getterValue = function() {
                        var lValue = lInfosGetValue.callback([aParametres.node]);
                        if (aEstCB) {
                            return !!lValue;
                        }
                        return lValue === undefined || lValue === null ? '' : lValue.toString();
                    };
                } else if (!aParametres.getterValueInit) {
                    lAncre = lInfosGetSetModele.getAncre();
                    if (!lInfosGetSetModele.valide || !lAncre) {
                        return false;
                    }
                    lValue = lAncre[lInfosGetSetModele.nom];
                    if (lValue) {
                        if (aEstCB && lValue !== true) {
                            return false;
                        }
                        if (!aEstCB && !MethodesObjet.isString(lAncre[lInfosGetSetModele.nom])) {
                            return false;
                        }
                    }
                    aParametres.getterValue = function() {
                        var lValue = lInfosGetSetModele.callback();
                        if (aEstCB) {
                            return !!lValue;
                        }
                        return lValue === undefined || lValue === null ? '' : lValue.toString();
                    };
                }
                lInfosSetValue = _getAccesParametresModel('setValue', aContexteCourant);
                if (lInfosSetValue.estFonction) {
                    aParametres.setterValue = function(aValue, aParametresSetter) {
                        return lInfosSetValue.callback([aValue, aParametresSetter]);
                    };
                } else if (!aParametres.getterValueInit) {
                    lAncre = lInfosGetSetModele.getAncre();
                    if (!lInfosGetSetModele.valide || !lAncre) {
                        return false;
                    }
                    aParametres.setterValue = function(aValue) {
                        var lAncre = lInfosGetSetModele.getAncre();
                        if (!lAncre) {
                            return;
                        }
                        lAncre[lInfosGetSetModele.nom] = aValue;
                    };
                }
                lInfosGetDisabled = _getAccesParametresModel('getDisabled', aContexteCourant);
                if (lInfosGetDisabled.estFonction) {
                    aParametres.getterDisabled = lInfosGetDisabled.callback.bind(null, [aParametres.node, aContexteCourant.data]);
                }
                lInfosGetReadOnly = _getAccesParametresModel('getReadOnly', aContexteCourant);
                if (lInfosGetReadOnly.estFonction) {
                    aParametres.getterReadOnly = lInfosGetReadOnly.callback.bind(null, [aParametres.node, aContexteCourant.data]);
                }
                lInfosExitChange = _getAccesParametresModel('exitChange', aContexteCourant);
                if (lInfosExitChange.estFonction) {
                    aParametres.infosExitChange = lInfosExitChange;
                }
                if (aParametres.getterValueInit && !aParametres.infosExitChange) {
                    aParametres.getterValueInit = null;
                }
                lInfosInterrompreEvent = _getAccesParametresModel('interrompreEvent', aContexteCourant);
                if (lInfosInterrompreEvent.estFonction) {
                    aParametres.interrompreEvent = lInfosInterrompreEvent;
                }
                lInfosNode = _getAccesParametresModel('node', aContexteCourant);
                if (lInfosNode.estFonction) {
                    aParametres.infosNode = lInfosNode;
                }
                lInfosNodeAfter = _getAccesParametresModel('nodeAfter', aContexteCourant);
                if (lInfosNodeAfter.estFonction) {
                    aParametres.infosNodeAfter = lInfosNodeAfter;
                }
                var lInfoskeyupEnter = _getAccesParametresModel('keyupEnter', aContexteCourant);
                if (lInfoskeyupEnter.estFonction) {
                    aParametres.infoskeyupEnter = lInfoskeyupEnter;
                }
                return true;
            }

            function _estNodeContentEditable(aNode) {
                if (aNode && Support.contentEditable && (aNode.isContentEditable || aNode.contentEditable === 'true')) {
                    var lNodeName = aNode.nodeName ? aNode.nodeName.toLowerCase() : '';
                    return lNodeName !== 'input' && lNodeName !== 'textarea';
                }
                return false;
            }

            function _gererInputModele(aContexteCourant, aJNode, aEstCB, aAttributType, aMaxLength) {
                var lModele = null,
                    lMask, lMatchMask, lPattern, lMatchPattern, lPatternValidateRegex, lSaveValues = {},
                    lTrim = false,
                    lAvecAttrTrim = false,
                    lValue = aEstCB ? false : '',
                    lDisabled = false,
                    lReadOnly = false,
                    lInfosToDisplay = null,
                    lInfosFromDisplay = null,
                    lFuncExitChange = null,
                    lEstTexteBrut = false,
                    lRefresh = aContexteCourant.contexte.refresh,
                    lParametres = {
                        node: aContexteCourant.node,
                        controleur: aContexteCourant.controleur,
                        data: aContexteCourant.data,
                        estCB: aEstCB,
                        saveValues: lSaveValues,
                        eventActif: true,
                        saveDisabled: false,
                        getterValue: null,
                        getterValueInit: null,
                        setterValue: null,
                        getterDisabled: null,
                        getterReadOnly: null,
                        toDisplay: null,
                        fromDisplay: null,
                        declencherExitChange: false,
                        contentEditable: _estNodeContentEditable(aContexteCourant.node)
                    };
                if (lParametres.contentEditable && aMaxLength > 0) {
                    aMaxLength = 0;
                }
                if (_hasAttribute(aContexteCourant.node, 'ie-etatsaisie')) {
                    aContexteCourant.etatSaisie = true;
                    aContexteCourant.node.removeAttribute('ie-etatsaisie');
                    lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-etatsaisie');
                }
                if (aContexteCourant.controleur) {
                    lModele = _getModel(aContexteCourant);
                    if (lModele) {
                        Object.assign(lParametres, {
                            modele: lModele,
                            modeleArg: aContexteCourant.data.$modeleParsed
                        });
                        if (!_affecterGetterSetterInputModel(lParametres, aContexteCourant, aEstCB)) {
                            return;
                        }
                        if (lParametres.infosExitChange) {
                            aContexteCourant.data.forceExitChange = function(aParametresExit) {
                                if (lFuncExitChange) {
                                    lFuncExitChange(aParametresExit);
                                }
                            };
                        }
                        lValue = lParametres.getterValueInit ? lParametres.getterValueInit() : lParametres.getterValue();
                        if (lParametres.getterDisabled) {
                            lDisabled = lParametres.saveDisabled = !!lParametres.getterDisabled();
                            aJNode.inputDisabled(lDisabled);
                        }
                        if (lParametres.getterReadOnly) {
                            lReadOnly = lParametres.saveReadOnly = !!lParametres.getterReadOnly();
                            aJNode.prop('readonly', lReadOnly);
                        }
                        if (aEstCB) {
                            lValue = !!lValue;
                            lSaveValues.value = lSaveValues.inputValue = lValue;
                            aJNode.inputChecked(lValue);
                        } else {
                            lValue = lValue || '';
                            lSaveValues.value = lSaveValues.inputValue = lValue;
                            lAvecAttrTrim = _hasAttribute(aContexteCourant.node, 'ie-trim');
                            if (lAvecAttrTrim) {
                                lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-trim');
                                aContexteCourant.node.removeAttribute('ie-trim');
                            }
                            lTrim = (aAttributType !== 'password' && lAvecAttrTrim) || aContexteCourant.estIndicatifTelephone;
                            if (lParametres.contentEditable) {
                                lEstTexteBrut = true;
                            } else if (aContexteCourant.estTelephone || aContexteCourant.estIndicatifTelephone || aAttributType === 'password' || aAttributType === 'email') {
                                lEstTexteBrut = true;
                            } else if (_hasAttribute(aContexteCourant.node, 'ie-textbrut')) {
                                lEstTexteBrut = true;
                                aContexteCourant.node.removeAttribute('ie-textbrut');
                                lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-textbrut');
                            }
                            if (!uTailleMaxTelephone) {
                                uTailleMaxTelephone = GChaine.maskTelephone.replace(/ /g, '').length;
                            }
                            lInfosToDisplay = _getAccesParametresModel('toDisplay', aContexteCourant);
                            lInfosFromDisplay = _getAccesParametresModel('fromDisplay', aContexteCourant);
                            lParametres.toDisplay = function(aChaine) {
                                if (!lEstTexteBrut) {
                                    aChaine = GChaine.enleverEntites(aChaine);
                                }
                                if (aContexteCourant.estIndicatifTelephone) {
                                    aChaine = '+ ' + aChaine.replace(IEHtml.REGEXP_INDICATIF_TELEPHONE, '').slice(0, IEHtml.TAILLEMAX_INDICATIF_TELEPHONE);
                                }
                                if (aContexteCourant.estTelephone && GChaine && GChaine.formatTelephone) {
                                    aChaine = GChaine.formatTelephone(aChaine.replace(IEHtml.REGEXP_TELEPHONE, '').slice(0, uTailleMaxTelephone));
                                }
                                if (lInfosToDisplay && lInfosToDisplay.estFonction) {
                                    aChaine = lInfosToDisplay.callback([aChaine, aContexteCourant.data]);
                                }
                                return aChaine;
                            };
                            lParametres.fromDisplay = function(aChaine) {
                                if (lInfosFromDisplay && lInfosFromDisplay.estFonction) {
                                    aChaine = lInfosFromDisplay.callback([aChaine, aContexteCourant.data]);
                                }
                                if (!lEstTexteBrut) {
                                    aChaine = GChaine.ajouterEntites(aChaine);
                                }
                                if (lTrim && aChaine.trim) {
                                    aChaine = aChaine.trim();
                                }
                                if (aContexteCourant.estIndicatifTelephone) {
                                    aChaine = aChaine.replace(/\+| /g, '').replace(IEHtml.REGEXP_INDICATIF_TELEPHONE, '').slice(0, IEHtml.TAILLEMAX_INDICATIF_TELEPHONE);
                                }
                                if (aContexteCourant.estTelephone) {
                                    aChaine = aChaine.replace(/ /g, '').replace(IEHtml.REGEXP_TELEPHONE, '').slice(0, uTailleMaxTelephone);
                                }
                                return aChaine;
                            };
                            lValue = lSaveValues.inputValue = lParametres.toDisplay(lValue);
                            if (lParametres.contentEditable) {
                                aContexteCourant.node.innerHTML = lValue;
                            } else {
                                aContexteCourant.node.value = lValue;
                            }
                            lPattern = aContexteCourant.node.getAttribute('ie-pattern');
                            lMatchPattern = lPattern && lPattern.match ? lPattern.match(C_RegExp_Match) : null;
                            if (lMatchPattern) {
                                var lRegExp = new RegExp(lMatchPattern[1], lMatchPattern[2]);
                                lPatternValidateRegex = function(value) {
                                    return !value || lRegExp.test(value);
                                };
                                aContexteCourant.$patternOK = lPatternValidateRegex(lSaveValues.inputValue);
                            }
                            if (lPattern) {
                                lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-pattern="' + lPattern + '"');
                                aContexteCourant.node.removeAttribute('ie-pattern');
                            }
                        }
                    }
                }
                if (!aEstCB) {
                    lMask = aContexteCourant.node.getAttribute('ie-mask');
                    if (lMask) {
                        lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-mask="' + lMask + '"');
                        aContexteCourant.node.removeAttribute('ie-mask');
                        if (lParametres.contentEditable) {
                            lMask = '';
                        }
                    }
                    if (lMask && !lModele) {
                        lSaveValues.value = aContexteCourant.node.value;
                    }
                    lMatchMask = lMask && lMask.match ? lMask.match(C_RegExp_Match) : null;
                }
                if (lModele) {
                    _abonnerRefresh(function() {
                        _verificationInputModel(aContexteCourant, lParametres, lPatternValidateRegex);
                    }, aContexteCourant.node, aContexteCourant);
                }
                if (lModele || (!aEstCB && (lMatchMask || aMaxLength))) {
                    aJNode.on(aEstCB ? 'IEChecked change input' : 'input change paste cut keydown keypress keyup', function(aEvent) {
                        if (!lParametres.eventActif) {
                            return;
                        }
                        var lNewValue = null,
                            lNewInputValue = null,
                            lValueInput, lCaret = null;
                        if (aEstCB) {
                            lNewValue = $(this).is(':checked');
                        } else {
                            lValueInput = lParametres.contentEditable ? this.innerHTML : this.value;
                            lNewValue = lValueInput;
                            lNewInputValue = lNewValue;
                            if (lParametres.interrompreEvent && lParametres.interrompreEvent.callback([aEvent])) {
                                return false;
                            }
                            if (aMaxLength > 0 && lNewValue.length > aMaxLength && !lParametres.contentEditable) {
                                var lTop = $(this).scrollTop();
                                this.value = lNewValue = lNewValue.slice(0, aMaxLength);
                                $(this).scrollTop(lTop);
                            }
                            if (lMatchMask && lNewValue.length > 0) {
                                var lSanitize = '',
                                    lCharMask = '',
                                    lRegExpMask = new RegExp(lMatchMask[1], lMatchMask[2]);
                                for (var lIx = 0; lIx < lNewValue.length; lIx++) {
                                    lCharMask = lNewValue.charAt(lIx);
                                    if (!lRegExpMask.test(lCharMask)) {
                                        lSanitize += lCharMask;
                                    }
                                }
                                if (lParametres.fromDisplay) {
                                    lNewValue = lParametres.fromDisplay(lNewValue);
                                }
                                if (lSanitize !== lNewValue) {
                                    var lNomProp = lParametres.contentEditable ? 'innerHTML' : 'value';
                                    if (lSanitize === lSaveValues.value) {
                                        if (lParametres.toDisplay) {
                                            this[lNomProp] = lParametres.toDisplay(lSaveValues.value);
                                        } else {
                                            this[lNomProp] = lSaveValues.value;
                                        }
                                        return false;
                                    }
                                    lNewValue = lSanitize;
                                    lNewInputValue = lSanitize;
                                    if (lParametres.toDisplay) {
                                        this[lNomProp] = lNewInputValue = lParametres.toDisplay(lNewValue);
                                    } else {
                                        this[lNomProp] = lNewValue;
                                    }
                                }
                            } else if (lParametres.fromDisplay) {
                                lNewValue = lParametres.fromDisplay(lNewValue);
                            }
                            if (lParametres.toDisplay) {
                                lNewInputValue = lParametres.toDisplay(lNewValue);
                                if ((lTrim && lNewInputValue.trim() !== lValueInput.trim()) || (!lTrim && lNewInputValue !== lValueInput)) {
                                    lCaret = null;
                                    if (aContexteCourant.estTelephone) {
                                        lCaret = _caret(this);
                                        if (lValueInput.length < lSaveValues.inputValue.length) {
                                            lCaret.begin = Math.max(0, lCaret.begin - (lSaveValues.inputValue.length - lNewInputValue.length) + 1);
                                            if (lNewInputValue.charAt(lCaret.begin - 1) === ' ') {
                                                lCaret.begin -= 1;
                                            }
                                            lCaret.change = true;
                                        } else {
                                            if (lNewInputValue.length < lSaveValues.inputValue.length) {
                                                lCaret.begin -= lValueInput.length - lNewInputValue.length + 1;
                                            }
                                            if (lNewInputValue === lSaveValues.inputValue) {
                                                lCaret.begin -= lValueInput.length - lNewInputValue.length;
                                            } else if (lNewInputValue.charAt(lCaret.begin - 1) === ' ') {
                                                lCaret.begin += 1;
                                            } else if (lNewInputValue.length > lSaveValues.inputValue.length &&
                                                lCaret.begin > lSaveValues.inputValue.length) {
                                                lCaret.begin = lNewInputValue.length;
                                            }
                                            lCaret.change = true;
                                        }
                                    }
                                    if (lParametres.contentEditable) {
                                        this.innerHTML = lNewInputValue;
                                    } else {
                                        this.value = lNewInputValue;
                                    }
                                    if (lCaret && lCaret.change) {
                                        _caret(this, lCaret.begin);
                                    }
                                }
                            }
                        }
                        if (lSaveValues.value !== lNewValue) {
                            var lPatternOK, lCloneSave;
                            if (lModele) {
                                lPatternOK = true;
                                if (lPatternValidateRegex) {
                                    lPatternOK = lPatternValidateRegex(lNewValue);
                                    aContexteCourant.$patternOK = lPatternOK;
                                }
                                lCloneSave = MethodesObjet.dupliquer(lSaveValues);
                            }
                            lParametres.declencherExitChange = true;
                            lSaveValues.value = lNewValue;
                            lSaveValues.inputValue = lNewInputValue;
                            if (aContexteCourant.etatSaisie) {
                                if (aContexteCourant.controleur && aContexteCourant.controleur.instance && aContexteCourant.controleur.instance.SetEtatSaisie) {
                                    aContexteCourant.controleur.instance.SetEtatSaisie(true);
                                } else {
                                    Invocateur.evenement(ObjetInvocateur.events.etatSaisie, true);
                                }
                            }
                            if (lModele) {
                                var lParametresSetValue = {
                                    node: this,
                                    event: aEvent,
                                    value: lNewValue,
                                    inputValue: lNewInputValue,
                                    textBrut: lEstTexteBrut,
                                    oldValues: lCloneSave,
                                    patternOK: lPatternOK,
                                    selectionTexte: false
                                };
                                if (lParametres.setterValue) {
                                    lParametres.setterValue(lNewValue, lParametresSetValue);
                                }
                                aContexteCourant.data.$ignoreRefresh = true;
                                try {
                                    lRefresh();
                                } finally {
                                    delete aContexteCourant.data.$ignoreRefresh;
                                }
                                if (aContexteCourant.data.$destroy === true) {
                                    return;
                                }
                                _verificationInputModel(aContexteCourant, lParametres);
                                if (lParametresSetValue.selectionTexte && !aEstCB) {
                                    aContexteCourant.node.select();
                                }
                            }
                        }
                    });
                }
                if (lTrim) {
                    aJNode.on('change blur', function() {
                        var lValue = lParametres.contentEditable ? this.innerHTML : this.value;
                        var lValueTrim = lValue.trim();
                        if (lValueTrim !== lValue) {
                            lSaveValues.value = lValueTrim;
                            lSaveValues.inputValue = lValueTrim;
                            if (lParametres.contentEditable) {
                                this.innerHTML = lValueTrim;
                            } else {
                                this.value = lValueTrim;
                            }
                        }
                    });
                }
                if (lParametres.infosExitChange) {
                    lFuncExitChange = function(aParamsExit) {
                        var lParametresExitChange = Object.assign(aParamsExit || {}, {
                            data: aContexteCourant.data,
                            event: null
                        });
                        lParametres.infosExitChange.callback([lSaveValues.value, lParametresExitChange]);
                        _verificationInputModel(aContexteCourant, lParametres, lPatternValidateRegex);
                        lRefresh();
                        if (lParametresExitChange.selectionTexte && !aEstCB) {
                            aContexteCourant.node.select();
                        }
                    };
                    aJNode.on('change blur focusout', function(aEvent) {
                        if (!lParametres.declencherExitChange) {
                            return;
                        }
                        lParametres.declencherExitChange = false;
                        lFuncExitChange(aEvent);
                    });
                }
                if (!aEstCB && global.M && global.M.textareaAutoResize && aContexteCourant.nodeName === 'textarea' && $(aContexteCourant.node).hasClass('materialize-textarea')) {
                    lOutils.surInjectionHtml(aContexteCourant, function() {
                        global.M.textareaAutoResize($(aContexteCourant.node));
                    });
                }
                if (lParametres.infosNode) {
                    lOutils.surInjectionHtml(aContexteCourant, function() {
                        lParametres.infosNode.callback(Array.prototype.slice.call(arguments));
                    });
                }
                if (lParametres.infosNodeAfter) {
                    lOutils.surInjectionHtml(aContexteCourant, function() {
                        lParametres.infosNodeAfter.callback(Array.prototype.slice.call(arguments));
                    }, true);
                }
                if (lParametres.infoskeyupEnter) {
                    aJNode.on('keyup', function(aEvent) {
                        if (aEvent.which === ToucheClavier.RetourChariot) {
                            lParametres.infoskeyupEnter.callback([aEvent]);
                            lRefresh();
                        }
                    });
                }
            }

            function _gererInputCB(aContexteCourant, aAttributType) {
                _gererInputModele(aContexteCourant, $(aContexteCourant.node), true, aAttributType);
            }

            function _gererMaxLengthInputText(aContexteCourant, aNode, aJNode, aEstInput, aAttributType) {
                var lAttrMaxLength = aNode.getAttribute('maxlength'),
                    lMaxLength = 0;
                if (aEstInput) {
                    if (aContexteCourant.estIndicatifTelephone || aContexteCourant.estTelephone) {
                        return;
                    }
                    if (IEHtml.MAX_LENGTH_Default === 0) {
                        return;
                    }
                    if (!lAttrMaxLength && (aAttributType === 'text' || aAttributType === '' || aAttributType === 'number' || aAttributType === 'email' || aAttributType === 'url')) {
                        aJNode.attr('maxlength', IEHtml.MAX_LENGTH_Default);
                    } else if (parseInt(lAttrMaxLength, 10) === 0) {
                        aNode.removeAttribute('maxlength');
                    }
                } else {
                    lMaxLength = lAttrMaxLength ? parseInt(lAttrMaxLength, 10) : IEHtml.MAX_LENGTH_Default;
                    if (isNaN(lMaxLength)) {
                        lMaxLength = IEHtml.MAX_LENGTH_Default;
                    }
                    if (lMaxLength > 0) {
                        lOutils.addCommentaireDebug(aNode, 'maxlength:' + lMaxLength);
                    }
                    if (lAttrMaxLength) {
                        aNode.removeAttribute('maxlength');
                    }
                }
                return lMaxLength;
            }

            function _gererInputText(aContexteCourant, aAttributType) {
                var lJNode = $(aContexteCourant.node);
                var lEstInput = aContexteCourant.nodeName === 'input';
                var lEstTextArea = aContexteCourant.nodeName === 'textarea';
                if (lEstInput && _hasAttribute(aContexteCourant.node, 'ie-indicatiftel')) {
                    aContexteCourant.estIndicatifTelephone = true;
                    lJNode.addClass('ie-indicatiftel');
                    lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-indicatiftel');
                    aContexteCourant.node.removeAttribute('ie-indicatiftel');
                } else if (lEstInput && _hasAttribute(aContexteCourant.node, 'ie-telephone')) {
                    aContexteCourant.estTelephone = true;
                    lJNode.addClass('ie-telephone');
                    lOutils.addCommentaireDebug(aContexteCourant.node, 'ie-telephone');
                    aContexteCourant.node.removeAttribute('ie-telephone');
                }
                var lMaxLength = lEstInput || lEstTextArea ? _gererMaxLengthInputText(aContexteCourant, aContexteCourant.node, lJNode, lEstInput, aAttributType) : 0;
                if (lEstInput || lEstTextArea || aContexteCourant.data.$modeleValue) {
                    _gererInputModele(aContexteCourant, lJNode, false, aAttributType, lMaxLength);
                }
                lJNode = null;
            }

            function _getDataDeNode(aNode) {
                var lNodeValue = aNode.getAttribute('ie-data'),
                    lData = null;
                if (lNodeValue && lNodeValue.length > 2 && lNodeValue.charAt(0) === '{' && lNodeValue.charAt(lNodeValue.length - 1) === '}') {
                    try {
                        lData = ObjetJSON.parse(lNodeValue, {
                            ignorerEntites: true
                        });
                    } catch (e) {
                        lData = null;
                    }
                }
                return lData;
            }

            function _traiterIF(aNode, aNodeParent, aControleur, aContexte, aData) {
                var lValueAttr = aNode.getAttribute('ie-if');
                aNode.removeAttribute('ie-if');
                if (!lValueAttr) {
                    return true;
                }
                if (!aControleur) {
                    return true;
                }
                var lContexteCourant = _getContexteCourant(aControleur, aContexte, aNode, Object.assign({}, aData));
                _remplirDataModel(lContexteCourant);
                var lInfos = _getAccesParametres(lValueAttr, lContexteCourant),
                    lValue = !!lInfos.callback(),
                    lOldValue = lValue,
                    lChaineData = 'ie-if',
                    lNodeComm = document.createComment(lChaineData),
                    lCloneModele = aNode.cloneNode(true);
                aNode.parentNode.insertBefore(lNodeComm, aNode);
                var lInvocateur = new ObjetInvocateur();
                _abonnerRefresh(function(aGuidEmetteur, aHashGuidCible) {
                    var lValue = !!lInfos.callback();
                    if (lOldValue !== lValue) {
                        lOldValue = lValue;
                        if (lValue) {
                            var lParams = {
                                element: aNodeParent,
                                html: lCloneModele.cloneNode(true),
                                controleur: aControleur,
                                contexte: aContexte,
                                invocateur: lInvocateur
                            };
                            var lPreInjectionHtml = _preInjectionHTML(aNodeParent, null);
                            _injectEtCompilNode(lParams);
                            _transfererFragmentDansHTML(lParams.childNodes, aNodeParent, lNodeComm.nextSibling);
                            _finaliserInjectionHTML(lPreInjectionHtml, aContexte);
                            lParams.childNodes = null;
                        } else {
                            while (lNodeComm.nextSibling && _estNoeudCommentaire(lNodeComm.nextSibling)) {
                                $(lNodeComm.nextSibling).remove();
                            }
                            if (lNodeComm.nextSibling) {
                                $(lNodeComm.nextSibling).remove();
                            }
                        }
                    } else {
                        lInvocateur.evenement(C_id_event_iemodel, aGuidEmetteur, aHashGuidCible);
                    }
                }, aNodeParent, lContexteCourant, null, function() {
                    if (aNodeParent && aNodeParent.contains && !aNodeParent.contains(lNodeComm)) {
                        return true;
                    }
                    return false;
                });
                if (!lValue) {
                    $(aNode).remove();
                }
                return lValue;
            }

            function _addNodeDeREPEAT(aNodeParent, aControleur, aCloneModele, aNomVariableBoucle, aIndice, aInfosAcces, aNodeComm, aContexte, aArrayNodes, aInvocateur, aInitialisationRepeat) {
                var lNodeAvant;
                lNodeAvant = aNodeComm;
                if (aIndice > 0) {
                    lNodeAvant = aArrayNodes[aIndice - 1];
                }
                if (!aContexte.repeat) {
                    aContexte.repeat = {};
                }
                var lContexte = Object.assign({}, aContexte),
                    lContexteBoucles = {};
                if (!lContexte.eventsInjectionHtml) {
                    lContexte.eventsInjectionHtml = aContexte.eventsInjectionHtml = [];
                }
                lContexteBoucles[aNomVariableBoucle] = {
                    indice: aIndice,
                    arguments: aInfosAcces.args,
                    getterArray: function() {
                        return aInfosAcces.callback() || [];
                    }
                };
                lContexte.repeat = Object.assign(lContexteBoucles, aContexte.repeat);
                if (aInitialisationRepeat) {
                    var lNodeClone = aCloneModele.cloneNode(true);
                    aNodeParent.insertBefore(lNodeClone, lNodeAvant.nextSibling);
                    aArrayNodes[aIndice] = _compileNode(lNodeClone, aNodeParent, aControleur, lContexte, aInvocateur);
                } else {
                    var lParams = {
                        element: aNodeParent,
                        html: aCloneModele.cloneNode(true),
                        controleur: aControleur,
                        contexte: lContexte,
                        invocateur: aInvocateur
                    };
                    _injectEtCompilNode(lParams);
                    aArrayNodes[aIndice] = _transfererFragmentDansHTML(lParams.childNodes, aNodeParent, lNodeAvant.nextSibling);
                    lParams.childNodes = null;
                }
            }

            function _getDiffTab(aTabOld, aTabNew) {
                var lLength = Math.max(aTabOld.length, aTabNew.length),
                    i, lResult = [];
                for (i = 0; i < lLength; i++) {
                    if (aTabOld[i] !== aTabNew[i]) {
                        lResult[i] = {
                            supprimer: true,
                            ajouter: aTabNew[i] !== null && aTabNew[i] !== undefined
                        };
                    }
                }
                return lResult;
            }

            function _traiterREPEAT(aNode, aNodeParent, aControleur, aContexte, aData) {
                var lValueAttr = aNode.getAttribute('ie-repeat');
                aNode.removeAttribute('ie-repeat');
                if (!lValueAttr) {
                    return true;
                }
                if (!aControleur) {
                    return true;
                }
                var lTab = lValueAttr.split('in');
                if (lTab.length !== 2) {
                    return true;
                }
                lValueAttr = lTab[1].trim();
                var lNomVariableBoucle = lTab[0].trim();
                if (!aContexte.repeat) {
                    aContexte.repeat = {};
                }
                if (aContexte.repeat[lNomVariableBoucle]) {
                    return true;
                }
                var lContexteCourant = _getContexteCourant(aControleur, aContexte, aNode, aData);
                var lInfos = _getAccesParametres(lValueAttr, lContexteCourant),
                    lArrayValue = [].concat(lInfos.callback() || []),
                    lChaineData = 'ie-repeat',
                    lNodeComm = document.createComment(lChaineData),
                    lArrayNodes = [],
                    lArrayComms = [],
                    lCloneModele = aNode.cloneNode(true);
                aNode.parentNode.insertBefore(lNodeComm, aNode);
                var lInvocateur = new ObjetInvocateur();
                _abonnerRefresh(function(aGuidEmetteur, aHashGuidCible) {
                    var lNewArrayValue = lInfos.callback() || [],
                        i, lDiff = _getDiffTab(lArrayValue, lNewArrayValue),
                        lArrayRemove, lAvecModif = false,
                        lPreInjectionHtml;
                    if (lDiff.length > 0) {
                        lArrayRemove = [];
                        for (i = 0; i < lDiff.length; i++) {
                            if (lDiff[i] && lDiff[i].supprimer) {
                                lAvecModif = true;
                                if (!lPreInjectionHtml) {
                                    lPreInjectionHtml = _preInjectionHTML(aNodeParent, null);
                                }
                                lArrayRemove.push(lArrayNodes[i]);
                                lArrayNodes[i] = null;
                                if (i > 0 && lArrayComms[i]) {
                                    lArrayRemove.push(lArrayComms[i]);
                                    lArrayComms[i] = null;
                                }
                            }
                        }
                        if (lArrayRemove.length > 0) {
                            $(lArrayRemove).remove();
                        }
                        for (i = 0; i < lDiff.length; i++) {
                            if (lDiff[i] && lDiff[i].ajouter) {
                                lAvecModif = true;
                                if (!lPreInjectionHtml) {
                                    lPreInjectionHtml = _preInjectionHTML(aNodeParent, null);
                                }
                                _addNodeDeREPEAT(aNodeParent, aControleur, lCloneModele, lNomVariableBoucle, i, lInfos, lNodeComm, aContexte, lArrayNodes, lInvocateur);
                            }
                        }
                        lArrayValue = [].concat(lNewArrayValue);
                        if (lAvecModif && lPreInjectionHtml) {
                            _finaliserInjectionHTML(lPreInjectionHtml, aContexte);
                        }
                    }
                    lInvocateur.evenement(C_id_event_iemodel, aGuidEmetteur, aHashGuidCible);
                }, aNodeParent, lContexteCourant, null, function() {
                    if (aNodeParent && aNodeParent.contains && !aNodeParent.contains(lNodeComm)) {
                        return true;
                    }
                    return false;
                });
                $(aNode).remove();
                for (var i = 0; i < lArrayValue.length; i++) {
                    _addNodeDeREPEAT(aNodeParent, aControleur, lCloneModele, lNomVariableBoucle, i, lInfos, lNodeComm, aContexte, lArrayNodes, lInvocateur, true);
                }
                return false;
            }

            function _compileNode(aNode, aNodeParent, aControleur, aContexte, aInvocateur, aProfondeur) {
                var lResultBalise, lNodeType, lNodeName, lNode = aNode,
                    lProfondeur = aProfondeur || 0,
                    lData = null,
                    lAvecAttributData = false,
                    lAttrValue, lJSONDebugData, lNameAttribut, lAvecCompilFils = true,
                    lContexteCourant = _getContexteCourant(aControleur, aContexte, aNode, null, aInvocateur),
                    lParametresCompile;
                if (lProfondeur > 1000) {
                    return;
                }
                lNodeType = lNode.nodeType;
                lNodeName = lNode.nodeName;
                if (lNodeType === 1 && !!lNodeName) {
                    lNodeName = lNodeName ? lNodeName.toLowerCase() : '';
                    if (!aContexte.refresh) {
                        aContexte.refresh = function() {
                            if (aControleur && aControleur.$refresh) {
                                return aControleur.$refresh(null, true);
                            }
                            return IEHtml.refresh();
                        };
                    }
                    if (!aContexte.refreshSelf) {
                        aContexte.refreshSelf = function() {
                            if (aControleur && aControleur.$refreshSelf) {
                                return aControleur.$refreshSelf(true);
                            }
                            return Promise.resolve();
                        };
                    }
                    lJSONDebugData = null;
                    lData = _getDataDeNode(lNode);
                    lAvecAttributData = !!lData;
                    if (!lData) {
                        lData = {};
                    }
                    var lAvecIeRepeat = false;
                    if (_hasAttribute(aNode, 'ie-repeat')) {
                        lAvecIeRepeat = true;
                        if (!_traiterREPEAT(aNode, aNodeParent, aControleur, aContexte, lData)) {
                            return;
                        }
                    }
                    if (_hasAttribute(aNode, 'ie-if')) {
                        if (!lAvecIeRepeat && !_traiterIF(aNode, aNodeParent, aControleur, aContexte, lData)) {
                            return;
                        }
                    }
                    lContexteCourant.data = lData;
                    lContexteCourant.nodeName = lNodeName;
                    _getModel(lContexteCourant);
                    var lAvecTransformationNoeud = !!uBalises[lNodeName],
                        lNomBaliseTransform = lNodeName;
                    if (!lAvecTransformationNoeud) {
                        for (lNameAttribut in uBalises) {
                            if (_hasAttribute(lNode, lNameAttribut)) {
                                lAvecTransformationNoeud = true;
                                lNomBaliseTransform = lNameAttribut;
                                lNode.removeAttribute(lNameAttribut);
                                break;
                            }
                        }
                    }
                    if (lAvecTransformationNoeud) {
                        lResultBalise = uBalises[lNomBaliseTransform](lContexteCourant, lOutils);
                        lAvecCompilFils = !lResultBalise || lResultBalise.avecCompileFils !== false;
                        if (lResultBalise && lResultBalise.node) {
                            lNode = lResultBalise.node;
                            lContexteCourant.node = lNode;
                            lNodeName = lNode.nodeName ? lNode.nodeName.toLowerCase() : '';
                        }
                    }
                    var lEstNodeInput = lNodeName === 'input';
                    var lAttributType = '';
                    if (lEstNodeInput) {
                        lAttributType = (lNode.getAttribute('type') || '').toLowerCase();
                    }
                    if (lEstNodeInput && (lAttributType === 'radio' || lAttributType === 'checkbox')) {
                        if (!lResultBalise || !lResultBalise.ignorerGererInputCB) {
                            _gererInputCB(lContexteCourant, lAttributType);
                        }
                    } else if (lEstNodeInput || lNodeName === 'textarea' || _estNodeContentEditable(lNode)) {
                        if (!lResultBalise || !lResultBalise.ignorerInputText) {
                            _gererInputText(lContexteCourant, lAttributType);
                        }
                    }
                    if (lData && !$.isEmptyObject(lData)) {
                        $(lNode).IEData(lData);
                        if (lAvecAttributData) {
                            if (lJSONDebugData) {
                                lOutils.addCommentaireDebug(lNode, 'ie-data="' + lJSONDebugData + '"');
                            }
                            lNode.removeAttribute('ie-data');
                        }
                    }
                    for (lNameAttribut in uAttributs) {
                        if (_hasAttribute(lNode, lNameAttribut)) {
                            lParametresCompile = {};
                            try {
                                lAttrValue = lNode.getAttribute(lNameAttribut);
                                lNode.removeAttribute(lNameAttribut);
                                uAttributs[lNameAttribut](lContexteCourant, lNodeName, lAttrValue, lOutils, lParametresCompile);
                                if (lAvecCompilFils) {
                                    lAvecCompilFils = lParametresCompile.avecCompileFils !== false;
                                }
                            } catch (e) {}
                        }
                    }
                }
                if (lAvecCompilFils && lNode.childNodes && lNode.childNodes.length > 0) {
                    _compile(lNode.childNodes, lNode, aControleur, aContexte, aInvocateur, lProfondeur + 1);
                }
                return lContexteCourant.node;
            }

            function _compile(aNodeList, aNodeParent, aControleur, aContexte, aInvocateur, aProfondeur) {
                var lProfondeur = aProfondeur || 0;
                if (lProfondeur > 1000) {
                    return;
                }
                var lChildNodes = _sliceNodes(aNodeList),
                    lNode, i;
                for (i = 0; i < lChildNodes.length; i++) {
                    lNode = lChildNodes[i];
                    _compileNode(lNode, aNodeParent, aControleur, aContexte, aInvocateur, lProfondeur);
                }
            }
            return {
                initControleur: _initControleur,
                addBalise: function(aBalise, aFonction) {
                    aBalise = aBalise.toLowerCase();
                    uBalises[aBalise] = aFonction;
                    lNodeNames.push(aBalise);
                },
                addAttribut: function(aAttribut, aFonction) {
                    aAttribut = aAttribut.toLowerCase();
                    uAttributs[aAttribut] = aFonction;
                },
                ieData: function(aObjet) {
                    if (!aObjet) {
                        return '';
                    }
                    var lChaine = ObjetJSON.toJSON(aObjet, {
                        ignorerEntites: true
                    });
                    if (!lChaine) {
                        return '';
                    }
                    return ' ie-data="' + lChaine.replace(/"/g, '&quot;') + '" ';
                },
                refresh: function(aGuidEmmeteur, aHashGuidCible, aRefreshAsynchrone) {
                    if (aRefreshAsynchrone) {
                        return new Promise(function(aResolve) {
                            setTimeout(function() {
                                uInvocateur.evenement(C_id_event_iemodel, aGuidEmmeteur, aHashGuidCible);
                                aResolve();
                            }, 0);
                        });
                    } else {
                        uInvocateur.evenement(C_id_event_iemodel, aGuidEmmeteur, aHashGuidCible);
                        return Promise.resolve();
                    }
                },
                injectHTML: function(aElement, aHtml, aControleur, aIgnorerScroll, aInsererAvantNode, aAvecCommentaireConstructeur, aCommentaireHtmlDebug) {
                    return _injectHTML({
                        element: aElement,
                        insererAvantLeNode: aInsererAvantNode,
                        html: aHtml,
                        controleur: aControleur,
                        ignorerScroll: aIgnorerScroll,
                        avecCommentaireConstructeur: aAvecCommentaireConstructeur !== false,
                        commentaireHtmlDebug: aCommentaireHtmlDebug
                    });
                },
                injectHTMLParams: _injectHTML,
                toArg: function(aArgs) {
                    if (aArgs === undefined) {
                        return '';
                    }
                    var lArray = aArgs;
                    if (!Array.isArray(lArray)) {
                        lArray = [aArgs];
                    }
                    var lArg = '',
                        i, lTab = [];
                    for (i = 0; i < lArray.length; i++) {
                        lArg = lArray[i];
                        if (lArg === null) {
                            lTab.push('null');
                        } else if (lArg === undefined) {
                            lTab.push('undefined');
                        } else if (MethodesObjet.isString(lArg)) {
                            lTab.push('\'' + lArg + '\'');
                        } else if (MethodesObjet.isObject(lArg)) {
                            lTab.push('null');
                        } else {
                            lTab.push(lArg);
                        }
                    }
                    return lTab.join(',').replace(/"/g, '&quot;');
                },
                composeAttr: function(aAttribut, aNomFonction, aArgs) {
                    if (!aNomFonction || !aAttribut || !aNomFonction.replace) {
                        return '';
                    };
                    var lResult = ' ' + aAttribut + '="' + aNomFonction.replace(/"/g, '&quot;');
                    if (arguments.length > 2) {
                        lResult += '(' + this.toArg(aArgs) + ')';
                    }
                    return lResult + '" ';
                },
                outils: lOutils,
                collectionIdentite: {},
                C_id_event_iemodel: C_id_event_iemodel,
                MAX_LENGTH_Default: 0,
                REGEXP_INDICATIF_TELEPHONE: /[^0-9]/ig,
                TAILLEMAX_INDICATIF_TELEPHONE: 3,
                REGEXP_TELEPHONE: /[^0-9]/ig
            };
        }());
        $.fn.IEHtml = function(aHtml, aParametres) {
            var lParametres = {
                html: aHtml,
                ignorerScroll: false,
                controleur: null,
                sansCompile: false,
                avecCommentaireConstructeur: true,
                commentaireHtmlDebug: ''
            };
            Object.assign(lParametres, aParametres);
            return this.empty().each(function() {
                if (lParametres.sansCompile) {
                    this.innerHTML = aHtml;
                } else {
                    while (this && this.firstChild) {
                        this.removeChild(this.firstChild);
                    }
                    IEHtml.injectHTMLParams(Object.assign({
                        element: this
                    }, lParametres));
                }
            });
        };
        $.fn.IEHtmlAppend = function(aHtml, aParametres) {
            var lParametres = {
                ignorerScroll: false,
                controleur: null,
                sansCompile: false
            };
            Object.assign(lParametres, aParametres);
            return this.each(function() {
                if (lParametres.sansCompile) {
                    this.innerHTML += aHtml;
                } else {
                    IEHtml.injectHTMLParams(Object.assign({
                        element: this,
                        html: aHtml
                    }, lParametres));
                }
            });
        };
        $.fn.IEData = function(aData) {
            if (arguments.length > 0) {
                return this.each(function() {
                    $(this).data('ieData', aData);
                });
            }
            return $(this).data('ieData');
        };
        var u_SurEventMouse_0x0 = false;
        var u_timer_SurEventMouse_0x0;
        var u_estEventEn0x0 = function(aEvent) {
            return (aEvent.pageX === 0 && aEvent.pageY === 0) || (aEvent.clientX === 0 && aEvent.clientY === 0);
        };
        $.fn.eventValidation = function(aCallback) {
            return this.each(function() {
                $(this).on({
                    mouseup: function(aEvent) {
                        u_SurEventMouse_0x0 = false;
                        if (u_timer_SurEventMouse_0x0) {
                            clearTimeout(u_timer_SurEventMouse_0x0);
                            u_timer_SurEventMouse_0x0 = null;
                        }
                        if (u_estEventEn0x0(aEvent)) {
                            u_SurEventMouse_0x0 = true;
                            u_timer_SurEventMouse_0x0 = setTimeout(function() {
                                u_SurEventMouse_0x0 = false;
                                u_timer_SurEventMouse_0x0 = null;
                            }, 100);
                        }
                    },
                    click: function(aEvent) {
                        if (!u_SurEventMouse_0x0 && u_estEventEn0x0(aEvent)) {
                            return;
                        }
                        u_SurEventMouse_0x0 = false;
                        return aCallback.call(this, aEvent);
                    },
                    keyup: function(aEvent) {
                        if (aEvent.which === ToucheClavier.Espace || aEvent.which === ToucheClavier.RetourChariot) {
                            return aCallback.call(this, aEvent);
                        }
                    }
                });
            });
        };
        Invocateur.abonner(ObjetInvocateur.events.refreshIEHtml, function() {
            IEHtml.refresh();
        });
        module.exports = IEHtml;
    },
    fn: "iehtml.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('divers.js');
        var GLog = require('IELog.js');
        var MethodesObjet = require('MethodesObjet.js');
        var IEHtml = require('IEHtml.js');

        function _ObjetHtml() {}
        _ObjetHtml.prototype.elementExiste = function(aElement) {
            return aElement && (this.estElement(aElement) || this.estDocument(aElement) || document.getElementById(aElement)) ? true : false;
        };
        _ObjetHtml.prototype.estElement = function(aElement) {
            return aElement && (aElement.nodeType === 1);
        };
        _ObjetHtml.prototype.estDocument = function(aElement) {
            return aElement && (aElement.nodeType === 9);
        };
        _ObjetHtml.prototype.nettoyerHtml = function(aHtml) {
            var lDiv = document.createElement('div');
            lDiv.insertAdjacentHTML('afterbegin', aHtml);
            return lDiv.innerHTML;
        };
        _ObjetHtml.prototype.viderNode = function(aNode) {
            if (aNode && aNode.getElementsByTagName) {
                $.cleanData(aNode.getElementsByTagName('*'));
            }
            while (aNode && aNode.firstChild) {
                aNode.removeChild(aNode.firstChild);
            }
        };
        _ObjetHtml.prototype.getParent = function(aElement) {
            var lElement = this.getElement(aElement);
            if (this.estElement(lElement)) {
                if (lElement.parentElement) {
                    return lElement.parentElement;
                }
                if (lElement.parentNode) {
                    return lElement.parentNode;
                }
            }
            return null;
        };
        _ObjetHtml.prototype.htmlToDOM = function(aHtml) {
            var lFrag = document.createDocumentFragment(),
                lDiv = document.createElement('div'),
                lNoeudDOM;
            lFrag.appendChild(lDiv);
            lDiv.insertAdjacentHTML('afterbegin', aHtml);
            if (lDiv.childNodes.length > 1) {
                lNoeudDOM = Array.from(lDiv.childNodes);
            } else {
                lNoeudDOM = lDiv.firstChild;
            }
            this.viderNode(lDiv);
            lDiv = null;
            lFrag = null;
            return lNoeudDOM;
        };
        _ObjetHtml.prototype.insererElementDOM = function(aElementPere, aElement, aInsererEnPremier) {
            if (GHtml.estElement(aElement) && GHtml.estElement(aElementPere)) {
                if (aInsererEnPremier && aElementPere.firstChild) {
                    aElementPere.insertBefore(aElement, aElementPere.firstChild);
                } else {
                    aElementPere.appendChild(aElement);
                }
            }
        };
        _ObjetHtml.prototype.addHtml = function(aId, aHtml, aParametres) {
            var lElement = this.getElement(aId);
            if (this.elementExiste(lElement) && lElement.appendChild) {
                var lParametres = Object.assign({}, aParametres);
                if (lParametres.instance && lParametres.instance.controleur) {
                    lParametres.controleur = lParametres.instance.controleur;
                }
                if (lParametres.sansCompile) {
                    lElement.insertAdjacentHTML('beforeend', aHtml);
                } else {
                    IEHtml.injectHTML(lElement, aHtml, lParametres.controleur, lParametres.ignorerScroll, null, false);
                }
            }
        };
        _ObjetHtml.prototype.supprimerElementDOM = function(aId) {
            var lElement = GHtml.getElement(aId);
            if (lElement) {
                $(lElement).remove();
            }
        };
        _ObjetHtml.prototype.getElement = function(aId) {
            var E = this.estElement(aId) || this.estDocument(aId) ? aId : document.getElementById(aId);
            return E || null;
        };
        _ObjetHtml.prototype.getHtml = function(aId) {
            var E = this.getElement(aId);
            if (E) {
                return E.innerHTML;
            }
        };
        _ObjetHtml.prototype.getValue = function(aId) {
            var E = this.getElement(aId);
            var lChaine = require('_ObjetChaine.js').GChaine;
            if (E) {
                return lChaine.ajouterEntites(E.value);
            }
            return '';
        };
        _ObjetHtml.prototype.getClass = function(aId) {
            var E = this.getElement(aId);
            return E && E.className ? E.className : '';
        };
        _ObjetHtml.prototype.addClass = function(aId, aClass) {
            this.modifierClass(aId, null, aClass);
        };
        _ObjetHtml.prototype.delClass = function(aId, aClass) {
            this.modifierClass(aId, aClass, null);
        };
        _ObjetHtml.prototype.modifierClass = function(aId, aClassSuppression, aClasseAjout) {
            if ((!aClassSuppression && !aClasseAjout) || !this.elementExiste(aId)) {
                return;
            }
            var lJElement = GHtml.estElement(aId) ? $(aId) : $('#' + aId.escapeJQ());
            if (aClassSuppression) {
                lJElement.removeClass(aClassSuppression);
            }
            if (aClasseAjout) {
                lJElement.addClass(aClasseAjout);
            }
        };
        _ObjetHtml.prototype.getDisplay = function(aId) {
            var E = this.getElement(aId);
            if (E) {
                if (E.style && E.style.display === 'none') {
                    return false;
                } else if (!E.parentNode) {
                    return true;
                } else {
                    return this.getDisplay(E.parentNode);
                }
            }
            return false;
        };
        _ObjetHtml.prototype.extraireNombreDId = function(aId, aIndiceAvant, aSeparateur) {
            var lOptions, T, lResult, lId = aId;
            if (!MethodesObjet.isString(lId)) {
                if (this.estElement(lId) && lId.id) {
                    lId = lId.id;
                } else {
                    return null;
                }
            }
            lOptions = {
                separateur: aSeparateur || '_',
                indiceAvant: aIndiceAvant || 0
            };
            T = lId.split(lOptions.separateur);
            lResult = parseInt(T[Math.max(0, T.length - 1 - lOptions.indiceAvant)], 10);
            return MethodesObjet.isNumber(lResult) ? lResult : null;
        };
        _ObjetHtml.prototype.setClass = function(aId, aClass) {
            var E = this.getElement(aId);
            if (E) {
                E.className = aClass;
            }
        };
        _ObjetHtml.prototype.setHtml = function(aId, aHtml, aIgnorerScroll) {
            var E = this.getElement(aId);
            if (E) {
                var lParametres = Object.assign({}, aIgnorerScroll);
                if (aIgnorerScroll === true) {
                    lParametres.ignorerScroll = true;
                }
                if (lParametres.instance && lParametres.instance.controleur) {
                    lParametres.controleur = lParametres.instance.controleur;
                }
                if ($.fn.IEHtml && (!lParametres.instance || !lParametres.instance.IGNORER_IEHTML)) {
                    $(E).IEHtml(aHtml, lParametres);
                } else {
                    if (E.getElementsByTagName) {
                        $.cleanData(E.getElementsByTagName("*"));
                    }
                    E.innerHTML = aHtml;
                    if (aIgnorerScroll !== true) {
                        var lOverflow = $(E).css('overflow');
                        if (lOverflow === 'auto' || lOverflow === 'scroll') {
                            E.scrollLeft = 0;
                            E.scrollTop = 0;
                        }
                    }
                }
            }
        };

        function _valeurToProp(aValeur) {
            if (aValeur === null || aValeur === undefined) {
                return '';
            }
            if (MethodesObjet.isString(aValeur)) {
                var lChaine = require('_ObjetChaine.js').GChaine;
                return lChaine.enleverEntites(aValeur);
            }
            if (MethodesObjet.isNumber(aValeur)) {
                return aValeur + '';
            }
            return aValeur;
        }
        _ObjetHtml.prototype.setTitle = function(aId, aTitle) {
            var E = this.getElement(aId);
            if (E) {
                E.title = _valeurToProp(aTitle);
            }
        };
        _ObjetHtml.prototype.setValue = function(aId, aValue) {
            var E = this.getElement(aId);
            if (E) {
                E.value = _valeurToProp(aValue);
            }
        };
        _ObjetHtml.prototype.setDisabled = function(aId, aDisabled) {
            var E = this.getElement(aId);
            if (E) {
                $(E).inputDisabled(aDisabled);
            }
        };
        _ObjetHtml.prototype.setAvecMain = function(aId, aDisabled) {
            var E = this.getElement(aId);
            if (E) {
                $(E).toggleClass('AvecMain', !aDisabled);
            }
        };
        _ObjetHtml.prototype.setDisplay = function(aId, aVisible) {
            var E = this.getElement(aId);
            if (E) {
                if (aVisible) {
                    $(E).show();
                } else {
                    $(E).hide();
                }
            }
        };
        _ObjetHtml.prototype.setFocus = function(aId, aFocus, aAvecDecalage) {
            function _focus(aElement) {
                if (!GHtml.elementExiste(aElement)) {
                    return;
                }
                try {
                    if (aFocus || aFocus === null || aFocus === undefined) {
                        aElement.focus();
                    } else {
                        aElement.blur();
                    }
                } catch (e) {
                    GLog.addLog('Erreur _ObjetHtml.prototype.setFocus : ' + e.toString() + ' ((fv) remarqué uniquement sur IE avec un delai)');
                }
            }
            if (GHtml.elementExiste(aId)) {
                try {
                    if (this.getDisplay(aId)) {
                        var lElement = this.getElement(aId);
                        if (lElement) {
                            var lAvecDecalage = aAvecDecalage,
                                lDecalage = 200;
                            if (aAvecDecalage >= 0 && MethodesObjet.isNumber(aAvecDecalage)) {
                                lAvecDecalage = true;
                                lDecalage = aAvecDecalage;
                            }
                            if (lAvecDecalage) {
                                setTimeout(_focus.bind(null, lElement), lDecalage);
                            } else {
                                _focus(lElement);
                            }
                        }
                    }
                } catch (e) {}
            }
        };
        _ObjetHtml.prototype.setFocusEdit = function(aId) {
            if (this.elementExiste(aId)) {
                try {
                    if (this.getDisplay(aId)) {
                        var E = this.getElement(aId);
                        if (E) {
                            E.focus();
                            if (window.GNavigateur && window.GNavigateur.IsIE) {
                                E.select();
                            }
                            E.value = E.value;
                        }
                    }
                } catch (e) {}
            }
        };
        _ObjetHtml.prototype.setSelectionEdit = function(aId, aBegin, aEnd) {
            if (this.elementExiste(aId)) {
                try {
                    if (this.getDisplay(aId)) {
                        var E = this.getElement(aId);
                        if (E) {
                            var begin = MethodesObjet.isNumber(aBegin) ? aBegin : 0,
                                end = MethodesObjet.isNumber(aEnd) ? aEnd : E.value.length;
                            if (E.setSelectionRange) {
                                E.setSelectionRange(begin, end);
                            } else if (E.createTextRange) {
                                var range = E.createTextRange();
                                range.collapse(true);
                                range.moveEnd('character', end);
                                range.moveStart('character', begin);
                                range.select();
                            }
                        }
                    }
                } catch (e) {}
            }
        };
        _ObjetHtml.prototype.setImage = function(aId, aSrc) {
            var E = this.getElement(aId);
            if (E) {
                E.src = aSrc;
            }
        };
        _ObjetHtml.prototype.setAlt = function(aId, aValue) {
            var E = this.getElement(aId);
            if (E) {
                E.alt = aValue;
            }
        };
        _ObjetHtml.prototype.setTexte = function(aId, aTexte) {
            var E = this.getElement(aId);
            if (E) {
                this.viderNode(E);
                E.appendChild(document.createTextNode(aTexte));
            }
        };
        _ObjetHtml.prototype.composeBlanc = function() {
            return '<span style="font-size : 1px">&nbsp;</span>';
        };
        _ObjetHtml.prototype.setCheckBox = function(aId, aValue) {
            if (aValue === undefined) {
                aValue = false;
            }
            var E = this.getElement(aId);
            if (E) {
                $(E).inputChecked(aValue);
            }
        };
        _ObjetHtml.prototype.toArg = function(aArgs) {
            if (IEHtml) {
                return IEHtml.toArg(aArgs);
            };
            return '';
        };
        _ObjetHtml.prototype.composeAttr = function() {
            if (IEHtml) {
                return IEHtml.composeAttr.apply(IEHtml, arguments);
            };
            return '';
        };
        _ObjetHtml.prototype.deselectionTexte = function() {
            try {
                if (window.getSelection && window.getSelection() && window.getSelection().removeAllRanges) {
                    window.getSelection().removeAllRanges();
                }
            } catch (e) {}
        };
        var GHtml = new _ObjetHtml();
        module.exports = {
            _ObjetHtml: _ObjetHtml,
            GHtml: GHtml
        };
    },
    fn: "_objethtml.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('_ObjetHtml.js').GHtml;
        var Support = require('ObjetSupport.js');
        var EGenreBordure = {
            gauche: 1,
            haut: 2,
            droite: 4,
            bas: 8
        };
        EGenreBordure.avecBordure = function(aBordures, aGenreBordure) {
            return aGenreBordure > 0 && aBordures > 0 ? !!(aBordures & aGenreBordure) : false;
        };

        function _ObjetStyle() {}
        _ObjetStyle.prototype.composeCouleur = function(aCouleurFond, aCouleurTexte, aCouleurBordure, aLargeurBordure, aListeBordures) {
            return this.composeCouleurFond(aCouleurFond) + this.composeCouleurTexte(aCouleurTexte) + this.composeCouleurBordure(aCouleurBordure, aLargeurBordure, aListeBordures);
        };
        _ObjetStyle.prototype.composeCouleurBordure = function(aCouleurBordure, aLargeurBordure, aListeBordures, aStyle) {
            if (aCouleurBordure && MethodesObjet.isString(aCouleurBordure)) {
                var lStyle = aStyle || 'solid';
                if (!$.isNumeric(aLargeurBordure)) {
                    aLargeurBordure = 1;
                }
                if (!aListeBordures) {
                    return ' border: ' + aLargeurBordure + 'px ' + lStyle + ' ' + aCouleurBordure + ';';
                }
                var H = [];
                H.push(aListeBordures & EGenreBordure.gauche ? ' border-left: ' + aLargeurBordure + 'px ' + lStyle + ' ' + aCouleurBordure + ';' : '');
                H.push(aListeBordures & EGenreBordure.haut ? ' border-top: ' + aLargeurBordure + 'px ' + lStyle + ' ' + aCouleurBordure + ';' : '');
                H.push(aListeBordures & EGenreBordure.droite ? ' border-right: ' + aLargeurBordure + 'px ' + lStyle + ' ' + aCouleurBordure + ';' : '');
                H.push(aListeBordures & EGenreBordure.bas ? ' border-bottom: ' + aLargeurBordure + 'px ' + lStyle + ' ' + aCouleurBordure + ';' : '');
                return H.join('');
            }
            return '';
        };
        _ObjetStyle.prototype.composeCouleurFond = function(aCouleurFond) {
            if (!aCouleurFond) {
                return '';
            }
            if (MethodesObjet.isString(aCouleurFond)) {
                return ' background-color:' + aCouleurFond + ';';
            };
            return '';
        };
        _ObjetStyle.prototype.composeCouleurTexte = function(aCouleurTexte) {
            if (!aCouleurTexte) {
                return '';
            }
            if (MethodesObjet.isString(aCouleurTexte)) {
                return ' color:' + aCouleurTexte + ';';
            };
            return '';
        };
        _ObjetStyle.prototype.composeBordureArrondi = function() {
            return '';
        };
        _ObjetStyle.prototype.composeHeight = function(aValeur, aFormat) {
            if (aValeur && aValeur.indexOf && aValeur.indexOf('%') > 0) {
                aValeur = parseFloat(aValeur);
                aFormat = '%';
            }
            if (!MethodesObjet.isNumber(aValeur)) {
                return '';
            }
            if (!aFormat) {
                aFormat = 'px';
            }
            return 'height:' + aValeur + aFormat + ';';
        };
        _ObjetStyle.prototype.composeWidth = function(aValeur, aFormat) {
            if (aValeur && aValeur.indexOf && aValeur.indexOf('%') > 0) {
                aValeur = parseFloat(aValeur);
                aFormat = '%';
            }
            if (!MethodesObjet.isNumber(aValeur)) {
                return '';
            }
            if (!aFormat) {
                aFormat = 'px';
            }
            return 'width:' + aValeur + aFormat + ';';
        };
        _ObjetStyle.prototype.composeHeightCalc = function(aValeur) {
            if (!MethodesObjet.isNumber(aValeur)) {
                return '';
            }
            return 'height: calc(100% - ' + aValeur + 'px);';
        };
        _ObjetStyle.prototype.composeWidthCalc = function(aValeur) {
            if (!MethodesObjet.isNumber(aValeur)) {
                return '';
            }
            return 'width: calc(100% - ' + aValeur + 'px);';
        };
        _ObjetStyle.prototype.composeMarge = function(aHaut, aBas, aGauche, aDroit) {
            var lResult = '';
            if ($.isNumeric(aHaut)) {
                lResult += 'margin-top: ' + aHaut + 'px; ';
            }
            if ($.isNumeric(aBas)) {
                lResult += 'margin-bottom: ' + aBas + 'px; ';
            }
            if ($.isNumeric(aGauche)) {
                lResult += 'margin-left: ' + aGauche + 'px; ';
            }
            if ($.isNumeric(aDroit)) {
                lResult += 'margin-right: ' + aDroit + 'px; ';
            }
            return lResult;
        };
        _ObjetStyle.prototype.composeBoxShadow = function(aParametres) {
            var lParametres = {
                x: 0,
                y: 9,
                blur: 18,
                spread: 0,
                r: 50,
                g: 50,
                b: 50,
                opacity: 0.35
            };
            $.extend(lParametres, aParametres);
            var lValeur = '';
            if ($.isNumeric(lParametres.x) && lParametres.x > 0) {
                lValeur += lParametres.x + 'px';
            } else {
                lValeur += '0px';
            }
            lValeur += ' ';
            if ($.isNumeric(lParametres.y) && lParametres.y > 0) {
                lValeur += lParametres.y + 'px';
            } else {
                lValeur += '0px';
            }
            lValeur += ' ';
            if ($.isNumeric(lParametres.blur) && lParametres.blur > 0) {
                lValeur += lParametres.blur + 'px';
            } else {
                lValeur += '0px';
            }
            lValeur += ' ';
            if ($.isNumeric(lParametres.spread) && lParametres.spread !== 0) {
                lValeur += lParametres.spread + 'px';
            } else {
                lValeur += '0px';
            }
            if (lParametres.opacity > 0) {
                lValeur += ' rgba(' + lParametres.r + ', ' + lParametres.g + ', ' + lParametres.b + ', ' + lParametres.opacity + ')';
            } else {
                lValeur += ' rgb(' + lParametres.r + ', ' + lParametres.g + ', ' + lParametres.b + ')';
            }
            if (Support.supportBoxShadow[Support.GenreNavigateur.Standard]) {
                return 'box-shadow: ' + lValeur + ';';
            } else if (Support.supportBoxShadow[Support.GenreNavigateur.Webkit]) {
                return '-webkit-box-shadow: ' + lValeur + ';';
            } else if (Support.supportBoxShadow[Support.GenreNavigateur.Moz]) {
                return '-moz-box-shadow: ' + lValeur + ';';
            } else {
                return '';
            }
        };
        _ObjetStyle.prototype.composeTransitions = function(aPropriete, aDureeEnS, aDelaiEnS, aTiming) {
            if (!MethodesObjet.isString(aPropriete) || !MethodesObjet.isString(aDureeEnS)) {
                return '';
            }
            if (Support.supportTransitions[Support.GenreNavigateur.Standard]) {
                return 'transition-property: ' + aPropriete + ';' + 'transition-duration:' + aDureeEnS + ';' + (MethodesObjet.isString(aDelaiEnS) ? 'transition-delay:' + aDelaiEnS + ';' : '') + (MethodesObjet.isString(aTiming) ? 'transition-timing-function:' + aTiming + ';' : '');
            } else if (Support.supportTransitions[Support.GenreNavigateur.Webkit]) {
                return '-webkit-transition-property: ' + aPropriete + ';' + '-webkit-transition-duration:' + aDureeEnS + ';' + (MethodesObjet.isString(aDelaiEnS) ? '-webkit-transition-delay:' + aDelaiEnS + ';' : '') + (MethodesObjet.isString(aTiming) ? '-webkit-transition-timing-function:' + aTiming + ';' : '');
            } else if (Support.supportTransitions[Support.GenreNavigateur.Moz]) {
                return '-moz-transition-property: ' + aPropriete + ';' + '-moz-transition-duration:' + aDureeEnS + ';' + (MethodesObjet.isString(aDelaiEnS) ? '-moz-transition-delay:' + aDelaiEnS + ';' : '') + (MethodesObjet.isString(aTiming) ? '-moz-transition-timing-function:' + aTiming + ';' : '');
            } else if (Support.supportTransitions[Support.GenreNavigateur.Opera]) {
                return '-o-transition-property: ' + aPropriete + ';' + '-o-transition-duration:' + aDureeEnS + ';' + (MethodesObjet.isString(aDelaiEnS) ? '-o-transition-delay:' + aDelaiEnS + ';' : '') + (MethodesObjet.isString(aTiming) ? '-o-transition-timing-function:' + aTiming + ';' : '');
            } else {
                return '';
            }
        };
        _ObjetStyle.prototype.whichTransitionEvent = function() {
            var t;
            var lElement = document.createElement('fakeelement');
            var lTransitions = {
                'WebkitTransition': 'webkitTransitionEnd',
                'transition': 'transitionEnd',
                'OTransition': 'oTransitionEnd',
                'MSTransition': 'msTransitionEnd',
                'MozTransition': 'transitionend'
            };
            for (t in lTransitions) {
                if (lElement.style[t] !== undefined) {
                    return lTransitions[t];
                }
            }
        };
        _ObjetStyle.prototype.setTransitions = function(aId, aPropriete, aDureeEnS, aDelaiEnS, aTiming) {
            if (!MethodesObjet.isString(aPropriete) || !MethodesObjet.isString(aDureeEnS)) {
                return '';
            }
            var lStyle = this.getStyle(aId);
            if (lStyle) {
                var lChaine = aPropriete + ' ' + aDureeEnS + ' ' + (MethodesObjet.isString(aDelaiEnS) ? aDelaiEnS + ' ' : '') + (MethodesObjet.isString(aTiming) ? aTiming + ' ' : '');
                if (Support.supportTransitions[Support.GenreNavigateur.Standard]) {
                    lStyle.transition = lChaine;
                } else if (Support.supportTransitions[Support.GenreNavigateur.Webkit]) {
                    lStyle.webkitTransition = lChaine;
                } else if (Support.supportTransitions[Support.GenreNavigateur.Moz]) {
                    lStyle.MozTransition = lChaine;
                } else if (Support.supportTransitions[Support.GenreNavigateur.Opera]) {
                    lStyle.OTransition = lChaine;
                }
            }
        };
        _ObjetStyle.prototype.getStyle = function(aId) {
            var E = GHtml.getElement(aId);
            if (E) {
                return E.style;
            }
        };
        _ObjetStyle.prototype.setCouleurBordure = function(aId, aCouleur) {
            var E = GHtml.getElement(aId);
            if (E) {
                E.style.borderColor = aCouleur;
            }
        };
        _ObjetStyle.prototype.setCouleurBordureHaut = function(aId, aCouleur) {
            var E = GHtml.getElement(aId);
            if (E) {
                E.style.borderTopColor = aCouleur;
            }
        };
        _ObjetStyle.prototype.setCouleurBordureBas = function(aId, aCouleur) {
            var E = GHtml.getElement(aId);
            if (E && E.style) {
                E.style.borderBottomColor = aCouleur;
            }
        };
        _ObjetStyle.prototype.setCouleurBordureGauche = function(aId, aCouleur) {
            var E = GHtml.getElement(aId);
            if (E) {
                E.style.borderLeftColor = aCouleur;
            }
        };
        _ObjetStyle.prototype.setCouleurBordureDroit = function(aId, aCouleur) {
            var E = GHtml.getElement(aId);
            if (E) {
                E.style.borderRightColor = aCouleur;
            }
        };
        _ObjetStyle.prototype.setCouleur = function(aId, aCouleurFond, aCouleurTexte, aCouleurBordure) {
            if (aCouleurFond || aCouleurFond === '') {
                this.setCouleurFond(aId, aCouleurFond);
            }
            if (aCouleurTexte || aCouleurTexte === '') {
                this.setCouleurTexte(aId, aCouleurTexte);
            }
            if (aCouleurBordure || aCouleurBordure === '') {
                this.setCouleurBordure(aId, aCouleurBordure);
            }
        };
        _ObjetStyle.prototype.setCouleurFond = function(aId, aCouleurFond) {
            var S = this.getStyle(aId);
            if (S) {
                S.backgroundColor = aCouleurFond;
            }
        };
        _ObjetStyle.prototype.setCouleurTexte = function(aId, aCouleurTexte) {
            var S = this.getStyle(aId);
            if (S) {
                S.color = aCouleurTexte;
            }
        };
        _ObjetStyle.prototype.setVisible = function(aId, aVisible) {
            var S = this.getStyle(aId);
            if (S) {
                S.visibility = aVisible ? 'visible' : 'hidden';
            }
        };
        _ObjetStyle.prototype.setGras = function(aId, aGras) {
            var E = GHtml.getElement(aId);
            if (E && GHtml.estElement(E)) {
                E.style.fontWeight = (aGras ? 'bold' : 'normal');
            }
        };
        _ObjetStyle.prototype.getZindex = function(aId) {
            var S = this.getStyle(aId);
            if (S && S.zIndex) {
                return parseInt(S.zIndex);
            }
        };
        _ObjetStyle.prototype.setZindex = function(aId, aZindex) {
            var S = this.getStyle(aId);
            if (S) {
                S.zIndex = aZindex;
            }
        };
        _ObjetStyle.prototype.setDisplay = function(aId, aDisplay) {
            GHtml.setDisplay(aId, aDisplay);
        };
        _ObjetStyle.prototype.composeDegradeVertical = function(aCouleurDebut, aCouleurFin) {
            var lResult = this.composeCouleurFond(aCouleurDebut);
            if (Support.supportFilterIE) {
                lResult += ' FILTER: progid:DXImageTransform.Microsoft.Gradient(gradientType=0,startColorStr=' + aCouleurDebut + ',endColorStr=' + aCouleurFin + ');';
            } else if (Support.supportGradient[Support.GenreNavigateur.Standard]) {
                lResult += ' background: linear-gradient(to bottom, ' + aCouleurDebut + ', ' + aCouleurFin + ');';
            } else if (Support.supportGradient[Support.GenreNavigateur.IE]) {
                lResult += ' background: -ms-linear-gradient(top, ' + aCouleurDebut + ', ' + aCouleurFin + ');';
            } else if (Support.supportGradient[Support.GenreNavigateur.Moz]) {
                lResult += ' background: -moz-linear-gradient(top, ' + aCouleurDebut + ', ' + aCouleurFin + ');';
            } else if (Support.supportGradient[Support.GenreNavigateur.Webkit]) {
                lResult += ' background: -webkit-gradient(linear, left top, left bottom, from(' + aCouleurDebut + '), to(' + aCouleurFin + '));';
            }
            return lResult;
        };
        _ObjetStyle.prototype.composeContenuDegradeVertical = function(aCouleurDebut, aCouleurFin) {
            return this.composeContenuDegrade(180, aCouleurDebut, aCouleurFin);
        };
        _ObjetStyle.prototype.composeContenuDegrade = function(aAngle, aCouleurDebut, aCouleurFin) {
            var lResult = '';
            if (Support.supportGradient[Support.GenreNavigateur.Standard]) {
                lResult += 'linear-gradient(' + aAngle + 'deg, ' + aCouleurDebut + ', ' + aCouleurFin + ')';
            } else if (Support.supportGradient[Support.GenreNavigateur.IE]) {
                lResult += '-ms-linear-gradient(' + aAngle + 'deg, ' + aCouleurDebut + ', ' + aCouleurFin + ')';
            } else if (Support.supportGradient[Support.GenreNavigateur.Moz]) {
                lResult += '-moz-linear-gradient(' + aAngle + 'deg, ' + aCouleurDebut + ', ' + aCouleurFin + ')';
            } else if (Support.supportGradient[Support.GenreNavigateur.Webkit]) {
                lResult += '-webkit-gradient(' + aAngle + 'deg, left top, left bottom, from(' + aCouleurDebut + '), to(' + aCouleurFin + '))';
            } else {
                lResult += aCouleurDebut;
            }
            return lResult;
        };
        _ObjetStyle.prototype.getComputedValue = function(aNode, aPropertyName) {
            var lNode = GHtml.getElement(aNode);
            if (lNode && global.getComputedStyle && aPropertyName) {
                try {
                    return global.getComputedStyle(aNode).getPropertyValue(aPropertyName);
                } catch (e) {}
            }
            return '';
        };
        _ObjetStyle.prototype.getFloatComputedValue = function(aNode, aPropertyName) {
            var lNumber = parseFloat(this.getComputedValue(aNode, aPropertyName), 10);
            return isNaN(lNumber) ? 0 : lNumber;
        };
        var GStyle = new _ObjetStyle();
        module.exports = {
            EGenreBordure: EGenreBordure,
            _ObjetStyle: _ObjetStyle,
            GStyle: GStyle
        };
    },
    fn: "_objetstyle.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        MethodesObjet.heritagePrototype(ObjetStyle_Mobile, require('_ObjetStyle.js')._ObjetStyle);

        function ObjetStyle_Mobile() {
            this.inheritedCreate();
        }
        require('_ObjetStyle.js').GStyle = new ObjetStyle_Mobile();
        Object.assign(module.exports, {
            ObjetStyle_Mobile: ObjetStyle_Mobile,
            GStyle: require('_ObjetStyle.js').GStyle
        });
    },
    fn: "objetstyle_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (IE.estMobile) {
            module.exports = require('ObjetStyle_Mobile.js').GStyle;
        } else {
            module.exports = require('ObjetStyle_Espace.js').GStyle;
        }
    },
    fn: "gstyle.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GLog = require('IELog.js');
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('_ObjetHtml.js').GHtml;

        function _ObjetPosition() {}
        var GPosition = new _ObjetPosition();
        _ObjetPosition.prototype.getWidth = function(aId) {
            var lElement = GHtml.getElement(aId);
            return GHtml.estElement(lElement) ? lElement.offsetWidth : 0;
        };
        _ObjetPosition.prototype.getHeight = function(aId) {
            var lElement = GHtml.getElement(aId);
            return GHtml.estElement(lElement) ? lElement.offsetHeight : 0;
        };
        _ObjetPosition.prototype.getLeft = function(aId) {
            var lLeft = 0;
            try {
                GNavigateur.bloquerResize = true;
                var lElement = GHtml.getElement(aId);
                var lEstPopup = false;
                while (GHtml.estElement(lElement) && !lEstPopup) {
                    lLeft += lElement.offsetLeft - lElement.scrollLeft;
                    lElement = lElement.offsetParent;
                }
            } finally {
                GNavigateur.bloquerResize = false;
            }
            return lLeft + document.body.scrollLeft;
        };
        _ObjetPosition.prototype.getTop = function(aId) {
            var lTop = 0;
            try {
                GNavigateur.bloquerResize = true;
                var lElement = GHtml.getElement(aId);
                while (GHtml.estElement(lElement)) {
                    lTop += lElement.offsetTop - lElement.scrollTop;
                    lElement = lElement.offsetParent;
                }
            } finally {
                GNavigateur.bloquerResize = false;
            }
            return lTop + document.body.scrollTop;
        };
        _ObjetPosition.prototype.setWidth = function(aId, aWidth, aAjuster, aFormat) {
            try {
                if (aWidth === undefined || aWidth === null || isNaN(aWidth)) {
                    GLog.addLog('setWidth invalide : ' + aWidth);
                    return;
                }
                var lElement = GHtml.getElement(aId);
                if (!lElement || !lElement.style) {
                    return;
                }
                var lWidthEnString = MethodesObjet.isString(aWidth);
                aFormat = !aFormat && !lWidthEnString ? 'px' : aFormat;
                if (lWidthEnString && aWidth === 'auto') {
                    lElement.style.width = aWidth;
                } else {
                    aWidth = Math.max(0, aWidth);
                    lElement.style.width = aWidth + aFormat;
                }
                if (aAjuster && (aFormat === 'px') && GHtml.getDisplay(lElement)) {
                    var lWidth = this.getWidth(lElement);
                    if (aWidth !== lWidth) {
                        lElement.style.width = Math.max(0, aWidth - (lWidth - aWidth)) + aFormat;
                    }
                }
            } catch (e) {}
        };
        _ObjetPosition.prototype.setHeight = function(aId, aHeight, aAjuster, aFormat) {
            try {
                if (aHeight === undefined || aHeight === null || isNaN(aHeight)) {
                    GLog.addLog('setHeight invalide : ' + aHeight);
                    return;
                }
                var lElement = GHtml.getElement(aId);
                if (!lElement || !lElement.style) {
                    return;
                }
                var lHeightEnString = MethodesObjet.isString(aHeight);
                aFormat = !aFormat && !lHeightEnString ? 'px' : aFormat;
                if (lHeightEnString && aHeight === 'auto') {
                    lElement.style.height = aHeight;
                } else {
                    aHeight = Math.max(0, aHeight);
                    lElement.style.height = aHeight + aFormat;
                }
                if (aAjuster && (aFormat === 'px') && GHtml.getDisplay(lElement)) {
                    var lHeight = this.getHeight(lElement);
                    if (aHeight !== lHeight) {
                        lElement.style.height = Math.max(0, aHeight - (lHeight - aHeight)) + aFormat;
                    }
                }
            } catch (e) {}
        };
        _ObjetPosition.prototype.setLeft = function(aId, aLeft, aAjuster, aFormat) {
            aFormat = !aFormat ? 'px' : aFormat;
            try {
                if (aLeft === undefined || aLeft === null || isNaN(aLeft)) {
                    GLog.addLog('setLeft invalide : ' + aLeft);
                    return;
                }
                var lElement = GHtml.getElement(aId);
                if (!lElement || !lElement.style) {
                    return;
                }
                aLeft = isNaN(aLeft) ? 0 : aLeft;
                lElement.style.left = aLeft + aFormat;
                if (aAjuster && (aFormat === 'px') && GHtml.getDisplay(lElement)) {
                    var lLeft = this.getLeft(lElement);
                    if (aLeft !== lLeft) {
                        lElement.style.left = aLeft - (lLeft - aLeft) + aFormat;
                    }
                }
            } catch (e) {}
        };
        _ObjetPosition.prototype.setTop = function(aId, aTop, aAjuster, aFormat) {
            aFormat = !aFormat ? 'px' : aFormat;
            try {
                if (aTop === undefined || aTop === null || isNaN(aTop)) {
                    GLog.addLog('setTop invalide : ' + aTop);
                    return;
                }
                var lElement = GHtml.getElement(aId);
                if (!lElement || !lElement.style) {
                    return;
                }
                aTop = isNaN(aTop) ? 0 : aTop;
                lElement.style.top = aTop + aFormat;
                if (aAjuster && (aFormat === 'px') && GHtml.getDisplay(lElement)) {
                    var lTop = this.getTop(lElement);
                    if (aTop !== lTop) {
                        lElement.style.top = aTop - (lTop - aTop) + aFormat;
                    }
                }
            } catch (e) {}
        };
        _ObjetPosition.prototype.getRect = function(aId, aPositionAbsolue, aAvecInner) {
            var lElement = GHtml.getElement(aId);
            if (lElement && lElement.getBoundingClientRect) {
                var lBoundingRect = lElement.getBoundingClientRect();
                if (lBoundingRect) {
                    var lOffsetX = window.pageXOffset || 0;
                    var lOffsetY = window.pageYOffset || 0;
                    var lRect = {
                        left: lBoundingRect.left + lOffsetX,
                        right: lBoundingRect.right + lOffsetX,
                        top: lBoundingRect.top + lOffsetY,
                        bottom: lBoundingRect.bottom + lOffsetY,
                        x: lBoundingRect.left + lOffsetX,
                        y: lBoundingRect.top + lOffsetY,
                        width: lBoundingRect.right - lBoundingRect.left,
                        height: lBoundingRect.bottom - lBoundingRect.top,
                        leftScroll: aPositionAbsolue ? lBoundingRect.left : 0,
                        topScroll: aPositionAbsolue ? lBoundingRect.top : 0
                    };
                    if (aAvecInner) {
                        try {
                            var lComputedStyle = global.getComputedStyle(lElement);
                            lRect.paddingLeft = parseFloat(lComputedStyle.getPropertyValue('padding-left'), 10);
                            lRect.paddingRight = parseFloat(lComputedStyle.getPropertyValue('padding-right'), 10);
                            lRect.paddingTop = parseFloat(lComputedStyle.getPropertyValue('padding-top'), 10);
                            lRect.paddingBottom = parseFloat(lComputedStyle.getPropertyValue('padding-bottom'), 10);
                            lRect.borderLeft = parseFloat(lComputedStyle.getPropertyValue('border-left-width'), 10);
                            lRect.borderRight = parseFloat(lComputedStyle.getPropertyValue('border-right-width'), 10);
                            lRect.borderTop = parseFloat(lComputedStyle.getPropertyValue('border-top-width'), 10);
                            lRect.borderBottom = parseFloat(lComputedStyle.getPropertyValue('border-bottom-width'), 10);
                            lRect.innerWidth = lRect.width - lRect.paddingLeft - lRect.paddingRight - lRect.borderLeft - lRect.borderRight;
                            lRect.innerHeight = lRect.height - lRect.paddingTop - lRect.paddingBottom - lRect.borderTop - lRect.borderBottom;
                            lRect.innerLeft = lRect.left + lRect.paddingLeft + lRect.borderLeft;
                            lRect.innerRight = lRect.right - lRect.paddingRight - lRect.borderRight;
                            lRect.innerTop = lRect.top + lRect.paddingTop + lRect.borderTop;
                            lRect.innerBottom = lRect.bottom - lRect.paddingBottom - lRect.borderBottom;
                        } catch (e) {}
                    }
                    if (!aPositionAbsolue) {
                        if ($.css(lElement, "position") === "fixed") {
                            return lRect;
                        }
                        var lOffsetParent = lElement.offsetParent;
                        while (lOffsetParent && $.css(lOffsetParent, "position") === "static") {
                            lOffsetParent = lOffsetParent.offsetParent;
                        }
                        lOffsetParent = lOffsetParent || document.documentElement;
                        if (lOffsetParent && lOffsetParent.nodeName && lOffsetParent.nodeName.toLowerCase() !== 'html') {
                            var lRectOffset = this.getRect(lOffsetParent, true);
                            return Object.assign(lRect, {
                                x: lRect.x - lRectOffset.x,
                                y: lRect.y - lRectOffset.y,
                                left: lRect.left - lRectOffset.left,
                                right: lRect.left - lRectOffset.left + lRect.width,
                                top: lRect.top - lRectOffset.top,
                                bottom: lRect.top - lRectOffset.top + lRect.height
                            });
                        }
                    }
                    return lRect;
                }
            };
            return {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0,
                width: 0,
                height: 0,
                x: 0,
                y: 0,
                leftScroll: 0,
                topScroll: 0,
                erreur: true
            };
        };
        _ObjetPosition.prototype.getClientRect = function(aId, aAvecInner) {
            return this.getRect(aId, true, aAvecInner);
        };
        _ObjetPosition.prototype.setPosition = function(aId, aLeft, aTop, aAjuster, aFormat) {
            this.setLeft(aId, aLeft, aAjuster, aFormat);
            this.setTop(aId, aTop, aAjuster, aFormat);
        };
        _ObjetPosition.prototype.centrer = function(aId, aIdPere, aClient) {
            var lLeft, lTop, lWidth, lHeight;
            if (!aIdPere) {
                lLeft = window.pageXOffset || 0;
                lTop = window.pageYOffset || 0;
                if (document.documentElement) {
                    lLeft = lLeft || document.documentElement.scrollLeft;
                    lTop = lTop || document.documentElement.scrollTop;
                }
                if (window.visualViewport) {
                    lLeft = lLeft || window.visualViewport.offsetLeft;
                    lTop = lTop || window.visualViewport.offsetTop;
                }
                if (GNavigateur.isTactile && window.visualViewport) {
                    lWidth = window.visualViewport.width;
                    lHeight = window.visualViewport.height;
                } else if (GNavigateur.isTactile && window.innerHeight) {
                    lWidth = window.innerWidth;
                    lHeight = window.innerHeight;
                } else if (!aClient) {
                    lWidth = GNavigateur.EcranL;
                    lHeight = GNavigateur.EcranH;
                } else {
                    lWidth = GNavigateur.ClientL;
                    lHeight = GNavigateur.ClientH;
                }
            } else {
                lLeft = this.getLeft(aIdPere);
                lTop = this.getTop(aIdPere);
                lWidth = this.getWidth(aIdPere);
                lHeight = this.getHeight(aIdPere);
            }
            var lWidthId = this.getWidth(aId),
                lHeightId = this.getHeight(aId);
            if (lWidthId * lHeightId) {
                var lPosition = {
                    x: Math.max(0, lLeft + (lWidth - lWidthId) / 2),
                    y: Math.max(0, lTop + (lHeight - lHeightId) / 2),
                    width: lWidthId,
                    height: lHeightId
                };
                _ramenerPositionDansLAffichage(lPosition);
                this.setPosition(aId, Math.max(0, lPosition.x), Math.max(0, lPosition.y), true);
            }
        };
        _ObjetPosition.prototype.placer = function(aId, aLeft, aTop, aEcartBordEcran) {
            var lX1 = MethodesObjet.isNumber(aLeft) ? aLeft : 0;
            var lX2 = lX1 + this.getWidth(aId);
            var lY1 = MethodesObjet.isNumber(aTop) ? aTop : 0;
            var lY2 = lY1 + this.getHeight(aId);
            var lEcartBordEcran = $.extend({
                x: 2,
                y: 2
            }, aEcartBordEcran);
            if (lX2 + lEcartBordEcran.x > GNavigateur.EcranL) {
                lX1 = GNavigateur.EcranL - this.getWidth(aId) - lEcartBordEcran.x;
            }
            if (lY2 + lEcartBordEcran.y > GNavigateur.EcranH) {
                lY1 = GNavigateur.EcranH - this.getHeight(aId) - lEcartBordEcran.y;
            }
            this.setPosition(aId, Math.max(lEcartBordEcran.x, lX1), Math.max(lEcartBordEcran.y, lY1), true);
        };
        _ObjetPosition.prototype.placerFiche = function(aId, aIdSource, aVisible, aDecalage) {
            var lPositionSource = _getPositionElement(aIdSource);
            this.placerFicheSource(aId, lPositionSource.x, lPositionSource.x + lPositionSource.width, lPositionSource.y, lPositionSource.y + lPositionSource.height, aVisible, aDecalage);
        };

        function _ramenerPositionDansLAffichage(aPosition) {
            if (aPosition.x + aPosition.width > GNavigateur.EcranL) {
                aPosition.x = Math.max(0, GNavigateur.EcranL - aPosition.width);
            }
            if (aPosition.y + aPosition.height > GNavigateur.EcranH) {
                aPosition.y = Math.max(0, GNavigateur.EcranH - aPosition.height);
            }
        }

        function _avecChevauchement(aPosition, aPositionSource) {
            return (aPosition.x < (aPositionSource.x + aPositionSource.width)) && ((aPosition.x + aPosition.width) > aPositionSource.x) && (aPosition.y < (aPositionSource.y + aPositionSource.height)) && ((aPosition.y + aPosition.height) > aPositionSource.y);
        }

        function _getPositionElement(aElement) {
            var lX = GPosition.getLeft(aElement),
                lY = GPosition.getTop(aElement),
                lWidth = GPosition.getWidth(aElement),
                lHeight = GPosition.getHeight(aElement);
            return {
                x: lX,
                y: lY,
                width: lWidth,
                height: lHeight
            };
        }

        function _modifierPositionSiChevauchement(aPositionMobile, aPositionSource) {
            if ((aPositionMobile.x + aPositionMobile.width) > GNavigateur.EcranL) {
                aPositionMobile.x = GNavigateur.EcranL - aPositionMobile.width;
            }
            if ((aPositionMobile.y + aPositionMobile.height) > GNavigateur.EcranH) {
                aPositionMobile.y = GNavigateur.EcranH - aPositionMobile.height;
            }
            if (_avecChevauchement(aPositionMobile, aPositionSource)) {
                aPositionMobile.x = aPositionSource.x + aPositionSource.width + 6;
                if (aPositionMobile.x + aPositionMobile.width > GNavigateur.EcranL) {
                    aPositionMobile.x = Math.max(aPositionSource.x - aPositionMobile.width, 1);
                }
            }
            if (aPositionMobile.x + aPositionMobile.width > GNavigateur.EcranL) {
                aPositionMobile.x = GNavigateur.EcranL - aPositionMobile.width;
            }
            if (aPositionMobile.x < 6) {
                aPositionMobile.x = 6;
            }
            if (_avecChevauchement(aPositionMobile, aPositionSource)) {
                aPositionMobile.y = aPositionSource.y + aPositionSource.height + 6;
                if (aPositionMobile.y + aPositionMobile.height > GNavigateur.EcranH) {
                    aPositionMobile.y = Math.max(aPositionSource.y - aPositionMobile.height, 1);
                }
            }
            if (aPositionMobile.y + aPositionMobile.height > GNavigateur.EcranH) {
                aPositionMobile.y = GNavigateur.EcranH - aPositionMobile.height;
            }
        }
        _ObjetPosition.prototype.placerFicheSource = function(aId, aX1Source, aX2Source, aY1Source, aY2Source, aVisible, aDecalage) {
            var lVisible = aVisible === null || aVisible === undefined ? GHtml.getElement(aId).style.visibility === 'visible' : aVisible,
                lDecalage = $.extend({
                    x: 6,
                    y: 0
                }, aDecalage);
            var lPosition = _getPositionElement(aId),
                lPositionSource = {
                    x: aX1Source,
                    y: aY1Source,
                    width: aX2Source - aX1Source,
                    height: aY2Source - aY1Source
                };
            _ramenerPositionDansLAffichage(lPosition);
            if (!lVisible || _avecChevauchement(lPosition, lPositionSource)) {
                lPosition.x = lPositionSource.x + lPositionSource.width;
                if (lPosition.x + lPosition.width + lDecalage.x > GNavigateur.EcranL) {
                    lPosition.x = Math.max(aX1Source - lPosition.width - lDecalage.x, 1);
                } else {
                    lPosition.x += lDecalage.x;
                }
                if (!lVisible) {
                    lPosition.y = lPositionSource.y;
                    if (lPosition.y + lPosition.height + lDecalage.y > GNavigateur.EcranH) {
                        lPosition.y = Math.max(lPositionSource.y + lPositionSource.height - lPosition.height - lDecalage.y, 1);
                    } else {
                        lPosition.y += lDecalage.y;
                    }
                }
            }
            _modifierPositionSiChevauchement(lPosition, lPositionSource);
            _ramenerPositionDansLAffichage(lPosition);
            if (lPosition.x < 10) {
                lPosition.x = 10;
            }
            if (lPosition.y < 10) {
                lPosition.y = 10;
            }
            this.setPosition(aId, Math.max(0, lPosition.x), Math.max(0, lPosition.y), true);
        };
        _ObjetPosition.prototype.deplacerSiChevauchement = function(aIdMobile, aIdReference) {
            var lPosition = _getPositionElement(aIdMobile),
                lPositionSource = _getPositionElement(aIdReference);
            _modifierPositionSiChevauchement(lPosition, lPositionSource);
            this.setPosition(aIdMobile, Math.max(0, lPosition.x), Math.max(0, lPosition.y), true);
        };
        _ObjetPosition.prototype.setScrollTop = function(aId, aScrollTop) {
            var E = GHtml.getElement(aId);
            if (E && GHtml.estElement(E)) {
                E.scrollTop = aScrollTop;
            }
        };
        _ObjetPosition.prototype.setTaille = function(aId, aWidth, aHeight, aFormat) {
            this.setWidth(aId, aWidth, aFormat);
            this.setHeight(aId, aHeight, aFormat);
        };
        _ObjetPosition.prototype.positionDansZone = function(aPosition, aId) {
            var X1 = this.getLeft(aId);
            var X2 = X1 + this.getWidth(aId);
            var Y1 = this.getTop(aId);
            var Y2 = Y1 + this.getHeight(aId);
            return aPosition && (aPosition.x > X1) && (aPosition.x < X2) && (aPosition.y > Y1) && (aPosition.y < Y2);
        };
        _ObjetPosition.prototype.estEnCollision = function(aId1, aId2) {
            var E1 = GHtml.getElement(aId1);
            var E2 = GHtml.getElement(aId2);
            if (!!E1 && !!E2) {
                var x1 = this.getLeft(aId1);
                var y1 = this.getTop(aId1);
                var h1 = this.getHeight(aId1);
                var w1 = this.getWidth(aId1);
                var b1 = y1 + h1;
                var r1 = x1 + w1;
                var x2 = this.getLeft(aId2);
                var y2 = this.getTop(aId2);
                var h2 = this.getHeight(aId2);
                var w2 = this.getWidth(aId2);
                var b2 = y2 + h2;
                var r2 = x2 + w2;
                return !(b1 < y2 || y1 > b2 || r1 < x2 || x1 > r2);
            }
            return false;
        };
        _ObjetPosition.prototype.getPositionEventJQuery = function(aEvent) {
            if (!aEvent) {
                return {
                    x: 0,
                    y: 0
                };
            }
            if (aEvent.pageX !== undefined) {
                return {
                    x: Math.round(aEvent.pageX),
                    y: Math.round(aEvent.pageY)
                };
            }
            if (aEvent.originalEvent && aEvent.originalEvent.changedTouches && aEvent.originalEvent.changedTouches[0]) {
                return {
                    x: aEvent.originalEvent.changedTouches[0].pageX || 0,
                    y: aEvent.originalEvent.changedTouches[0].pageY || 0
                };
            };
            return {
                x: 0,
                y: 0
            };
        };
        _ObjetPosition.prototype.remToPixels = function(aRem) {
            return aRem * require('GStyle.js').getFloatComputedValue(document.documentElement, 'font-size');
        };
        module.exports._ObjetPosition = _ObjetPosition;
        module.exports.GPosition = GPosition;
    },
    fn: "_objetposition.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var lPosition = require('_ObjetPosition.js');
        MethodesObjet.heritagePrototype(ObjetPosition_Mobile, lPosition._ObjetPosition);

        function ObjetPosition_Mobile() {
            this.inheritedCreate();
        }
        ObjetPosition_Mobile.prototype.declencherResize = function(aId, aModificateur) {
            return;
        };
        lPosition.GPosition = new ObjetPosition_Mobile();
        module.exports.ObjetPosition_Mobile = ObjetPosition_Mobile;
        module.exports.GPosition = lPosition.GPosition;
    },
    fn: "objetposition_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (IE.estMobile) {
            module.exports = require('ObjetPosition_Mobile.js').GPosition;
        } else {
            module.exports = require('ObjetPosition_Espace.js').GPosition;
        }
    },
    fn: "gposition.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var lModuleChaine = require('_ObjetChaine.js');
        MethodesObjet.heritagePrototype(ObjetChaine_Mobile, lModuleChaine._ObjetChaine);
        var GChaine = new ObjetChaine_Mobile();

        function ObjetChaine_Mobile() {
            this.inheritedCreate();
        }
        ObjetChaine_Mobile.prototype.composerUrlLienExterne = function(aParam) {
            var lParams = Object.assign({}, aParam);
            lParams.class = lParams.class ? 'link ' + lParams.class : 'link';
            return this.inherited('composerUrlLienExterne', lParams);
        };
        lModuleChaine.GChaine = GChaine;
        Object.assign(module.exports, {
            ObjetChaine_Mobile: ObjetChaine_Mobile,
            GChaine: GChaine
        });
    },
    fn: "objetchaine_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (IE.estMobile) {
            module.exports = require('ObjetChaine_Mobile.js').GChaine;
        } else {
            module.exports = require('ObjetChaine_Espace.js').GChaine;
        }
    },
    fn: "gchaine.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('divers.js');
        require('DeclarationJQuery.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesTableau = require('MethodesTableau.js');
        var Support = require('ObjetSupport.js');
        global.GNavigateur = null;

        function _ObjetNavigateur() {
            this.Nom = 'GNavigateur';
            this.OnEvent = [];
            this.nbBlocageClavier = 0;
            this.interactionUtilisateur = true;
            if (document.body) {
                this.Initialiser(this);
            } else {
                var lThis = this;
                $(document).ready(function() {
                    lThis.Initialiser();
                });
            }
        }
        var lTimerPresenceUtilisateur, lTimerDeclencherVerifierPresenceUtilisateur = null,
            c_dureeInteractionUtilisateur = 10 * 60 * 1000;
        _ObjetNavigateur.prototype.Initialiser = function() {
            this.UserAgent = navigator.userAgent;
            var LIndex = this.UserAgent.lastIndexOf("MSIE");
            this.isIpad = this.UserAgent.lastIndexOf("iPad") !== -1;
            this.isIphone = this.UserAgent.lastIndexOf("iPhone") !== -1;
            this.isAndroid = this.UserAgent.lastIndexOf("Android") !== -1;
            this.isWinMob = this.UserAgent.toLowerCase().lastIndexOf("windows phone") !== -1 || this.UserAgent.toLowerCase().lastIndexOf("windows mobile") !== -1;
            this.isEdge = this.UserAgent.lastIndexOf("Edge") !== -1;
            this.isMacOs = this.UserAgent.search(/Mac\s?OS/gi) > -1;
            if (this.isAndroid) {
                try {
                    var lMatchAndroid = (this.UserAgent).match(/android\s([0-9.]*)/i);
                    if (lMatchAndroid && lMatchAndroid[1]) {
                        this.versionAndroid = lMatchAndroid[1].split('.');
                        [0, 1, 2].forEach(function(aVal) {
                            this.versionAndroid[aVal] = parseInt(this.versionAndroid[aVal] || 0, 10);
                        }.bind(this));
                    }
                } catch (e) {}
            }
            if (this.isIpad || this.isIphone) {
                try {
                    var lMatchIOS = (navigator.appVersion || '').match(/OS (\d+)_(\d+)_?(\d+)?/);
                    if (lMatchIOS) {
                        this.isIOS = true;
                        this.versionIOS = [
                            parseInt(lMatchIOS[1], 10), parseInt(lMatchIOS[2], 10), parseInt(lMatchIOS[3] || 0, 10)
                        ];
                    }
                } catch (e) {}
            }
            if (this.isMacOs) {
                try {
                    var lMatchMacOS = (navigator.appVersion || '').match(/Mac OS X (\d+)_(\d+)_?(\d+)?/);
                    if (lMatchMacOS) {
                        this.versionMacOS = [
                            parseInt(lMatchMacOS[1], 10), parseInt(lMatchMacOS[2], 10), parseInt(lMatchMacOS[3] || 0, 10)
                        ];
                    }
                } catch (e) {}
            }
            if (document.body.parentNode.parentNode.firstChild.nodeValue === null || document.body.parentNode.parentNode.firstChild.nodeValue === undefined) {
                this.IsIE9 = parseInt(this.UserAgent.substring(LIndex + 5, LIndex + 6), 10) === 9;
            }
            try {
                this.IsIE = LIndex !== -1;
            } catch (e) {
                this.IsIE = LIndex !== -1;
            }
            this.IsIE = (LIndex !== -1) || (this.UserAgent.lastIndexOf("Trident") !== -1);
            if (this.IsIE) {
                this.IEVersion = this.UserAgent.match(/MSIE (.*?);/) ? parseInt(this.UserAgent.match(/MSIE (.*?);/)[1], 10) : 0;
                this.IEModeCompatible = this.IEVersion > document.documentMode;
            }
            this.isIETouch = this.IsIE && /Touch/.test(this.UserAgent);
            this.isIE9Mobile = this.IsIE && /Windows Phone OS 7/.test(this.UserAgent);
            this.isTactile = this.isIpad || this.isIphone || this.isAndroid || this.isIETouch;
            this.IsWebKit = this.UserAgent.lastIndexOf('AppleWebKit/') > -1;
            this.IsGecko = !this.IsIE && this.UserAgent.lastIndexOf('Gecko') > -1 && this.UserAgent.lastIndexOf('KHTML') === -1;
            this.IsOpera = Object.prototype.toString.call(window.opera) === '[object Opera]';
            this.isSafari = this.UserAgent.search(/safari/gi) > -1 && this.UserAgent.search(/chrome/gi) === -1;
            if (!this.isTactile && this.isSafari && this.isMacOs && this.UserAgent.lastIndexOf("Macintosh") !== -1 && 'ontouchstart' in window && window.navigator && window.navigator.maxTouchPoints > 1 && !this.isAndroid) {
                this.isIpad = true;
                this.isTactile = true;
            }
            this.withContentEditable = this.IsIE || this.IsOpera || this.IsGecko || (this.IsWebKit && !this.isAndroid && !this.isIphone && !this.isIpad) || (this.IsWebKit && parseInt(this.UserAgent.match(/AppleWebKit\/(\d*)/)[1], 10) >= 534);
            Support.addInit(function() {
                _uniformisationTouch();
                if (Support.supportTouch && (this.isIphone || this.isIpad)) {
                    _emulationContextMenu.call(this);
                }
                if (Support.supportTouch) {
                    document.addEventListener('touchmove', function(aEvent) {
                        if ($(aEvent.target).parents('.IE_draggable').length > 0) {
                            aEvent.preventDefault();
                        }
                    }, {
                        passive: false
                    });
                }
            }.bind(this));
            Invocateur.abonner(ObjetInvocateur.events.eventIOAjax, _surEventIOAjax, this);
            Invocateur.abonner(ObjetInvocateur.events.patience, _surPatience, this);
            if (this.IsIE) {
                Invocateur.evenement('GNavigateur_Init_IE');
            }
            Object.defineProperty(this, 'EcranL', {
                get: function() {
                    return document.body.scrollWidth;
                }
            });
            Object.defineProperty(this, 'EcranH', {
                get: function() {
                    return document.body.scrollHeight;
                }
            });
            Object.defineProperty(this, 'ClientL', {
                get: function() {
                    return document.body.clientWidth;
                }
            });
            Object.defineProperty(this, 'ClientH', {
                get: function() {
                    return document.body.clientHeight;
                }
            });
        };
        _ObjetNavigateur.prototype.ResetCodeTouche = function() {
            this.CodeTouche = null;
            this.ShiftTouche = null;
            this.AltTouche = null;
            this.CtrlTouche = null;
            this.CmdTouche = null;
        };

        function _surEventIOAjax(aParametres) {
            if (aParametres.init || aParametres.actualisation || aParametres.ignorerBlocageClavier) {
                return;
            }
            _surPatience.call(this, !!aParametres.emission);
        }

        function _surPatience(aActiver) {
            this.nbBlocageClavier = this.nbBlocageClavier + (aActiver ? 1 : -1);
            this.nbBlocageClavier = Math.max(0, this.nbBlocageClavier);
        }
        _ObjetNavigateur.prototype.getBloquerClavier = function() {
            return this.nbBlocageClavier > 0;
        };
        _ObjetNavigateur.prototype._surUnload = function(event) {
            var lNavigateur = event.data.instance;
            Invocateur.evenement(ObjetInvocateur.events.surRechargementPage);
            lNavigateur.viderCache();
        };
        _ObjetNavigateur.prototype._surBeforeUnload = function() {
            var lData;
            if (Invocateur) {
                lData = {};
                Invocateur.evenement(ObjetInvocateur.events.autorisationRechargementPage, lData);
                if (lData.message) {
                    return lData.message;
                }
            }
            if (window.GApplication) {
                GApplication._unloadEnCours = true;
                setTimeout(function() {
                    if (window.GApplication) {
                        GApplication._unloadEnCours = false;
                    }
                }, 500);
            }
        };
        _ObjetNavigateur.prototype.finChargementPage = function(event) {
            event.data.instance.chargementTermine = true;
        };
        _ObjetNavigateur.prototype.viderCache = function() {
            this.OnEvent = [];
            if (lTimerPresenceUtilisateur) {
                clearTimeout(lTimerPresenceUtilisateur);
            }
            if (lTimerDeclencherVerifierPresenceUtilisateur) {
                clearTimeout(lTimerDeclencherVerifierPresenceUtilisateur);
            }
        };
        _ObjetNavigateur.prototype._surBlurFenetre = function(aEvent) {
            aEvent.data.instance.ResetCodeTouche();
        };

        function _utilisateurNonPresent() {
            Invocateur.evenement(ObjetInvocateur.events.modificationPresenceUtilisateur, false);
            GNavigateur.interactionUtilisateur = false;
        }

        function _verifierPresenceUtilisateur() {
            if (!GNavigateur.interactionUtilisateur) {
                Invocateur.evenement(ObjetInvocateur.events.modificationPresenceUtilisateur, true);
            }
            GNavigateur.interactionUtilisateur = true;
            if (lTimerPresenceUtilisateur) {
                clearTimeout(lTimerPresenceUtilisateur);
                lTimerPresenceUtilisateur = null;
            }
            lTimerPresenceUtilisateur = setTimeout(_utilisateurNonPresent, c_dureeInteractionUtilisateur);
            $(document).off('click keydown mousemove', _verifierPresenceUtilisateur);
            if (lTimerDeclencherVerifierPresenceUtilisateur) {
                clearTimeout(lTimerDeclencherVerifierPresenceUtilisateur);
                lTimerDeclencherVerifierPresenceUtilisateur = null;
            }
            lTimerDeclencherVerifierPresenceUtilisateur = setTimeout(function() {
                $(document).on('click keydown mousemove', _verifierPresenceUtilisateur);
            }, 1000 * 10);
        }
        _ObjetNavigateur.prototype.getEventInvocateur = function(aGenreEvent) {
            return 'IIE_EventNavigateur_' + aGenreEvent;
        };
        var GPosition = null;

        function _getGPosition() {
            if (!GPosition) {
                GPosition = require('GPosition.js');
            }
            return GPosition;
        }

        function _emulationContextMenu() {
            var lDelai = 500,
                uGestionTouch = {},
                const_margesDeplacementContextMenu = 100;

            function _arreterContextMenu() {
                if (uGestionTouch.timerTouchStart) {
                    clearTimeout(uGestionTouch.timerTouchStart);
                }
                uGestionTouch = {};
            }

            function _activerContextMenu() {
                uGestionTouch.forcerContextMenu = true;
            }

            function _touchstart(event) {
                _arreterContextMenu();
                var lPosition = _getGPosition().getPositionEventJQuery(event);
                uGestionTouch.x = lPosition.x;
                uGestionTouch.y = lPosition.y;
                uGestionTouch.timerTouchStart = setTimeout(_activerContextMenu, lDelai);
            }

            function _toucheend(event) {
                if (uGestionTouch.forcerContextMenu === true) {
                    var lPosition = _getGPosition().getPositionEventJQuery(event);
                    var lAccepterContextMenu = event.target && Math.abs(lPosition.x - uGestionTouch.x) < const_margesDeplacementContextMenu && Math.abs(lPosition.y - uGestionTouch.y) < const_margesDeplacementContextMenu && (!_getGPosition() || _getGPosition().positionDansZone(lPosition, event.target));
                    _arreterContextMenu();
                    if (!lAccepterContextMenu) {
                        return;
                    }
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    var lEvent = $.Event('contextmenu');
                    lEvent.contextMenuSimule = true;
                    GNavigateur.SourisX = lPosition.x;
                    GNavigateur.SourisY = lPosition.y;
                    setTimeout(function() {
                        $(event.target).trigger(lEvent);
                    }, 0);
                }
            }

            function _contextMenu() {
                _arreterContextMenu();
            }
            $(document).on({
                touchstart: _touchstart,
                touchend: _toucheend,
                touchcancel: function() {
                    _arreterContextMenu();
                },
                contextmenu: _contextMenu
            });
        }

        function _uniformisationTouch() {
            var uTouchTimerEnCours = -1,
                uLongTouch = null,
                uLongTouchTimer = -1,
                uLongTouchTimerFin = -1,
                uTouchTimerTouchEnScroll = -1,
                uTimeoutIEClick = -1,
                const_delaiLongTouch = 500,
                const_delaiLongTouchFin = 1500,
                const_margesDeplacementLongTouch = 50,
                const_delaiTouch = 1200,
                const_namespace = 'uniformisationTouch';
            var uTouchStartPourIEClick = null;
            GNavigateur.touchEnCours = false;
            GNavigateur.touchEnScroll = false;

            function _traiterClick(aEventOrigine, aEventSimule) {
                if (uTimeoutIEClick) {
                    clearTimeout(uTimeoutIEClick);
                    uTimeoutIEClick = null;
                }
                if (!uTouchStartPourIEClick || uTouchStartPourIEClick.target !== aEventOrigine.target || Math.abs(aEventSimule.clientX - uTouchStartPourIEClick.x) >= 10 || Math.abs(aEventSimule.clientY - uTouchStartPourIEClick.y) >= 10) {
                    uTouchStartPourIEClick = null;
                    return;
                }
                uTouchStartPourIEClick = null;
                var lOffset = $(aEventOrigine.target).offset();
                var lWidth = $(aEventOrigine.target).width();
                var lHeight = $(aEventOrigine.target).height();
                if (lOffset && ((aEventSimule.pageX >= lOffset.left) && (aEventSimule.pageX <= (lOffset.left + lWidth)) && (aEventSimule.pageY >= lOffset.top) && (aEventSimule.pageY <= (lOffset.top + lHeight)))) {
                    var aNewEventSimule = _creerEvent('ieclick', aEventOrigine);
                    $(aEventOrigine.target).trigger(aNewEventSimule);
                    uTimeoutIEClick = setTimeout(function() {
                        uTimeoutIEClick = null;
                    }, 500);
                }
            }

            function _stopperLongTouch() {
                clearTimeout(uLongTouchTimer);
                clearTimeout(uLongTouchTimerFin);
                uLongTouch = null;
            }

            function _demarrageLongTouch(aEventOrigine, aEventSimule) {
                _stopperLongTouch();
                uLongTouch = {
                    identifiant: aEventSimule.identifiant,
                    x: aEventSimule.clientX,
                    y: aEventSimule.clientY,
                    ok: false
                };
                uLongTouchTimer = setTimeout(function() {
                    if (uLongTouch) {
                        uLongTouch.ok = true;
                    }
                }, const_delaiLongTouch);
                uLongTouchTimerFin = setTimeout(function() {
                    if (uLongTouch) {
                        _finaliserLongTouch(aEventOrigine, aEventSimule, true);
                    }
                }, const_delaiLongTouchFin);
            }

            function _eventDansMargesLongTouch(aEvent) {
                return uLongTouch && Math.abs(aEvent.clientX - uLongTouch.x) < const_margesDeplacementLongTouch && Math.abs(aEvent.clientY - uLongTouch.y) < const_margesDeplacementLongTouch;
            }

            function _finaliserLongTouch(aEventOrigine, aEventSimule, aSurTimer) {
                clearTimeout(uLongTouchTimer);
                clearTimeout(uLongTouchTimerFin);
                if (uLongTouch.ok && uLongTouch.identifiant === aEventSimule.identifiant && _eventDansMargesLongTouch(aEventSimule)) {
                    var lEventSimule = _creerEvent('ielongtouch', aEventSimule);
                    if (aSurTimer) {
                        lEventSimule.surTimer = true;
                    }
                    $(aEventOrigine.target).trigger(lEventSimule);
                }
                _stopperLongTouch();
            }

            function _estTouchEnCours() {
                GNavigateur.touchEnCours = true;
                clearTimeout(uTouchTimerEnCours);
                uTouchTimerEnCours = setTimeout(function() {
                    GNavigateur.touchEnCours = false;
                }, const_delaiTouch);
            }

            function _traiterTouch(event) {
                _estTouchEnCours();
                if (event.originalEvent && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0]) {
                    event.pageX = event.originalEvent.changedTouches[0].pageX || 0;
                    event.pageY = event.originalEvent.changedTouches[0].pageY || 0;
                    event.clientX = event.originalEvent.changedTouches[0].clientX || 0;
                    event.clientY = event.originalEvent.changedTouches[0].clientY || 0;
                    event.screenX = event.originalEvent.changedTouches[0].screenX || 0;
                    event.screenY = event.originalEvent.changedTouches[0].screenY || 0;
                    GNavigateur.SourisX = event.pageX;
                    GNavigateur.SourisY = event.pageY;
                }
            }

            function _creerEvent(aNom, event) {
                var lIdentifiant = 1;
                if (event.originalEvent) {
                    if (event.originalEvent.pointerId) {
                        lIdentifiant = event.originalEvent.pointerId;
                    } else if (event.originalEvent && event.originalEvent.changedTouches && event.originalEvent.changedTouches.length > 0) {
                        lIdentifiant = event.originalEvent.changedTouches[0].identifier;
                    }
                }
                var lEstStylet = event.originalEvent && event.originalEvent.pointerType === 'pen',
                    lEstTouch = (event.originalEvent && event.originalEvent.pointerType === 'touch') || lEstStylet || event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove' || event.type === 'touchcancel' || event.type === 'touchleave';
                if (lEstTouch) {
                    _estTouchEnCours();
                }
                if (!lEstTouch && GNavigateur.touchEnCours && aNom === 'ieclick' && event.type === 'click') {
                    lEstTouch = true;
                }
                var lEvent = jQuery.Event(aNom, {
                    ietype: event.type,
                    identifiant: lIdentifiant,
                    estTouch: lEstTouch,
                    estSouris: !lEstTouch,
                    estStylet: lEstStylet,
                    pageX: event.pageX,
                    pageY: event.pageY,
                    screenX: event.screenX,
                    screenY: event.screenY,
                    offsetX: event.offsetX,
                    offsetY: event.offsetY,
                    clientX: event.clientX,
                    clientY: event.clientY,
                    which: event.which,
                    button: event.button,
                    buttons: event.buttons,
                    metaKey: event.metaKey,
                    altKey: event.altKey,
                    shiftKey: event.shiftKey,
                    relatedTarget: event.relatedTarget,
                    originalEvent: event.originalEvent,
                    view: window
                });
                return lEvent;
            }

            function _handle(event) {
                var lType = event.type.toLowerCase(),
                    lNewType = lType;
                if (GNavigateur.touchEnCours) {
                    if (lType === 'mousedown' || lType === 'mouseup' || lType === 'mousemove') {
                        return;
                    }
                    if (Support.supportTouch && !Support.supportTouchPointerEvent && lType === 'click') {
                        return;
                    }
                }
                if (lType === 'touchstart' || lType === 'touchend' || lType === 'touchmove' || lType === 'touchcancel') {
                    _traiterTouch(event);
                }
                switch (lType) {
                    case 'pointerdown':
                    case 'mousedown':
                    case 'touchstart':
                        uTouchStartPourIEClick = null;
                        if (uTimeoutIEClick) {
                            clearTimeout(uTimeoutIEClick);
                            uTimeoutIEClick = null;
                        }
                        lNewType = 'iedown';
                        break;
                    case 'pointerup':
                    case 'mouseup':
                    case 'touchend':
                        lNewType = 'ieup';
                        break;
                    case 'pointermove':
                    case 'touchmove':
                        if (uLongTouch) {
                            var lEventBidon = _creerEvent('bidonmove', event);
                            if (uLongTouch.identifiant !== lEventBidon.identifiant || !_eventDansMargesLongTouch(lEventBidon)) {
                                _stopperLongTouch();
                            }
                        }
                        return;
                    case 'pointercancel':
                    case 'touchcancel':
                        lNewType = 'iecancel';
                        if (uLongTouch) {
                            _stopperLongTouch();
                        }
                        uTouchStartPourIEClick = null;
                        if (uTimeoutIEClick) {
                            clearTimeout(uTimeoutIEClick);
                            uTimeoutIEClick = null;
                        }
                        break;
                    case 'click':
                        if (event.which !== 1) {
                            return;
                        }
                        if (uTimeoutIEClick) {
                            clearTimeout(uTimeoutIEClick);
                            uTimeoutIEClick = null;
                            return;
                        }
                        lNewType = 'ieclick';
                        break;
                    default:
                        ;
                        return;
                }
                var lEvent = _creerEvent(lNewType, event);
                if ((lType === 'touchstart' || lType === 'pointerdown') && lEvent.estTouch) {
                    clearTimeout(uTouchTimerTouchEnScroll);
                    GNavigateur.touchEnScroll = false;
                    uTouchStartPourIEClick = {
                        target: event.target,
                        x: lEvent.clientX,
                        y: lEvent.clientY
                    };
                }
                $(event.target).trigger(lEvent);
                if ((lType === 'touchend' || lType === 'pointerup') && event.target) {
                    _traiterClick(event, lEvent);
                }
                if (event.target && (lType === 'touchstart' || lType === 'pointerdown') && lEvent.estTouch) {
                    _demarrageLongTouch(event, lEvent);
                }
                if (event.target && uLongTouch && (lType === 'touchend' || lType === 'pointerup') && lEvent.estTouch) {
                    _finaliserLongTouch(event, lEvent);
                }
                if (GNavigateur.touchEnScroll && (lType === 'touchend' || lType === 'pointerup' || lType === 'touchcancel' || lType === 'pointercancel')) {
                    clearTimeout(uTouchTimerTouchEnScroll);
                    uTouchTimerTouchEnScroll = setTimeout(function() {
                        GNavigateur.touchEnScroll = false;
                    }, const_delaiTouch);
                }
            }
            ['touchstart', 'touchend', 'touchmove', 'touchcancel'].forEach(function(type) {
                if (!$.event.special[type]) {
                    $.event.special[type] = {};
                }
                var lOldAdd = $.event.special[type].add;
                $.event.special[type].add = function(handleObj) {
                    if (lOldAdd) {
                        lOldAdd(handleObj);
                    }
                    var old_handler = handleObj.handler;
                    handleObj.handler = function(event) {
                        _traiterTouch(event);
                        return old_handler.apply(this, arguments);
                    };
                };
            });
            var lEvents = [];
            if (Support.supportTouch) {
                lEvents = lEvents.concat(['touchstart', 'touchend', 'touchmove', 'touchcancel']);
                lEvents = lEvents.concat(['mousedown', 'mouseup', 'click']);
            } else if (Support.supportTouchPointerEvent) {
                lEvents = lEvents.concat(['pointerdown', 'pointerup', 'click', 'pointermove', 'pointercancel']);
            } else {
                lEvents = lEvents.concat(['mousedown', 'mouseup', 'click']);
            }
            MethodesTableau.parcourir(lEvents, function(aNom, aIndex) {
                lEvents[aIndex] = aNom + '.' + const_namespace;
            });
            $(document).on(lEvents.join(' '), _handle);
            $(window).on('scroll', function() {
                if (uLongTouch) {
                    clearTimeout(uTouchTimerTouchEnScroll);
                    _stopperLongTouch();
                }
                if (GNavigateur.touchEnCours) {
                    GNavigateur.touchEnScroll = true;
                }
            });
        }
        _ObjetNavigateur.prototype.declarationEvenements = function() {
            try {
                window.onerror = this.SurError;
                document.onclick = this.SurClick;
                document.onkeydown = this.SurKeyDown;
                document.onkeyup = this.SurKeyUp;
                document.onkeypress = this.SurKeyPress;
                document.onmousemove = this.SurMouseMove;
                document.onmouseup = this.SurMouseUp;
                document.onmousedown = this.SurMouseDown;
                document.onselectstart = this.SurSelectStart;
                $(document).on('click dblclick mousedown mouseup mousemove ' + 'keydown keyup keypress ' + 'touchstart touchend touchcancel touchmove ' + 'pointerdown pointerup pointermove ' + 'contextmenu ' + 'iedown ieup ieclick ielongtouch', function(event) {
                    if ((event.type === 'click' || event.type === 'dblclick') && event.which !== 1) {
                        return;
                    }
                    Invocateur.evenement(GNavigateur.getEventInvocateur(event.type), event, this);
                });
                _verifierPresenceUtilisateur();
                var lEventMap = {};
                if (this.SurResize) {
                    lEventMap.resize = this.SurResize;
                }
                if (this.SurScroll) {
                    lEventMap.scroll = this.SurScroll;
                }
                lEventMap.load = this.finChargementPage;
                lEventMap.unload = this._surUnload;
                lEventMap.beforeunload = this._surBeforeUnload;
                lEventMap.blur = this._surBlurFenetre;
                if (this._surOrientationChange) {
                    lEventMap.orientationchange = this._surOrientationChange;
                }
                $(window).on(lEventMap, {
                    instance: this
                });
            } catch (ignore) {}
        };
        module.exports = _ObjetNavigateur;
    },
    fn: "_objetnavigateur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var _ObjetNavigateur = require('_ObjetNavigateur.js');
        var MethodesObjet = require('MethodesObjet.js');
        var GLog = require('IELog.js');

        function ObjetNavigateur_Mobile() {
            this.inheritedCreate();
        }
        MethodesObjet.heritagePrototype(ObjetNavigateur_Mobile, _ObjetNavigateur);
        ObjetNavigateur_Mobile.prototype.SurError = function(AMessage, AUrl, ALigne) {
            GLog.addLog('ObjetNavigateur.SurError : ' + AMessage + '; ' + AUrl + '; Ligne : ' + ALigne, 'ERROR', GLog.genre.Erreur);
        };
        global.GNavigateur = new ObjetNavigateur_Mobile();
        GNavigateur.declarationEvenements();
        module.exports = ObjetNavigateur_Mobile;
    },
    fn: "objetnavigateur_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        ;
    },
    fn: "declarationjournauxcp.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeFormatDureeEnChaine = {
            fdcHeuresMinutes: 0,
            fdcHeuresCentiemes: 1,
            fdcSequences: 2,
            fdcPersonnalise: 3
        };
        module.exports.TypeFormatDureeEnChaine = TypeFormatDureeEnChaine;
    },
    fn: "typeformatdureeenchaine.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');

        function TUtilitaireDuree() {}
        var C_HeuresParJour = 24,
            C_MinutesParHeure = 60,
            C_SecondesParMinute = 60,
            C_MilliSecondesParSeconde = 1000,
            C_MinutesParJour = C_MinutesParHeure * C_HeuresParJour,
            C_SecondesParJour = C_SecondesParMinute * C_MinutesParJour;

        function _get(aVal, aSansArrondi) {
            return aSansArrondi === true ? aVal : Math.round(aVal);
        }
        TUtilitaireDuree.dureeEnHeures = function(aDuree, aSansArrondi) {
            if (MethodesObjet.isNumber(aDuree)) {
                return _get(aDuree * C_HeuresParJour, aSansArrondi);
            }
            return 0;
        };
        TUtilitaireDuree.heuresEnDuree = function(aVal) {
            if (MethodesObjet.isNumber(aVal)) {
                return aVal / C_HeuresParJour;
            }
            return 0;
        };
        TUtilitaireDuree.dureeEnMin = function(aDuree, aSansArrondi) {
            if (MethodesObjet.isNumber(aDuree)) {
                return _get(aDuree * C_MinutesParJour, aSansArrondi);
            }
            return 0;
        };
        TUtilitaireDuree.minEnDuree = function(aVal) {
            if (MethodesObjet.isNumber(aVal)) {
                return aVal / C_MinutesParJour;
            }
            return 0;
        };
        TUtilitaireDuree.dureeEnMs = function(aDuree, aSansArrondi) {
            if (MethodesObjet.isNumber(aDuree)) {
                return _get(aDuree * C_MilliSecondesParSeconde * C_SecondesParJour, aSansArrondi);
            }
            return 0;
        };
        TUtilitaireDuree.msEnDuree = function(aVal) {
            if (MethodesObjet.isNumber(aVal)) {
                return aVal / (C_MilliSecondesParSeconde * C_SecondesParJour);
            }
            return 0;
        };
        TUtilitaireDuree.minEnMs = function(aVal) {
            if (MethodesObjet.isNumber(aVal)) {
                return aVal * C_SecondesParMinute * C_MilliSecondesParSeconde;
            }
            return 0;
        };
        module.exports = TUtilitaireDuree;
    },
    fn: "utilitaireduree.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GLog = require('IELog.js');
        var MethodesObjet = require('MethodesObjet.js');
        var ObjetElement = require('ObjetElement.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var GTraductions = require('ObjetTraduction.js');
        var ObjetTri = require('ObjetTri.js').ObjetTri;
        var TypeDomaine = require('TypeDomaine.js');
        var TypeFormatDureeEnChaine = require('TypeFormatDureeEnChaine.js').TypeFormatDureeEnChaine;
        var TUtilitaireDuree = require('UtilitaireDuree.js');

        function ObjetDate() {
            this.DureeMillisecondes = 1;
            this.DureeSecondes = 1000 * this.DureeMillisecondes;
            this.DureeMinutes = 60 * this.DureeSecondes;
            this.DureeHeures = 60 * this.DureeMinutes;
            this.DureeJours = 24 * this.DureeHeures;
            this.DureeSemaines = 7 * this.DureeJours;
            this.semainesParAn = 52;
            this.aujourdhui = new Date();
            this.demain = new Date();
            this.demain.setDate(this.demain.getDate() + 1);
            this.hier = new Date();
            this.hier.setDate(this.hier.getDate() - 1);
            this.parametres = {
                afficherSemainesCalendaires: null,
                formatDureeEnChaine: TypeFormatDureeEnChaine.fdcHeuresMinutes
            };
        }
        ObjetDate.separateurHeureDelphi = 'h';
        ObjetDate.prototype.SetDonnees = function(APremierLundi, aPremiereDate, aDerniereDate, APlacesParJour, APlacesParHeure, ADureeSequence, APremiereHeure, AListeHeures1, AListeHeures2, aJoursOuvres, aJour) {
            this.PremierLundi = APremierLundi;
            this.premiereDate = aPremiereDate;
            this.derniereDate = aDerniereDate;
            this.PlacesParJour = APlacesParJour;
            this.PlacesParHeure = APlacesParHeure;
            this.DureeSequence = ADureeSequence;
            this.PremiereHeure = APremiereHeure;
            this.ListeHeures = AListeHeures1 || new ObjetListeElements();
            this.ListeHeuresFin = AListeHeures2;
            this.joursOuvres = aJoursOuvres || new TypeDomaine(true, 7);
            this.jour = this.GetDateDemiJour(aJour || new Date());
        };
        ObjetDate.prototype.setParametresDate = function(aParams) {
            Object.assign(this.parametres, aParams);
            return this;
        };
        ObjetDate.prototype.estUnJourOuvre = function(aDate) {
            return this.joursOuvres.GetValeur(GDate.GetJourDeDate(aDate) + 1);
        };
        ObjetDate.prototype.estDateEgale = function(ADate1, ADate2) {
            return (ADate1 - ADate2) === 0;
        };
        ObjetDate.prototype.estJourEgal = function(ADate1, ADate2) {
            return ADate1 && ADate2 && (ADate1.getDate() === ADate2.getDate()) && (ADate1.getMonth() === ADate2.getMonth()) && (ADate1.getFullYear() === ADate2.getFullYear());
        };
        ObjetDate.prototype.estJourSemaineEgal = function(ADate1, ADate2) {
            return (ADate1.getDay() === ADate2.getDay()) && (ADate1.getMonth() === ADate2.getMonth()) && (ADate1.getFullYear() === ADate2.getFullYear());
        };
        ObjetDate.prototype.estJourCourant = function(aDate, aBorner) {
            return this.estJourEgal(aDate, this.getDateCourante(aBorner));
        };
        ObjetDate.prototype.estAvantJourCourant = function(aDate, aBorner) {
            return (aDate - this.getDateCourante(aBorner)) < 0;
        };
        ObjetDate.prototype.estAvantJour = function(aDate1, aDate2) {
            return (aDate1 - aDate2) < 0;
        };
        ObjetDate.prototype.estDateValide = function(aDate) {
            return MethodesObjet.isDate(aDate) && !isNaN(aDate.getTime());
        };
        ObjetDate.prototype.getDateJour = function(aDate, aBorner) {
            var lDate = aDate;
            if (!this.estDateValide(aDate)) {
                lDate = new Date();
            }
            if (aBorner) {
                lDate = this.getDateBornee();
            }
            return new Date(lDate.getFullYear(), lDate.getMonth(), lDate.getDate());
        };
        ObjetDate.prototype.getDateBornee = function(aDate) {
            if (aDate < this.premiereDate && !this.estJourEgal(aDate, this.premiereDate)) {
                return new Date(this.premiereDate.getTime());
            }
            if (aDate > this.derniereDate && !this.estJourEgal(aDate, this.derniereDate)) {
                return new Date(this.derniereDate.getTime());
            }
            return aDate;
        };
        ObjetDate.prototype.getDateCourante = function(aBorner) {
            var lDate = new Date();
            lDate = new Date(lDate.getFullYear(), lDate.getMonth(), lDate.getDate());
            return aBorner === false ? lDate : this.getDateBornee(lDate);
        };
        ObjetDate.prototype.getDateHeureCourante = function() {
            return this.getDateBornee(new Date());
        };
        ObjetDate.prototype.dateEntreLesDates = function(aDate, aBorneDateDebut, aBorneDateFin, aComparaisonTime) {
            if (!aDate) {
                return false;
            }
            return (!aBorneDateDebut || aDate >= aBorneDateDebut || (aComparaisonTime !== true && this.estJourEgal(aDate, aBorneDateDebut))) && (!aBorneDateFin || aDate <= aBorneDateFin || (aComparaisonTime !== true && this.estJourEgal(aDate, aBorneDateFin)));
        };
        ObjetDate.prototype.estDateJourAvant = function(aDate1, aDate2) {
            return aDate1 < aDate2 &&
                this.estDateValide(aDate1) &&
                this.estDateValide(aDate2) &&
                !this.estJourEgal(aDate1, aDate2);
        };
        ObjetDate.prototype.estDateDansAnneeScolaire = function(aDate) {
            return this.dateEntreLesDates(aDate, this.premiereDate, this.derniereDate);
        };
        ObjetDate.prototype.GetDateDemiJour = function(ADate) {
            return new Date(ADate.getFullYear(), ADate.getMonth(), ADate.getDate(), 12);
        };
        ObjetDate.prototype.premierJourOuvreDeLaSemaine = function(aNrSemaine) {
            return IE.Cycles.datePremierJourOuvreCycle(aNrSemaine);
        };
        ObjetDate.prototype.dernierJourOuvreDeLaSemaine = function(aNrSemaine) {
            return IE.Cycles.dateDernierJourOuvreCycle(aNrSemaine);
        };
        ObjetDate.prototype.GetJour = function(ADate, N) {
            return new Date(ADate.getFullYear(), ADate.getMonth(), ADate.getDate(), N === null || N === undefined ? 0 : 24 * N);
        };
        ObjetDate.prototype.GetJourDeSemaine = function(ADate, B) {
            return (7 + ADate.getDay() - (B ? this.PremierLundi.getDay() : 1)) % 7;
        };
        ObjetDate.prototype.GetSemaineSuivante = function(ADate, N) {
            return new Date(ADate.getTime() + (N === null || N === undefined ? 1 : N) * this.DureeSemaines);
        };
        ObjetDate.prototype.GetJourSuivant = function(ADate, N) {
            if (!ADate || !ADate.getTime) {
                return null;
            }
            var lDate = new Date(ADate.getTime()),
                lNombreJours = MethodesObjet.isNumber(N) ? N : 1;
            lDate.setDate(lDate.getDate() + lNombreJours);
            if (Math.abs(lNombreJours) === 1 && ADate.getDate() === lDate.getDate()) {
                var lDateCorrigee = new Date(ADate.getTime());
                lDateCorrigee.setHours(ADate.getHours() + 1);
                if (lDateCorrigee.getDate() !== ADate.getDate()) {
                    lDateCorrigee.setHours(ADate.getHours() - 1);
                }
                lDateCorrigee.setDate(lDateCorrigee.getDate() + lNombreJours);
                lDate = lDateCorrigee;
            }
            return lDate;
        };
        ObjetDate.prototype.EstUnJourDuWE = function(AAnnee, AMois, AJour) {
            var D = new Date(AAnnee, AMois, AJour).getDay();
            return (D === 0) || (D === 6);
        };
        ObjetDate.prototype.GetNombreJoursDuMois = function(AAnnee, AMois) {
            AMois = (AMois + 1) % 12;
            if (AMois === 0) {
                AAnnee++;
            }
            return new Date(AAnnee, AMois, 0).getDate();
        };
        ObjetDate.prototype.GetPremierJourDuMois = function(AAnnee, AMois) {
            return new Date(AAnnee, AMois, 1, 12);
        };
        ObjetDate.prototype.GetPremierLundiDuMois = function(AAnnee, AMois) {
            var LJour = this.GetPremierJourDuMois(AAnnee, AMois),
                lJourPremierLundi = this.PremierLundi ? GDate.GetJourDeSemaine(this.PremierLundi) : 0;
            return this.GetJourSuivant(LJour, (lJourPremierLundi - (7 + GDate.GetJourDeSemaine(LJour))) % 7);
        };
        ObjetDate.prototype.GetDernierJourDuMois = function(AAnnee, AMois) {
            return new Date(AAnnee, AMois, this.GetNombreJoursDuMois(AAnnee, AMois), 12);
        };
        ObjetDate.prototype.EstUnJourDuMois = function(AAnnee, AMois, AJour) {
            return new Date(AAnnee, AMois, AJour).getMonth() === AMois;
        };
        ObjetDate.prototype.estHeureIdentique = function(aDate1, aDate2) {
            return (aDate1.getHours() === aDate2.getHours()) && (aDate1.getMinutes() === aDate2.getMinutes());
        };
        ObjetDate.prototype.JourEstDansLaPeriode = function(AAnnee, AMois, AJour, ADateDebut, ADateFin) {
            var LDate = new Date(AAnnee, AMois, AJour);
            return (LDate >= ADateDebut) && (LDate <= ADateFin);
        };
        ObjetDate.prototype.StrMoisCourt = function(AAnnee, AMois, AAvecAnnee) {
            return GTraductions.getValeur('MoisCourt')[AMois] + (AAvecAnnee ? '&nbsp;' + AAnnee : '');
        };
        ObjetDate.prototype.NombreMoisSurPeriode = function(ADateDebut, ADateFin) {
            return 12 * (ADateFin.getFullYear() - ADateDebut.getFullYear()) + (ADateFin.getMonth() - ADateDebut.getMonth()) + 1;
        };
        ObjetDate.prototype.nombresSemainesDansLAnnee = function() {
            var lDay = this.GetJourDeDate(new Date(this.PremierLundi.getFullYear(), 0, 1));
            return (lDay === 3) || (lDay === 2 && this.PremierLundi.estAnneeBissextile()) ? this.semainesParAn + 1 : this.semainesParAn;
        };
        ObjetDate.prototype.GetJourDeDate = function(ADate) {
            return (ADate.getDay() + 7 - 1) % 7;
        };
        ObjetDate.prototype.getFuseau = function(aDate) {
            return aDate ? aDate.getTimezoneOffset() / 60 : 0;
        };
        ObjetDate.prototype.getEcartFuseau = function(aDate1, aDate2) {
            return this.getFuseau(aDate1) - this.getFuseau(aDate2);
        };
        ObjetDate.prototype.GetSemaine = function(aDate) {
            return IE.Cycles.cycleDeLaDate(aDate || new Date());
        };
        ObjetDate.prototype.getNbrJoursDepuisPremiereLundi = function(aDate) {
            return this.getNbrJoursEntreDeuxDates(this.PremierLundi, aDate);
        };
        ObjetDate.prototype.getNbrJoursEntreDeuxDates = function(aDateDebut, aDateFin) {
            if (!aDateDebut || !aDateDebut.getFullYear || !aDateFin || !aDateFin.getFullYear) {
                return 0;
            }
            return Date.UTC(aDateFin.getFullYear(), aDateFin.getMonth(), aDateFin.getDate()) / this.DureeJours - Date.UTC(aDateDebut.getFullYear(), aDateDebut.getMonth(), aDateDebut.getDate()) / this.DureeJours;
        };
        ObjetDate.prototype.GetSemaineCalendaire = function() {
            return 1 + Math.round((this.PremierLundi - new Date(this.PremierLundi.getFullYear(), 0, 1)) / this.DureeSemaines);
        };
        ObjetDate.prototype.semaineToCalendaire = function(aSemaine, aAfficherSemainesCalendaires) {
            var lNumero = aAfficherSemainesCalendaires;
            if (!MethodesObjet.isNumber(lNumero)) {
                lNumero = this.parametres.afficherSemainesCalendaires;
            }
            if (!MethodesObjet.isNumber(lNumero)) {
                lNumero = 1;
            }
            return lNumero < 0 ? ((aSemaine - 1) + (this.GetSemaineCalendaire() - 1)) % this.nombresSemainesDansLAnnee() + 1 : aSemaine + lNumero - 1;
        };
        ObjetDate.prototype.strDateCalendaireDeSemaine = function(aSemaine, avecDuAu) {
            var lNumeroSemaine = this.semaineToCalendaire(aSemaine);
            var H = [];
            H.push(GTraductions.getValeur('Semaine') + ' ' + lNumeroSemaine);
            if (avecDuAu === true) {
                var lDateDeb = this.FormatDate(this.premierJourOuvreDeLaSemaine(aSemaine), '%JJ/%MM/%AAAA');
                var lDateFin = this.FormatDate(this.dernierJourOuvreDeLaSemaine(aSemaine), '%JJ/%MM/%AAAA');
                H.push(', ');
                H.push(GTraductions.getValeur('Du') + ' ' + lDateDeb);
                H.push(' ');
                H.push(GTraductions.getValeur('Au') + ' ' + lDateFin);
            }
            return H.join('');
        };
        ObjetDate.prototype.GetDifferenceJours = function(aDate1, aDate2) {
            var lJour1 = parseInt(this.GetJour(aDate1) / this.DureeJours, 10);
            var lJour2 = parseInt(this.GetJour(aDate2) / this.DureeJours, 10);
            return lJour1 - lJour2;
        };
        ObjetDate.prototype.GetDifferenceJoursPar24h = function(aDate1, aDate2) {
            var duree_ms = aDate1 - aDate2;
            return parseInt(duree_ms / this.DureeJours, 10);
        };
        ObjetDate.prototype.GetDifferenceTime = function(aDate1, aDate2) {
            var duree_ms = aDate1 - aDate2;
            var reste_heures = duree_ms - (parseInt(duree_ms / this.DureeJours, 10) * this.DureeJours);
            var nb_heures = parseInt(reste_heures / this.DureeHeures, 10);
            var reste_minutes = duree_ms - (parseInt(duree_ms / this.DureeHeures, 10) * this.DureeHeures);
            var nb_minutes = parseInt(reste_minutes / this.DureeMinutes, 10);
            var reste_secondes = duree_ms - (parseInt(duree_ms / this.DureeMinutes, 10) * this.DureeMinutes);
            var nb_secondes = parseInt(reste_secondes / this.DureeSecondes, 10);
            return (nb_heures < 10 ? '0' : '') + nb_heures + ':' + (nb_minutes < 10 ? '0' : '') + nb_minutes + ':' + (nb_secondes < 10 ? '0' : '') + nb_secondes;
        };
        ObjetDate.prototype.FormatDate = function(ADate, AFormat) {
            if (!ADate || !MethodesObjet.isDate(ADate)) {
                GLog.addLog('ObjetDate.prototype.FormatDate, ADate n\'est pas une date : ' + ADate, null, GLog.genre.Erreur);
                return '';
            }
            if (!AFormat || !MethodesObjet.isString(AFormat)) {
                GLog.addLog('ObjetDate.prototype.FormatDate, AFormat n\'est pas format valide : ' + AFormat, null, GLog.genre.Erreur);
                return '';
            }
            AFormat = AFormat.replace(/\[(.*?)\]/ig, !this.estJourEgal(ADate, this.aujourdhui) ? !this.estJourEgal(ADate, this.demain) ? !this.estJourEgal(ADate, this.hier) ? '$1' : GTraductions.getValeur('Hier') : GTraductions.getValeur('Demain') : GTraductions.getValeur('Aujourdhui'));
            var LHour = ADate.getHours();
            var LMinute = ADate.getMinutes();
            var LSecond = ADate.getSeconds();
            var LDay = this.GetJourDeDate(ADate);
            var LDate = ADate.getDate();
            var LMonth = ADate.getMonth() + 1;
            var LYear = ADate.getFullYear();
            AFormat = AFormat.replace('%hh', (LHour < 10 ? '0' : '') + LHour);
            AFormat = AFormat.replace('%xh', LHour);
            AFormat = AFormat.replace('%mm', (LMinute < 10 ? '0' : '') + LMinute);
            AFormat = AFormat.replace('%ss', (LSecond < 10 ? '0' : '') + LSecond);
            AFormat = AFormat.replace('%sh', GTraductions.getValeur('date.separateurHeure'));
            AFormat = AFormat.replace('%JJJJ', GTraductions.getValeur('Jours')[LDay]);
            AFormat = AFormat.replace('%Jjjj', (GTraductions.getValeur('Jours')[LDay]).ucfirst());
            AFormat = AFormat.replace('%JJJ', GTraductions.getValeur('JoursCourt')[LDay]);
            AFormat = AFormat.replace('%Jjj', (GTraductions.getValeur('JoursCourt')[LDay]).ucfirst());
            AFormat = AFormat.replace('%JJ', (LDate < 10 ? '0' : '') + LDate);
            AFormat = AFormat.replace('%J', LDate);
            AFormat = AFormat.replace('%MMMM', GTraductions.getValeur('Mois')[LMonth - 1]);
            AFormat = AFormat.replace('%MMM', GTraductions.getValeur('MoisCourt')[LMonth - 1]);
            AFormat = AFormat.replace('%Mmm', (GTraductions.getValeur('MoisCourt')[LMonth - 1]).ucfirst());
            AFormat = AFormat.replace('%MM', (LMonth < 10 ? '0' : '') + LMonth);
            AFormat = AFormat.replace('%AAAA', LYear);
            AFormat = AFormat.replace('%AA', (LYear % 100 < 10 ? '0' : '') + LYear % 100);
            return AFormat;
        };
        ObjetDate.prototype.estDateParticulier = function(ADate) {
            return this.estJourEgal(ADate, this.aujourdhui) || this.estJourEgal(ADate, this.demain) || this.estJourEgal(ADate, this.hier);
        };
        ObjetDate.prototype.FormatDureeEnMillisecondes = function(aDureeEnMillisecondes, aFormat, aForcerFormatDuree) {
            if (!MethodesObjet.isNumber(aDureeEnMillisecondes)) {
                return '';
            }
            var lFormatDureeEnChaine = this.parametres.formatDureeEnChaine;
            if (MethodesObjet.isNumber(aForcerFormatDuree)) {
                lFormatDureeEnChaine = aForcerFormatDuree;
            }
            switch (lFormatDureeEnChaine) {
                case TypeFormatDureeEnChaine.fdcHeuresMinutes:
                case TypeFormatDureeEnChaine.fdcPersonnalise:
                    var lFormat = aFormat || '%hh%sh%mm';
                    var LHour = null,
                        LMinute = null;
                    lFormat = lFormat.replace('%sh', GTraductions.getValeur('date.separateurHeure'));
                    if ((lFormat.lastIndexOf('%hh') > -1) || (lFormat.lastIndexOf('%xh') > -1)) {
                        LHour = parseInt(aDureeEnMillisecondes / this.DureeHeures, 10);
                        lFormat = lFormat.replace('%hh', (LHour < 10 ? '0' : '') + LHour);
                        lFormat = lFormat.replace('%xh', LHour);
                        aDureeEnMillisecondes = aDureeEnMillisecondes - LHour * this.DureeHeures;
                    }
                    if (lFormat.lastIndexOf('%mm') > -1 || (lFormat.lastIndexOf('%xm') > -1)) {
                        LMinute = parseInt(aDureeEnMillisecondes / this.DureeMinutes, 10);
                        lFormat = lFormat.replace('%mm', (LMinute < 10 ? '0' : '') + LMinute);
                        lFormat = lFormat.replace('%xm', LMinute);
                        aDureeEnMillisecondes = aDureeEnMillisecondes - LMinute * this.DureeMinutes;
                    }
                    var LSecond = parseInt(aDureeEnMillisecondes / this.DureeSecondes, 10);
                    lFormat = lFormat.replace('%ss', (LSecond < 10 ? '0' : '') + LSecond);
                    return lFormat;
                case TypeFormatDureeEnChaine.fdcHeuresCentiemes:
                    var lNbHeures = Math.floor(aDureeEnMillisecondes / GDate.DureeHeures),
                        lMinutesEnCentiemes = Math.floor((aDureeEnMillisecondes / GDate.DureeHeures - lNbHeures) * 100);
                    if (lMinutesEnCentiemes < 10) {
                        lMinutesEnCentiemes = '0' + lMinutesEnCentiemes;
                    }
                    return lNbHeures + ',' + lMinutesEnCentiemes;
                case TypeFormatDureeEnChaine.fdcSequences:
                    var lNbSequences = Math.round10(aDureeEnMillisecondes / TUtilitaireDuree.dureeEnMs(this.DureeSequence), -2);
                    var lPartieEntiere = Math.floor(lNbSequences),
                        lPartieDecimale = Math.floor((lNbSequences - lPartieEntiere) * 100);
                    if (lPartieDecimale < 10) {
                        lPartieDecimale = '0' + lPartieDecimale;
                    }
                    return lPartieEntiere + ',' + lPartieDecimale;
                default:
                    ;
            }
            return '';
        };
        ObjetDate.prototype.dureeEnMillisecondesToHMS = function(aDureeEnMillisecondes) {
            var lResult = {
                heures: 0,
                minutes: 0,
                secondes: 0
            };
            if (!MethodesObjet.isNumber(aDureeEnMillisecondes)) {
                return lResult;
            }
            lResult.heures = parseInt(aDureeEnMillisecondes / this.DureeHeures, 10);
            aDureeEnMillisecondes = aDureeEnMillisecondes - lResult.heures * this.DureeHeures;
            lResult.minutes = parseInt(aDureeEnMillisecondes / this.DureeMinutes, 10);
            aDureeEnMillisecondes = aDureeEnMillisecondes - lResult.minutes * this.DureeMinutes;
            lResult.secondes = parseInt(aDureeEnMillisecondes / this.DureeSecondes, 10);
            return lResult;
        };
        ObjetDate.prototype.HMSToDureeEnMillisecondes = function(aHMS) {
            var lHMS = {
                heures: (aHMS && aHMS.heures) ? aHMS.heures : 0,
                minutes: (aHMS && aHMS.minutes) ? aHMS.minutes : 0,
                secondes: (aHMS && aHMS.secondes) ? aHMS.secondes : 0
            };
            return lHMS.heures * this.DureeHeures + lHMS.minutes * this.DureeMinutes + lHMS.secondes * this.DureeSecondes;
        };
        ObjetDate.prototype.formatDureeEnPlaces = function(aPlaces, aFormat, aForcerFormatDuree) {
            if (!MethodesObjet.isNumber(aPlaces)) {
                return '';
            }
            return this.FormatDureeEnMillisecondes(this.nombrePlacesEnMillisecondes(aPlaces), aFormat, aForcerFormatDuree);
        };
        ObjetDate.prototype.enCentiemeDHeure = function(aDureeEnMillisecondes) {
            var lDuree = parseInt(aDureeEnMillisecondes, 10);
            if (!MethodesObjet.isNumber(lDuree)) {
                return '';
            }
            var lNbHeures = Math.floor(lDuree / GDate.DureeHeures),
                lMinutesEnCentiemes = Math.floor((lDuree / GDate.DureeHeures - lNbHeures) * 100);
            if (lMinutesEnCentiemes < 10) {
                lMinutesEnCentiemes = '0' + lMinutesEnCentiemes;
            }
            return lNbHeures + ',' + lMinutesEnCentiemes;
        };
        ObjetDate.prototype.strSemaine = function(aNumeroSemaine, aFormatDebut, aFormatFin, aSeparateur1, aSeparateur2, aSeparateur3) {
            var lDateDeb = this.FormatDate(this.premierJourOuvreDeLaSemaine(aNumeroSemaine), aFormatDebut);
            var lDateFin = this.FormatDate(this.dernierJourOuvreDeLaSemaine(aNumeroSemaine), aFormatFin);
            return (aSeparateur1 || '') + lDateDeb + (aSeparateur2 || '') + lDateFin + (aSeparateur3 || '');
        };
        ObjetDate.prototype.strDomaine = function(aDomaine, aFormatDebut, aFormatFin, aSeparateur1, aSeparateur2, aSeparateur3) {
            var lDateDeb = this.FormatDate(IE.Cycles.datePremierJourOuvreCycle(aDomaine.GetPremierePosition()), aFormatDebut);
            var lDateFin = this.FormatDate(IE.Cycles.dateDernierJourOuvreCycle(aDomaine.GetDernierePosition()), aFormatFin);
            return (aSeparateur1 || '') + lDateDeb + (aSeparateur2 || '') + lDateFin + (aSeparateur3 || '');
        };

        function estMinuit(aDate) {
            var lHeure = aDate.getHours();
            var lMin = aDate.getMinutes();
            return (lHeure === 0 && lMin === 0);
        }
        ObjetDate.prototype.strDates = function(aDateDebut, aDateFin, aParams) {
            var lParams = {
                sansHoraire: false,
                formatDate: '%J %MMMM'
            };
            $.extend(lParams, aParams);
            var formatHeure = ' %hh' + GTraductions.getValeur('date.separateurHeure') + '%mm';
            var lResult = [];
            if (GDate.getNbrJoursEntreDeuxDates(aDateDebut, aDateFin) >= 1) {
                if (lParams.sansHoraire) {
                    lResult.push(this.FormatDate(aDateDebut, GTraductions.getValeur('Du') + ' ' + lParams.formatDate));
                    lResult.push(' ');
                    lResult.push(this.FormatDate(aDateFin, GTraductions.getValeur('Au') + ' ' + lParams.formatDate));
                } else {
                    lResult.push(this.FormatDate(aDateDebut, GTraductions.getValeur('Du') + ' ' + lParams.formatDate) + ' ' + (estMinuit.call(this, aDateDebut) ? '' : GDate.FormatDate(aDateDebut, GTraductions.getValeur('A') + formatHeure)));
                    lResult.push(' ');
                    lResult.push(this.FormatDate(aDateFin, GTraductions.getValeur('Au') + ' ' + lParams.formatDate) + ' ' + (estMinuit.call(this, aDateFin) ? '' : GDate.FormatDate(aDateFin, GTraductions.getValeur('A') + formatHeure)));
                }
            } else if (aDateDebut - aDateFin === 0) {
                lResult.push(GDate.FormatDate(aDateDebut, '[' + GTraductions.getValeur('Le') + ' ' + lParams.formatDate + ']'));
                lResult.push(' ');
                lResult.push(lParams.sansHoraire ? '' : (estMinuit.call(this, aDateFin) ? '' : GDate.FormatDate(aDateFin, GTraductions.getValeur('A') + formatHeure)));
            } else {
                lResult.push(GDate.FormatDate(aDateDebut, '[' + GTraductions.getValeur('Le') + ' ' + lParams.formatDate + ']'));
                lResult.push(' ');
                lResult.push(lParams.sansHoraire ? '' : this.FormatDate(aDateDebut, GTraductions.getValeur('De') + formatHeure) + ' ' + GDate.FormatDate(aDateFin, GTraductions.getValeur('A') + formatHeure));
            }
            return lResult.join('');
        };

        function _dateEnPlaceJour(ADate, AEstDateFin) {
            var I, lNbMinutesLibelleHeure, lNbMinutesLibelleHeureDebut = _GetNbrMinutes_LibelleHeure.call(this, 0);
            for (I = this.PlacesParJour - 1; I >= 0; I--) {
                lNbMinutesLibelleHeure = _GetNbrMinutes_LibelleHeure.call(this, I);
                if (lNbMinutesLibelleHeure < lNbMinutesLibelleHeureDebut) {
                    lNbMinutesLibelleHeure += 24 * 60;
                }
                if (_GetNbrMinutes.call(this, ADate) - (AEstDateFin ? 1 : 0) >= lNbMinutesLibelleHeure) {
                    break;
                }
            }
            return Math.max(I, 0);
        }

        function _getHrMinDeListeHeures(aPlace, aEstPlaceFin) {
            var lResult = {
                h: 0,
                m: 0,
                ok: false
            };
            var lChaine = null;
            var lElement = null;
            if (aEstPlaceFin) {
                lElement = this.ListeHeuresFin ? this.ListeHeuresFin.GetElement(aPlace) : this.ListeHeures.GetElement(aPlace + 1);
            } else {
                lElement = this.ListeHeures.GetElement(aPlace);
            }
            if (lElement) {
                lChaine = lElement.GetLibelle();
            }
            if (!lChaine || !lChaine.indexOf || !lChaine.split) {
                return lResult;
            }
            var lTab = lChaine.split(ObjetDate.separateurHeureDelphi);
            if (lTab.length < 2) {
                lTab = lChaine.split(':');
                if (lTab.length < 2) {
                    return lResult;
                }
            };
            lResult.h = parseInt(lTab[0], 0) || 0;
            if (lTab.length > 1) {
                lResult.m = parseInt(lTab[1], 0) || 0;
            }
            lResult.ok = true;
            return lResult;
        }
        ObjetDate.prototype.PlaceAnnuelleEnDate = function(APlace, AEstDateFin) {
            var LJour = this.GetJourSuivant(IE.Cycles.dateDebutPremierCycle(), Math.floor(APlace / this.PlacesParJour));
            var lHrMin = _getHrMinDeListeHeures.call(this, APlace % this.PlacesParJour, AEstDateFin);
            return new Date(LJour.getFullYear(), LJour.getMonth(), LJour.getDate(), lHrMin.h, lHrMin.m);
        };
        ObjetDate.prototype.DateEnPlaceAnnuelle = function(aDate, aEstDateFin) {
            var lPlaceAnnuelleJour = this.getNbrJoursEntreDeuxDates(IE.Cycles.dateDebutPremierCycle(), aDate) * this.PlacesParJour;
            if (lPlaceAnnuelleJour < 0) {
                return 0;
            }
            return lPlaceAnnuelleJour + _dateEnPlaceJour.call(this, aDate, aEstDateFin);
        };
        ObjetDate.prototype.PlaceParJourEnDate = function(APlace) {
            var LJour = this.getDateCourante();
            var lHrMin = _getHrMinDeListeHeures.call(this, APlace);
            return new Date(LJour.getFullYear(), LJour.getMonth(), LJour.getDate(), lHrMin.h, lHrMin.m);
        };
        ObjetDate.prototype.DateEnPlaceHebdomadaire = function(ADate, AEstDateFin) {
            var lParam = {},
                lJour = 0;
            if (IE.Cycles.dateEnCycleEtJourCycle(ADate, null, lParam)) {
                lJour = lParam.indice;
            } else if (IE.Cycles.dateEnCycleEtJourCycle(ADate, IE.Cycles.recherche.autoriserPrecedents, lParam)) {
                return lParam.indice * this.PlacesParJour - 1;
            }
            return lJour * this.PlacesParJour + _dateEnPlaceJour.call(this, ADate, AEstDateFin);
        };

        function _GetNbrMinutes(ADate) {
            return ADate.getHours() * 60 + ADate.getMinutes();
        }

        function _GetNbrMinutes_LibelleHeure(I) {
            var lHrMin = _getHrMinDeListeHeures.call(this, I);
            return lHrMin.h * 60 + lHrMin.m;
        }
        ObjetDate.prototype.placeEnDate = function(aNumeroCycle, aPlace, aEstPlaceFin, aInstanceCycles) {
            var lCycles = aInstanceCycles || IE.Cycles,
                lNumeroJour = Math.floor(aPlace / this.PlacesParJour),
                lNumeroCycle = Math.max(1, aNumeroCycle),
                LJour = lCycles.jourCycleEnDate(lNumeroJour, lNumeroCycle);
            var lPlaceJour = aPlace % this.PlacesParJour;
            if (lNumeroJour > lCycles.cache.datesAfficheesParCycle[lNumeroCycle].length) {
                lPlaceJour = this.PlacesParJour - 1;
            }
            var lHrMin = _getHrMinDeListeHeures.call(this, lPlaceJour, aEstPlaceFin);
            return lHrMin && lHrMin.ok ? new Date(LJour.getFullYear(), LJour.getMonth(), LJour.getDate(), lHrMin.h, lHrMin.m) : new Date(LJour.getFullYear(), LJour.getMonth(), LJour.getDate());
        };
        ObjetDate.prototype.placeEnDateHeure = function(aPlace, aEstPlaceFin) {
            return this.placeEnDate(1, aPlace, aEstPlaceFin);
        };
        ObjetDate.prototype.nombrePlacesEnDuree = function(aPlaces) {
            if (!MethodesObjet.isNumber(aPlaces)) {
                return 0;
            }
            return aPlaces * this.DureeSequence / this.PlacesParHeure;
        };
        ObjetDate.prototype.minutesEnNombrePlaces = function(aDureeEnMinutes) {
            if (!MethodesObjet.isNumber(aDureeEnMinutes)) {
                return 0;
            }
            var lDuree1PlaceEnMinutes = TUtilitaireDuree.dureeEnMin(this.nombrePlacesEnDuree(1));
            var lResult = aDureeEnMinutes / lDuree1PlaceEnMinutes;
            if (lResult !== parseInt(lResult, 10)) {}
            return lResult;
        };
        ObjetDate.prototype.nombrePlacesEnMillisecondes = function(aPlaces) {
            return TUtilitaireDuree.dureeEnMs(this.nombrePlacesEnDuree(aPlaces));
        };
        ObjetDate.prototype.getDateDeChaine = function(aChaine, aDateDebut, aDateFin) {
            aDateDebut = aDateDebut || this.PremierLundi;
            aDateFin = aDateFin || this.derniereDate;
            var T = aChaine.split('/');
            if (T[2] && (T[2].length === 2)) {
                T[2] = '20' + T[2];
            }
            var lDate = new Date(T[2], T[1] - 1, T[0]);
            var lEstValide = ((lDate.getFullYear() === parseInt(T[2])) || (lDate.getFullYear() === parseInt('20' + T[2], 10))) && (lDate.getMonth() === Number(T[1] - 1)) && (lDate.getDate() === parseInt(T[0])) && (lDate >= aDateDebut) && (lDate <= aDateFin);
            return lEstValide ? lDate : null;
        };
        ObjetDate.prototype.getListeSemaines = function(aSemaineDebut, aSemaineFin, aGenreTri) {
            var lLibelle, LDateDeb, LDateFin;
            var lSemaineCourante = IE.Cycles.cycleDeLaDate(new Date());
            var lListeSemaines = new ObjetListeElements();
            var lSemaineDeb = Math.max(0, aSemaineDebut);
            var lSemaineFin = Math.min(IE.Cycles.nombreCyclesAnneeScolaire(), aSemaineFin);
            for (var lSemaine = lSemaineDeb; lSemaine <= lSemaineFin; lSemaine++) {
                if (lSemaine === lSemaineCourante) {
                    lLibelle = GTraductions.getValeur('SemaineEnCours');
                } else if (lSemaine === lSemaineCourante + 1) {
                    lLibelle = GTraductions.getValeur('SemaineSuivante');
                } else if (lSemaine === lSemaineCourante - 1) {
                    lLibelle = GTraductions.getValeur('SemainePrecedente');
                } else {
                    LDateDeb = GDate.FormatDate(IE.Cycles.dateDebutCycle(lSemaine), '%JJ/%MM');
                    LDateFin = GDate.FormatDate(IE.Cycles.dateDernierJourOuvreCycle(lSemaine), '%JJ/%MM');
                    lLibelle = GTraductions.getValeur('Du') + ' ' + LDateDeb + ' ' + GTraductions.getValeur('Au') + ' ' + LDateFin;
                }
                lListeSemaines.AddElement(new ObjetElement(lLibelle, null, lSemaine));
            }
            lListeSemaines.setTri([ObjetTri.init('Genre')]);
            lListeSemaines.trier(aGenreTri);
            return lListeSemaines;
        };
        ObjetDate.prototype.getListeMoisAPartirDeDate = function(aDateDebut, aDateFin) {
            var lListeMois = new ObjetListeElements(),
                lElement, lAnnee, lMois, lDate, lVrai = true,
                lPremiereDate = aDateDebut || this.premiereDate,
                lDerniereDate = aDateFin || this.derniereDate,
                lAnneeDebut = lPremiereDate.getFullYear(),
                lMoisDebut = lPremiereDate.getMonth(),
                lAnneeFin = lDerniereDate.getFullYear(),
                lMoisFin = lDerniereDate.getMonth();
            if (lPremiereDate.getTime() <= lDerniereDate.getTime()) {
                lMois = lMoisDebut;
                lAnnee = lAnneeDebut;
                while (lVrai) {
                    if (lMois >= lMoisFin && lAnnee >= lAnneeFin || lAnnee > lAnneeFin) {
                        lVrai = false;
                    }
                    lDate = new Date(lAnnee, lMois);
                    lElement = new ObjetElement(GDate.FormatDate(lDate, '%MMMM %AAAA').ucfirst());
                    lElement.annee = lAnnee;
                    lElement.mois = lMois;
                    lDate = this.GetPremierJourDuMois(lAnnee, lMois);
                    lElement.dateDebut = lDate >= lPremiereDate ? lDate : lPremiereDate;
                    lDate = this.GetDernierJourDuMois(lAnnee, lMois);
                    lElement.dateFin = lDate <= lDerniereDate ? lDate : lDerniereDate;
                    lListeMois.AddElement(lElement);
                    lMois += 1;
                    if (lMois > 11) {
                        lAnnee += 1;
                        lMois = 0;
                    }
                }
            }
            return lListeMois;
        };
        ObjetDate.prototype.parseHeureMinute = function(aValue, aDureeMinEnMin, aDureeMaxEnMin) {
            function _estUnChiffre(aCar) {
                return /[0-9]/.test(aCar);
            }
            var lResult = {
                heure: 0,
                minute: 0,
                ok: false,
                erreurFormat: true,
                erreurMinMax: false
            };
            var lDureeMinEnMin = aDureeMinEnMin || 0,
                lDureeMaxEnMin = aDureeMaxEnMin || 24 * 60;
            if (!MethodesObjet.isString(aValue)) {
                return lResult;
            }
            var lValue = aValue.trim(),
                lHeure, lMinute = 0,
                lIndice = 0,
                lZeroDevant = false;
            if (!_estUnChiffre(lValue[lIndice]) && lValue[lIndice] !== '+') {
                return lResult;
            }
            if (lValue[lIndice] === '+') {
                lIndice += 1;
                while (lIndice < lValue.length && lValue[lIndice] === ' ') {
                    lIndice += 1;
                }
            }
            lZeroDevant = lValue[lIndice] === '0';
            lHeure = 0;
            while (lIndice < lValue.length && _estUnChiffre(lValue[lIndice])) {
                lHeure = lHeure * 10 + parseInt(lValue[lIndice], 10);
                lIndice += 1;
            }
            while (lIndice < lValue.length && !_estUnChiffre(lValue[lIndice])) {
                lIndice += 1;
            }
            if (lIndice >= lValue.length) {
                if (lZeroDevant || (lHeure >= 100 && lHeure * 60 >= lDureeMaxEnMin)) {
                    lMinute = lHeure % 100;
                    lHeure = Math.floor(lHeure / 100);
                } else {
                    lMinute = 0;
                }
            } else {
                lMinute = 0;
                while (lIndice < lValue.length && _estUnChiffre(lValue[lIndice])) {
                    lMinute = lMinute * 10 + parseInt(lValue[lIndice], 10);
                    lIndice += 1;
                }
                while (lIndice < lValue.length && !_estUnChiffre(lValue[lIndice])) {
                    lIndice += 1;
                }
                if (lIndice < lValue.length) {
                    return lResult;
                }
            }
            if (lMinute >= 60 || lMinute < 0 || lHeure < 0) {
                return lResult;
            }
            lResult.heure = lHeure;
            lResult.minute = lMinute;
            if ((lHeure * 60 + lMinute) < lDureeMinEnMin || (lHeure * 60 + lMinute) >= lDureeMaxEnMin) {
                lResult.erreurMinMax = true;
                return lResult;
            }
            lResult.ok = true;
            return lResult;
        };
        var GDate = new ObjetDate();
        module.exports.ObjetDate = ObjetDate;
        module.exports.GDate = GDate;
    },
    fn: "objetdate.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GDate = require('ObjetDate.js').GDate;
        var ObjetElement = require('ObjetElement.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var TypeDomaine = require('TypeDomaine.js');
        var TypeDroits = {
            estEnConsultation: 1,
            cours: {
                domaineConsultationEDT: 1,
                avecReservationCreneauxLibres: 1,
                modifierMatieres: 1,
                modifierMatieresCoursEPIEtAP: 1,
                modifierClasses: 1,
                modifierProfesseurs: 1,
                modifierSalles: 1,
                modifierMateriels: 1,
                creerCours: 1,
                creerCoursPermanenceFeuilleAppel: 1,
                deplacerCours: 1,
                estSemaineModifiable: 1,
                estGestionnaireSalle: 1,
                estGestionnaireMateriel: 1,
                avecMateriel: 1,
                avecFicheCoursConseil: 1,
                masquerPartiesDeClasse: 1,
                afficherElevesDetachesDansCours: 1
            },
            eleves: {
                voirTousLesEleves: 1,
                consulterIdentiteEleve: 1,
                consulterFichesResponsables: 1,
                consulterPhotosEleves: 1,
                avecSaisieParcoursPedagogique: 1,
                avecAffectationElevesGroupesNonGAEV: 1,
                avecAffectationElevesGroupesGAEV: 1,
                avecSaisieProjetIndividuel: 1,
                avecSaisieAttestations: 1
            },
            communication: {
                toutesClasses: 0,
                avecDiscussion: 1,
                discussionInterdit: 0,
                avecDiscussionPersonnels: 1,
                avecDiscussionProfesseurs: 1,
                avecDiscussionParents: 1,
                avecDiscussionEleves: 1,
                avecMessageInstantane: 1,
                avecContactVS: 1,
                lancerAlertesPPMS: 1,
                estDestinataireChat: 1,
                avecDiscussionAvancee: 1
            },
            absences: {
                domaineRecapitulatifAbsences: 1,
                avecSaisieAppelEtVS: 1,
                avecSaisieAppel: 1,
                avecSaisieCours: 1,
                avecSaisieAbsenceOuverte: 1,
                avecSaisieHorsCours: 1,
                avecSaisieSurGrille: 1,
                avecSaisieSurGrilleAppelProf: 1,
                avecSaisieAbsence: 1,
                avecSaisieRetard: 1,
                avecSaisiePassageInfirmerie: 1,
                avecSaisieExclusion: 1,
                avecSaisiePunition: 1,
                avecSaisieObservation: 1,
                avecConsultationDefautCarnet: 1,
                avecSaisieDefautCarnet: 1,
                avecSaisieObservationsParents: 1,
                avecSaisieEncouragements: 1,
                avecAccesAuxEvenementsAutresCours: 1,
                avecSaisieAbsencesToutesPermanences: 1,
                listeDatesSaisieAbsence: 1,
                avecSaisieAbsencesGrilleAbsencesRepas: 1,
                avecSaisieAbsencesGrilleAbsencesInternat: 1,
                avecSuiviAbsenceRetard: 1,
                avecSaisieMotifRetard: 1
            },
            competence: {
                avecSaisieEvaluations: 1,
                avecSaisieItems: 1,
                avecValidationCompetences: 1
            },
            agenda: {
                avecSaisieAgenda: 1
            },
            actualite: {
                avecSaisieActualite: 1
            },
            listeDiffusion: {
                avecPublication: 1
            },
            casierNumerique: {
                avecSaisieDocumentsCasiers: 1
            },
            dossierVS: {
                creerDossiersVS: 1,
                modifierDossiersVS: 1,
                saisieMotifsDossiersVS: 1,
                publierDossiersVS: 1,
                consulterMemosEleve: 1,
                saisirMemos: 1
            },
            dispenses: {
                saisie: 1
            },
            incidents: {
                acces: 1,
                uniquementMesIncidentsSignales: 1,
                saisie: 1,
                publier: 1
            },
            punition: {
                avecPublicationPunitions: 1,
                acces: 1,
                saisie: 1,
                avecRecapPunitions: 1,
                avecRecapSanctions: 1
            },
            creerMotifIncidentPunitionSanction: 1,
            stage: {
                autoriserEditionToutesOffresStages: 1
            },
            cahierDeTexte: {
                avecSaisieCahierDeTexte: 1,
                creerCategoriesDeCahierDeTexte: 1,
                avecSaisiePieceJointe: 1,
                tailleMaxPieceJointe: 1
            },
            notation: {
                avecSaisieDevoirs: 1,
                avecSaisieDevoirsNotes: 1
            },
            compte: {
                avecSaisieIdentifiant: 1,
                avecSaisieMotDePasse: 1,
                avecSaisieMotDePasseEleve: 1,
                avecInformationsPersonnelles: 1,
                avecSaisieInfosPersoCoordonnees: 1,
                avecSaisieInfosPersoAutorisations: 1
            },
            intendance: {
                avecDemandeTravauxIntendance: 1,
                uniquementMesTravauxIntendance: 1,
                avecExecutionTravauxIntendance: 1,
                avecDemandeTachesSecretariat: 1,
                uniquementMesTachesSecretariat: 1,
                avecExecutionTachesSecretariat: 1
            },
            services: {
                avecCreationSousServices: 1,
                avecModificationCoefGeneral: 1
            },
            trombinoscope: {
                autoriseAConsulterPhotosDeTousLesEleves: 1
            },
            autoriserImpression: 1,
            fonctionnalites: {
                gestionBrevet: 1,
                gestionProgrammesBO: 1,
                gestionStages: 1,
                gestionIPR: 1,
                appelSaisirMotifJustifDAbsence: 1,
                gestionTwitter: 1,
                gestionBulletinClasse: 1,
                gestionNathan: 1,
                gestionPunitions: 1,
                gestionInfirmerie: 1,
                gestionPermanence: 1,
                gestionAbsencesDemiPension: 1,
                gestionAbsencesInternat: 1,
                gestionEtendueEleves: 1,
                gestionEleves: 1,
                gestionPersonnels: 1,
                forcerARInfos: 1,
                gestionSondageAnonyme: 1,
                gestionAbsenceDJParUtilisateur: 1,
                attestationEtendue: 1,
                afficherProjetsAccompagnement: 1,
                saisieEtendueAbsenceDepuisAppel: 1
            },
            avecSaisieAppreciationsGenerales: 1,
            assistantSaisieAppreciations: 1,
            tailleMaxDocJointEtablissement: 1,
            tailleMaxRenduTafEleve: 1,
            tailleMaxUpload: 1
        };
        MethodesObjet.indenterEnumere(TypeDroits);

        function ObjetDroitsPN() {
            this.init();
            this.initDroitsSession();
        }
        ObjetDroitsPN.prototype.get = function(aGenreDroit) {
            var lEstEnConsultation = GApplication.getModeExclusif();
            switch (aGenreDroit) {
                case TypeDroits.estEnConsultation:
                    return lEstEnConsultation;
                case TypeDroits.tailleMaxUpload:
                    return 50 * 1024 * 1024;
                case TypeDroits.cours.domaineConsultationEDT:
                    return this._droits.cours.domaineConsultationEDT;
                case TypeDroits.cours.avecReservationCreneauxLibres:
                    return this._droits.cours.avecReservationCreneauxLibres && !lEstEnConsultation;
                case TypeDroits.cours.modifierMatieres:
                    return this._droits.cours.modifierMatieres && !lEstEnConsultation;
                case TypeDroits.cours.modifierMatieresCoursEPIEtAP:
                    return this._droits.cours.modifierMatieresCoursEPIEtAP && !lEstEnConsultation;
                case TypeDroits.cours.modifierClasses:
                    return this._droits.cours.modifierClasses && !lEstEnConsultation;
                case TypeDroits.cours.modifierProfesseurs:
                    return this._droits.cours.modifierProfesseurs && !lEstEnConsultation;
                case TypeDroits.cours.modifierSalles:
                    return this._droits.cours.modifierSalles && !lEstEnConsultation;
                case TypeDroits.cours.modifierMateriels:
                    return this._droits.cours.modifierMateriels && !lEstEnConsultation;
                case TypeDroits.cours.deplacerCours:
                    return this._droits.cours.deplacerCours && !lEstEnConsultation;
                case TypeDroits.cours.creerCours:
                    return this._droits.cours.creerCours && !lEstEnConsultation;
                case TypeDroits.cours.creerCoursPermanenceFeuilleAppel:
                    return this._droits.cours.creerCoursPermanenceFeuilleAppel && !lEstEnConsultation;
                case TypeDroits.cours.estSemaineModifiable:
                    if (lEstEnConsultation) {
                        return false;
                    }
                    if (this._droits.cours.modificationNonLimiteAuxSemaine) {
                        return true;
                    }
                    if (!this._droits.cours.domaineModificationCours) {
                        return false;
                    }
                    return this._droits.cours.domaineModificationCours.GetValeur(arguments[1]);
                case TypeDroits.cours.estGestionnaireSalle:
                    return this._droits.cours.estGestionnaireSalle && !lEstEnConsultation;
                case TypeDroits.cours.estGestionnaireMateriel:
                    return this._droits.cours.estGestionnaireMateriel && !lEstEnConsultation;
                case TypeDroits.cours.avecMateriel:
                    return this._droits.cours.avecMateriel;
                case TypeDroits.cours.avecFicheCoursConseil:
                    return this._droits.cours.avecFicheCoursConseil;
                case TypeDroits.cours.masquerPartiesDeClasse:
                    return this._droits.cours.masquerPartiesDeClasse;
                case TypeDroits.cours.afficherElevesDetachesDansCours:
                    return this._droits.cours.afficherElevesDetachesDansCours;
                case TypeDroits.eleves.voirTousLesEleves:
                    return this._droits.VoirTousLesEleves;
                case TypeDroits.eleves.consulterIdentiteEleve:
                    return this._droits.ConsulterIdentiteEleve;
                case TypeDroits.eleves.consulterFichesResponsables:
                    return this._droits.ConsulterFichesResponsables;
                case TypeDroits.eleves.consulterPhotosEleves:
                    return this._droits.ConsulterPhotosEleves;
                case TypeDroits.eleves.avecSaisieParcoursPedagogique:
                    return this._droits.avecSaisieParcoursPedagogique && !lEstEnConsultation;
                case TypeDroits.eleves.avecAffectationElevesGroupesNonGAEV:
                    return this._droits.AvecAffectationElevesGroupesNonGAEV && !lEstEnConsultation;
                case TypeDroits.eleves.avecAffectationElevesGroupesGAEV:
                    return this._droits.AvecAffectationElevesGroupesGAEV && !lEstEnConsultation;
                case TypeDroits.eleves.avecSaisieProjetIndividuel:
                    return this._droits.AvecSaisieProjetIndividuel && !lEstEnConsultation;
                case TypeDroits.eleves.avecSaisieAttestations:
                    return this._droits.AvecSaisieAttestations && !lEstEnConsultation;
                case TypeDroits.communication.toutesClasses:
                    return this._droits.AutoriserCommunicationsToutesClasses;
                case TypeDroits.communication.avecDiscussion:
                    return this._droits.AvecDiscussion;
                case TypeDroits.communication.discussionInterdit:
                    return this._droits.discussionInterdit;
                case TypeDroits.communication.avecDiscussionPersonnels:
                    return this._droits.AvecDiscussionPersonnels;
                case TypeDroits.communication.avecDiscussionProfesseurs:
                    return this._droits.AvecDiscussionProfesseurs;
                case TypeDroits.communication.avecDiscussionParents:
                    return this._droits.AvecDiscussionParents;
                case TypeDroits.communication.avecDiscussionEleves:
                    return this._droits.AvecDiscussionEleves;
                case TypeDroits.communication.avecMessageInstantane:
                    return this._droits.avecMessageInstantane && !lEstEnConsultation;
                case TypeDroits.communication.avecContactVS:
                    return this._droits.AvecContactVS && !lEstEnConsultation;
                case TypeDroits.communication.lancerAlertesPPMS:
                    return this._droits.lancerAlertesPPMS && !lEstEnConsultation;
                case TypeDroits.communication.estDestinataireChat:
                    return this._droits.estDestinataireChat;
                case TypeDroits.communication.avecDiscussionAvancee:
                    return this._droits.AvecDiscussionAvancee;
                case TypeDroits.absences.domaineRecapitulatifAbsences:
                    return this._droits.DomaineRecapitulatifAbsences;
                case TypeDroits.absences.avecSaisieAppelEtVS:
                    return this._droits.AvecSaisieAppelEtVS;
                case TypeDroits.absences.avecSaisieAppel:
                    return this._droits.AvecSaisieAppel;
                case TypeDroits.absences.avecSaisieCours:
                    return this._droits.AvecSaisieCours;
                case TypeDroits.absences.avecSaisieAbsenceOuverte:
                    return this._droits.AvecSaisieAbsenceOuverte;
                case TypeDroits.absences.avecSaisieHorsCours:
                    return this._droits.AvecSaisieHorsCours;
                case TypeDroits.absences.avecSaisieSurGrille:
                    return this._droits.AvecSaisieSurGrille;
                case TypeDroits.absences.avecSaisieSurGrilleAppelProf:
                    return this._droits.AvecSaisieSurGrilleAppelProf;
                case TypeDroits.absences.avecSaisieAbsence:
                    return this._droits.AvecSaisieAbsence;
                case TypeDroits.absences.avecSaisieRetard:
                    return this._droits.AvecSaisieRetard;
                case TypeDroits.absences.avecSaisiePassageInfirmerie:
                    return this._droits.AvecSaisiePassageInfirmerie;
                case TypeDroits.absences.avecSaisieExclusion:
                    return this._droits.AvecSaisieExclusion;
                case TypeDroits.absences.avecSaisiePunition:
                    return this._droits.AvecSaisiePunition;
                case TypeDroits.absences.avecSaisieObservation:
                    return this._droits.AvecSaisieObservation;
                case TypeDroits.absences.avecConsultationDefautCarnet:
                    return this._droits.AvecConsultationDefautCarnet;
                case TypeDroits.absences.avecSaisieDefautCarnet:
                    return this._droits.AvecSaisieDefautCarnet;
                case TypeDroits.absences.avecSaisieObservationsParents:
                    return this._droits.AvecSaisieObservationsParents;
                case TypeDroits.absences.avecSaisieEncouragements:
                    return this._droits.AvecSaisieEncouragements;
                case TypeDroits.absences.avecAccesAuxEvenementsAutresCours:
                    return this._droits.AvecAccesAuxEvenementsAutresCours;
                case TypeDroits.absences.avecSaisieAbsencesToutesPermanences:
                    return this._droits.AvecSaisieAbsencesToutesPermanences;
                case TypeDroits.absences.listeDatesSaisieAbsence:
                    return MethodesObjet.dupliquer(this._droits.listeDatesSaisieAbsence) || new ObjetListeElements();
                case TypeDroits.absences.avecSaisieAbsencesGrilleAbsencesRepas:
                    return this._droits.AvecSaisieAbsencesGrilleAbsencesRepas;
                case TypeDroits.absences.avecSaisieAbsencesGrilleAbsencesInternat:
                    return this._droits.AvecSaisieAbsencesGrilleAbsencesInternat;
                case TypeDroits.absences.avecSuiviAbsenceRetard:
                    return this._droits.AvecSuiviAbsenceRetard;
                case TypeDroits.absences.avecSaisieMotifRetard:
                    return this._droits.AvecSaisieMotifRetard;
                case TypeDroits.competence.avecSaisieEvaluations:
                    return this._droits.AvecSaisieEvaluations && !lEstEnConsultation;
                case TypeDroits.competence.avecSaisieItems:
                    return this._droits.AvecSaisieItems && !lEstEnConsultation;
                case TypeDroits.competence.avecValidationCompetences:
                    return this._droits.AvecValidationCompetences && !lEstEnConsultation;
                case TypeDroits.agenda.avecSaisieAgenda:
                    return this._droits.AvecSaisieAgenda && !lEstEnConsultation;
                case TypeDroits.actualite.avecSaisieActualite:
                    return this._droits.AvecSaisieActualite && !lEstEnConsultation;
                case TypeDroits.listeDiffusion.avecPublication:
                    return this._droits.avecPublicationListeDiffusion && !lEstEnConsultation;
                case TypeDroits.casierNumerique.avecSaisieDocumentsCasiers:
                    return this._droits.avecSaisieDocumentsCasiers && !lEstEnConsultation;
                case TypeDroits.dossierVS.creerDossiersVS:
                    return this._droits.CreerDossiersVS && !lEstEnConsultation;
                case TypeDroits.dossierVS.modifierDossiersVS:
                    return this._droits.ModifierDossiersVS && !lEstEnConsultation;
                case TypeDroits.dossierVS.saisieMotifsDossiersVS:
                    return this._droits.SaisieMotifsDossiersVS && !lEstEnConsultation;
                case TypeDroits.dossierVS.publierDossiersVS:
                    return this._droits.PublierDossiersVS && !lEstEnConsultation;
                case TypeDroits.dossierVS.consulterMemosEleve:
                    return this._droits.ConsulterMemosEleve;
                case TypeDroits.dossierVS.saisirMemos:
                    return this._droits.SaisirMemos && !lEstEnConsultation;
                case TypeDroits.dispenses.saisie:
                    return this._droits.avecSaisieDispense && !lEstEnConsultation;
                case TypeDroits.incidents.acces:
                    return this._droits.incidents.acces;
                case TypeDroits.incidents.saisie:
                    return this._droits.incidents.saisie && !lEstEnConsultation;
                case TypeDroits.incidents.uniquementMesIncidentsSignales:
                    return this._droits.incidents.uniquementMesIncidentsSignales;
                case TypeDroits.incidents.publier:
                    return this._droits.incidents.publier && !lEstEnConsultation;
                case TypeDroits.incidents:
                    return {
                        acces: this._droits.incidents.acces, uniquementMesIncidentsSignales: this._droits.incidents.uniquementMesIncidentsSignales, saisie: this._droits.incidents.saisie && !lEstEnConsultation, publier: this._droits.incidents.publier && !lEstEnConsultation
                    };
                case TypeDroits.punition.avecPublicationPunitions:
                    return this._droits.AvecPublicationPunitions;
                case TypeDroits.punition.acces:
                    return this._droits.avecAccesPunitions;
                case TypeDroits.punition.saisie:
                    return this._droits.avecSaisiePunitions && !lEstEnConsultation;
                case TypeDroits.creerMotifIncidentPunitionSanction:
                    return this._droits.avecCreerMotifIncidentPunitionSanction && !lEstEnConsultation;
                case TypeDroits.punition.avecRecapPunitions:
                    return this._droits.avecRecapPunitions;
                case TypeDroits.punition.avecRecapSanctions:
                    return this._droits.avecRecapSanctions;
                case TypeDroits.punition:
                    return {
                        acces: this._droits.avecAccesPunitions, saisie: this._droits.avecSaisiePunitions && !lEstEnConsultation, avecPublicationPunitions: this._droits.AvecPublicationPunitions && !lEstEnConsultation, creerMotifIncidentPunitionSanction: this._droits.avecCreerMotifIncidentPunitionSanction && !lEstEnConsultation
                    };
                case TypeDroits.stage.autoriserEditionToutesOffresStages:
                    return this._droits.autoriserEditionToutesOffresStages && !lEstEnConsultation;
                case TypeDroits.cahierDeTexte.avecSaisieCahierDeTexte:
                    return this._droits.avecSaisieCahierDeTexte && !lEstEnConsultation;
                case TypeDroits.cahierDeTexte.creerCategoriesDeCahierDeTexte:
                    return this._droits.creerCategoriesDeCahierDeTexte && !lEstEnConsultation;
                case TypeDroits.cahierDeTexte.avecSaisiePieceJointe:
                    return this._droits.avecSaisiePieceJointeCahierDeTexte && !lEstEnConsultation;
                case TypeDroits.cahierDeTexte.tailleMaxPieceJointe:
                    return Math.min(this._droits.tailleMaxPieceJointeCahierDeTexte, this.get(TypeDroits.tailleMaxUpload));
                case TypeDroits.notation.avecSaisieDevoirs:
                    return this._droits.AvecSaisieDevoirs && !lEstEnConsultation;
                case TypeDroits.notation.avecSaisieDevoirsNotes:
                    return this._droits.avecSaisieDevoirsNotes && !lEstEnConsultation;
                case TypeDroits.compte.avecSaisieIdentifiant:
                    return this._droits.compte.avecSaisieIdentifiant && !lEstEnConsultation;
                case TypeDroits.compte.avecSaisieMotDePasse:
                    return this._droits.compte.avecSaisieMotDePasse && !lEstEnConsultation;
                case TypeDroits.compte.avecSaisieMotDePasseEleve:
                    return this._droits.compte.avecSaisieMotDePasseEleve && !lEstEnConsultation;
                case TypeDroits.compte.avecInformationsPersonnelles:
                    return this._droits.compte.avecInformationsPersonnelles;
                case TypeDroits.compte.avecSaisieInfosPersoCoordonnees:
                    return this._droits.compte.avecSaisieInfosPersoCoordonnees && !lEstEnConsultation;
                case TypeDroits.compte.avecSaisieInfosPersoAutorisations:
                    return this._droits.compte.avecSaisieInfosPersoAutorisations && !lEstEnConsultation;
                case TypeDroits.intendance.avecDemandeTravauxIntendance:
                    return this._droits.intendance.avecDemandeTravauxIntendance && !lEstEnConsultation;
                case TypeDroits.intendance.uniquementMesTravauxIntendance:
                    return this._droits.intendance.uniquementMesTravauxIntendance && !lEstEnConsultation;
                case TypeDroits.intendance.avecExecutionTravauxIntendance:
                    return this._droits.intendance.avecExecutionTravauxIntendance && !lEstEnConsultation;
                case TypeDroits.intendance.avecDemandeTachesSecretariat:
                    return this._droits.intendance.avecDemandeTachesSecretariat && !lEstEnConsultation;
                case TypeDroits.intendance.uniquementMesTachesSecretariat:
                    return this._droits.intendance.uniquementMesTachesSecretariat && !lEstEnConsultation;
                case TypeDroits.intendance.avecExecutionTachesSecretariat:
                    return this._droits.intendance.avecExecutionTachesSecretariat && !lEstEnConsultation;
                case TypeDroits.services.avecCreationSousServices:
                    return this._droits.services.avecCreationSousServices && !lEstEnConsultation;
                case TypeDroits.services.avecModificationCoefGeneral:
                    return this._droits.services.avecModificationCoefGeneral && !lEstEnConsultation;
                case TypeDroits.trombinoscope.autoriseAConsulterPhotosDeTousLesEleves:
                    return this._droits.autoriseAConsulterPhotosDeTousLesEleves;
                case TypeDroits.avecSaisieAppreciationsGenerales:
                    return this._droits.avecSaisieAppreciationsGenerales && !lEstEnConsultation;
                case TypeDroits.assistantSaisieAppreciations:
                    return this._droits.AssistantSaisieAppreciations && !lEstEnConsultation;
                case TypeDroits.tailleMaxDocJointEtablissement:
                    return Math.min(this._droits.tailleMaxDocJointEtablissement, this.get(TypeDroits.tailleMaxUpload));
                case TypeDroits.tailleMaxRenduTafEleve:
                    return Math.min(this._droits.tailleMaxRenduTafEleve, this.get(TypeDroits.tailleMaxUpload));
                case TypeDroits.autoriserImpression:
                    return this._droits.autoriserImpression;
                case TypeDroits.fonctionnalites.gestionBrevet:
                    return this._droitsSession.fonctionnalites.gestionBrevet;
                case TypeDroits.fonctionnalites.gestionProgrammesBO:
                    return this._droitsSession.fonctionnalites.gestionProgrammesBO;
                case TypeDroits.fonctionnalites.gestionStages:
                    return this._droitsSession.fonctionnalites.gestionStages;
                case TypeDroits.fonctionnalites.gestionIPR:
                    return this._droitsSession.fonctionnalites.gestionIPR;
                case TypeDroits.fonctionnalites.appelSaisirMotifJustifDAbsence:
                    return this._droitsSession.fonctionnalites.appelSaisirMotifJustifDAbsence;
                case TypeDroits.fonctionnalites.saisieEtendueAbsenceDepuisAppel:
                    return this._droitsSession.fonctionnalites.saisieEtendueAbsenceDepuisAppel;
                case TypeDroits.fonctionnalites.gestionTwitter:
                    return this._droitsSession.fonctionnalites.gestionTwitter;
                case TypeDroits.fonctionnalites.gestionBulletinClasse:
                    return this._droitsSession.fonctionnalites.gestionBulletinClasse;
                case TypeDroits.fonctionnalites.gestionNathan:
                    return this._droitsSession.fonctionnalites.gestionNathan;
                case TypeDroits.fonctionnalites.gestionPunitions:
                    return this._droitsSession.fonctionnalites.gestionPunitions;
                case TypeDroits.fonctionnalites.gestionInfirmerie:
                    return this._droitsSession.fonctionnalites.gestionInfirmerie;
                case TypeDroits.fonctionnalites.gestionPermanence:
                    return this._droitsSession.fonctionnalites.gestionPermanence;
                case TypeDroits.fonctionnalites.gestionAbsencesDemiPension:
                    return this._droitsSession.fonctionnalites.gestionAbsencesDemiPension;
                case TypeDroits.fonctionnalites.gestionAbsencesInternat:
                    return this._droitsSession.fonctionnalites.gestionAbsencesInternat;
                case TypeDroits.fonctionnalites.gestionEtendueEleves:
                    return this._droitsSession.fonctionnalites.gestionEtendueEleves;
                case TypeDroits.fonctionnalites.gestionEleves:
                    return this._droitsSession.fonctionnalites.gestionEleves;
                case TypeDroits.fonctionnalites.gestionPersonnels:
                    return this._droitsSession.fonctionnalites.gestionPersonnels;
                case TypeDroits.fonctionnalites.forcerARInfos:
                    return this._droitsSession.fonctionnalites.forcerARInfos;
                case TypeDroits.fonctionnalites.gestionSondageAnonyme:
                    return this._droitsSession.fonctionnalites.gestionSondageAnonyme;
                case TypeDroits.fonctionnalites.gestionAbsenceDJParUtilisateur:
                    return this._droitsSession.fonctionnalites.gestionAbsenceDJParUtilisateur;
                case TypeDroits.fonctionnalites.attestationEtendue:
                    return this._droitsSession.fonctionnalites.attestationEtendue;
                case TypeDroits.fonctionnalites.afficherProjetsAccompagnement:
                    return this._droitsSession.fonctionnalites.afficherProjetsAccompagnement;
                default:
                    ;
                    return false;
            }
        };
        ObjetDroitsPN.prototype.init = function() {
            this._droits = {
                AssistantSaisieAppreciations: false,
                VoirTousLesEleves: false,
                ConsulterIdentiteEleve: false,
                ConsulterFichesResponsables: false,
                ConsulterPhotosEleves: false,
                avecSaisieParcoursPedagogique: false,
                AvecAffectationElevesGroupesNonGAEV: false,
                AvecAffectationElevesGroupesGAEV: false,
                AvecSaisieProjetIndividuel: false,
                AvecSaisieAttestations: false,
                AutoriserCommunicationsToutesClasses: false,
                AvecDiscussion: false,
                discussionInterdit: false,
                AvecDiscussionPersonnels: false,
                AvecDiscussionProfesseurs: false,
                AvecDiscussionParents: false,
                AvecDiscussionEleves: false,
                avecMessageInstantane: false,
                AvecContactVS: false,
                lancerAlertesPPMS: false,
                estDestinataireChat: false,
                AvecDiscussionAvancee: false,
                DomaineRecapitulatifAbsences: new TypeDomaine(),
                AvecSaisieAppelEtVS: false,
                AvecSaisieAppel: false,
                AvecSaisieCours: false,
                AvecSaisieAbsenceOuverte: false,
                AvecSaisieHorsCours: false,
                AvecSaisieSurGrille: false,
                AvecSaisieSurGrilleAppelProf: false,
                AvecSaisieAbsence: false,
                AvecSaisieRetard: false,
                AvecSaisiePassageInfirmerie: false,
                AvecSaisieExclusion: false,
                AvecSaisiePunition: false,
                AvecSaisieObservation: false,
                AvecConsultationDefautCarnet: false,
                AvecSaisieDefautCarnet: false,
                AvecSaisieObservationsParents: false,
                AvecSaisieEncouragements: false,
                AvecAccesAuxEvenementsAutresCours: false,
                AvecSaisieAbsencesToutesPermanences: false,
                DateSaisieAbsence: null,
                AvecSaisieAbsencesGrilleAbsencesRepas: false,
                AvecSaisieAbsencesGrilleAbsencesInternat: false,
                AvecSuiviAbsenceRetard: false,
                AvecSaisieEvaluations: false,
                AvecSaisieItems: false,
                AvecValidationCompetences: false,
                AvecSaisieAgenda: false,
                AvecSaisieActualite: false,
                avecPublicationListeDiffusion: false,
                avecSaisieDocumentsCasiers: false,
                CreerDossiersVS: false,
                ModifierDossiersVS: false,
                SaisieMotifsDossiersVS: false,
                PublierDossiersVS: false,
                ConsulterMemosEleve: false,
                SaisirMemos: false,
                avecSaisieDispense: false,
                incidents: {
                    acces: false,
                    saisie: false,
                    publier: false
                },
                AvecPublicationPunitions: false,
                avecAccesPunitions: false,
                avecSaisiePunitions: false,
                avecRecapPunitions: false,
                avecRecapSanctions: false,
                avecCreerMotifIncidentPunitionSanction: false,
                avecSaisieAppreciationsGenerales: false,
                cours: {
                    domaineConsultationEDT: new TypeDomaine(),
                    avecReservationCreneauxLibres: false,
                    modifierMatieres: false,
                    modifierMatieresCoursEPIEtAP: false,
                    modifierClasses: false,
                    modifierProfesseurs: false,
                    modifierSalles: false,
                    modifierMateriels: false,
                    creerCours: false,
                    creerCoursPermanenceFeuilleAppel: false,
                    deplacerCours: false,
                    modificationNonLimiteAuxSemaine: false,
                    domaineModificationCours: new TypeDomaine(),
                    estGestionnaireSalle: false,
                    estGestionnaireMateriel: false,
                    avecMateriel: false,
                    avecFicheCoursConseil: false,
                    masquerPartiesDeClasse: false,
                    afficherElevesDetachesDansCours: false
                },
                autoriserEditionToutesOffresStages: false,
                avecSaisieCahierDeTexte: false,
                creerCategoriesDeCahierDeTexte: false,
                avecSaisiePieceJointeCahierDeTexte: false,
                tailleMaxPieceJointeCahierDeTexte: 0,
                AvecSaisieDevoirs: false,
                avecSaisieDevoirsNotes: false,
                tailleMaxDocJointEtablissement: 0,
                tailleMaxRenduTafEleve: 0,
                compte: {
                    avecSaisieIdentifiant: false,
                    avecSaisieMotDePasse: false,
                    avecSaisieMotDePasseEleve: false,
                    avecInformationsPersonnelles: false,
                    avecSaisieInfosPersoCoordonnees: false,
                    avecSaisieInfosPersoAutorisations: false
                },
                intendance: {
                    avecDemandeTravauxIntendance: false,
                    uniquementMesTravauxIntendance: false,
                    avecExecutionTravauxIntendance: false,
                    avecDemandeTachesSecretariat: false,
                    uniquementMesTachesSecretariat: false,
                    avecExecutionTachesSecretariat: false
                },
                services: {
                    avecCreationSousServices: false,
                    avecModificationCoefGeneral: false
                },
                autoriseAConsulterPhotosDeTousLesEleves: false,
                autoriserImpression: false
            };
        };
        ObjetDroitsPN.prototype.initDroitsSession = function() {
            this._droitsSession = {
                fonctionnalites: {
                    gestionBrevet: true,
                    gestionProgrammesBO: true,
                    gestionStages: true,
                    gestionIPR: true,
                    appelSaisirMotifJustifDAbsence: false,
                    gestionTwitter: false,
                    gestionBulletinClasse: true,
                    gestionNathan: true,
                    gestionPunitions: true,
                    gestionInfirmerie: true,
                    gestionPermanence: true,
                    gestionAbsencesDemiPension: true,
                    gestionAbsencesInternat: true,
                    gestionEtendueEleves: true,
                    gestionEleves: true,
                    gestionPersonnels: true,
                    forcerARInfos: false,
                    gestionSondageAnonyme: true,
                    gestionAbsenceDJParUtilisateur: false,
                    attestationEtendue: true,
                    afficherProjetsAccompagnement: true,
                    saisieEtendueAbsenceDepuisAppel: false
                }
            };
        };
        ObjetDroitsPN.prototype.chargerJSON = function(aJSON) {
            var I;
            if (aJSON && aJSON.autorisationsSession) {
                this.initDroitsSession();
                $.extend(true, this._droitsSession, aJSON.autorisationsSession);
            }
            if (aJSON && aJSON.autorisations) {
                this.init();
                $.extend(true, this._droits, aJSON.autorisations);
                this._droits.listeDatesSaisieAbsence = new ObjetListeElements();
                for (I = 0; this._droits.DateSaisieAbsence && (I < this._droits.DateSaisieAbsence.length); I++) {
                    var lDate = new ObjetElement();
                    lDate.Date = aJSON.autorisations.DateSaisieAbsence[I];
                    lDate.Libelle = GDate.FormatDate(lDate.Date, '%JJJJ %JJ %MMM');
                    this._droits.listeDatesSaisieAbsence.AddElement(lDate);
                }
            }
        };
        module.exports.ObjetDroitsPN = ObjetDroitsPN;
        module.exports.TypeDroits = TypeDroits;
    },
    fn: "objetdroitspn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        function Callback(aPere, aEvenement, aIdentifiant) {
            this.pere = aPere;
            this.evenement = aEvenement;
            this.identifiant = aIdentifiant;
        }
        Callback.prototype.appel = function() {
            return this.executerEvenement.apply(this, arguments);
        };
        Callback.prototype.executerEvenement = function() {
            if (this.pere && this.evenement) {
                return this.evenement.apply(this.pere, arguments);
            }
        };
        module.exports = Callback;
    },
    fn: "callback.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('divers.js');
        var Callback = require('Callback.js');
        var GLog = require('IELog.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var GTraductions = require('ObjetTraduction.js');
        var c_constantesJSON = {
            noeudJSON: 'D',
            Signature: '_Signature_',
            SignatureAttente: '_SignatureAttente_',
            Donnees: 'donnees'
        };
        module.exports.c_constantesJSON = c_constantesJSON;
        var EGenreReponseSaisie = {
            erreur: 'reponseSaisie_erreur',
            annulation: 'reponseSaisie_annulation',
            succes: 'reponseSaisie_succes'
        };
        module.exports.EGenreReponseSaisie = EGenreReponseSaisie;
        module.exports.utils = {
            getIdentNotification: function(aIdent) {
                return 'notificationsRequete_' + aIdent;
            }
        };

        function ObjetRequeteJSON(aPere, aEvenementSurReussite, aEvenementSurEchec) {
            _init.call(this, aPere, aEvenementSurReussite, aEvenementSurEchec);
        }
        ObjetRequeteJSON.modules = {};
        ObjetRequeteJSON.declarerModules = function(aModules) {
            ObjetRequeteJSON.modules = Object.assign({
                initialiser: null,
                deserialiserSignatureConsultation: null,
                deserialiserSignatureSaisie: null,
                factoryModuleUploadCloud: null,
                extendPrototype: null
            }, aModules);
            if (ObjetRequeteJSON.modules.extendPrototype) {
                Object.assign(ObjetRequeteJSON.prototype, ObjetRequeteJSON.modules.extendPrototype);
            }
        };

        function _init(aPere, aEvenementSurReussite, aEvenementSurEchec) {
            this.setOptions();
            var lSelf = this;
            this.callbackReussite = new Callback(aPere, function() {
                if (aPere && aPere.isDestroyed && aPere.isDestroyed()) {
                    GLog.addLog('callbackReussite avec un pere detruit');
                    return;
                }
                var lResult = aEvenementSurReussite ? aEvenementSurReussite.apply(this, arguments) : null,
                    lResultPromesse = _executionFonctionPromesse(lSelf.reussitePromesse, arguments);
                _refreshHTML(lSelf, aEvenementSurReussite);
                return aEvenementSurReussite ? lResult : lResultPromesse;
            });
            if (!this.estUneSaisie) {
                this.callbackEchec = new Callback(aPere, function() {
                    if (aPere && aPere.isDestroyed && aPere.isDestroyed()) {
                        GLog.addLog('callbackEchec avec un pere detruit');
                        return;
                    }
                    var lResult = aEvenementSurEchec ? aEvenementSurEchec.apply(this, arguments) : null,
                        lResultPromesse = _executionFonctionPromesse(lSelf.echecPromesse, arguments);
                    _refreshHTML(lSelf, aEvenementSurReussite);
                    return aEvenementSurEchec ? lResult : lResultPromesse;
                });
            }
            this.reussitePromesse = null;
            this.echecPromesse = null;
            this._jsonRacineParametres = {};
            this.JSON = {};
            if (ObjetRequeteJSON.modules.initialiser) {
                ObjetRequeteJSON.modules.initialiser.call(this);
            }
            if (ObjetRequeteJSON.modules.factoryModuleUploadCloud) {
                this.moduleUploadCloud = ObjetRequeteJSON.modules.factoryModuleUploadCloud(this);
            }
        }
        ObjetRequeteJSON.prototype.setOptions = function(aOptions) {
            if (!this.options) {
                this.options = {
                    avecRefreshHTML: true,
                    avecControleModeExclusif: false,
                    messageDetail: '',
                    gererMessageErreur: null,
                    sansBlocageInterface: false
                };
            }
            $.extend(this.options, aOptions);
            return this;
        };

        function _refreshHTML(aRequete, aEvenementSurReussite) {
            if (aRequete.options.avecRefreshHTML) {
                Invocateur.evenement(ObjetInvocateur.events.refreshIEHtml);
                if (!aEvenementSurReussite) {
                    setTimeout(function() {
                        Invocateur.evenement(ObjetInvocateur.events.refreshIEHtml);
                    }, 0);
                }
            }
        }

        function _executionFonctionPromesse(aMethodes, aArguments) {
            var lResult;
            if (aMethodes) {
                if (aArguments.length === 0) {
                    lResult = aMethodes();
                } else if (aArguments.length === 1) {
                    lResult = aMethodes(aArguments[0]);
                } else {
                    lResult = aMethodes(Array.prototype.slice.call(aArguments));
                }
            }
            return lResult;
        }
        ObjetRequeteJSON.prototype.actionApresRequete = function() {};
        ObjetRequeteJSON.prototype._reponseRequete = function(aJSONRacine, aEnEchec) {
            this._jsonRacine = aJSONRacine || {};
            this.JSONReponse = {};
            this.JSONSignature = {};
            if (this._jsonRacine[c_constantesJSON.Donnees]) {
                this.JSONReponse = this._jsonRacine[c_constantesJSON.Donnees];
            }
            if (this._jsonRacine[c_constantesJSON.Signature]) {
                this.JSONSignature = this._jsonRacine[c_constantesJSON.Signature];
            }
            this.traiterReponseRequete(aEnEchec);
            this.apresReponseRequete();
        };
        ObjetRequeteJSON.prototype.apresReponseRequete = function() {};
        ObjetRequeteJSON.prototype.serialiserJSON = function() {
            if (this._jsonRacineParametres) {
                if (this.JSON && !$.isEmptyObject(this.JSON)) {
                    this._jsonRacineParametres[c_constantesJSON.Donnees] = this.JSON;
                }
            }
        };

        function _serialisationJSONEtEnvoieRequeteSaisie(aParams) {
            return new Promise(function(aResolve, aReject) {
                this.reussitePromesse = aResolve;
                this.echecPromesse = aReject;
                this.serialiserJSON();
                var lParams = {
                    nom: this.nom,
                    json: this._jsonRacineParametres,
                    callbackPere: this,
                    callbackEvenement: this._reponseRequete,
                    numeroRequete: undefined,
                    messageDetail: this.options.messageDetail,
                    requetePrioritaire: this.options.requetePrioritaire,
                    sansBlocageInterface: !!this.options.sansBlocageInterface,
                    paramsUpload: this.paramsUpload
                };
                $.extend(lParams, aParams);
                this.paramsUpload = null;
                GApplication.getCommunication().appel_fonction_asynchrone_xml(lParams);
            }.bind(this));
        }
        ObjetRequeteJSON.prototype.appelAsynchrone = function(aParams) {
            if (this.options.avecControleModeExclusif && GApplication.getModeExclusif()) {
                var lPromiseMessage = GApplication.getMessage().afficher({
                    titre: GTraductions.getValeur('ModeExclusif.UsageExclusif'),
                    message: GTraductions.getValeur('ModeExclusif.SaisieImpossibleConsultation')
                });
                return Promise.reject({
                    modeExclusif: true,
                    promiseMessage: lPromiseMessage
                });
            }
            if (!this._jsonRacineParametres) {
                GLog.addLog("La requete n'a pas de json definit !", null, GLog.genre.Avertissement);
            }
            if (this.moduleUploadCloud && this.moduleUploadCloud.actif()) {
                return this.moduleUploadCloud.lancer().then(function() {
                    return _serialisationJSONEtEnvoieRequeteSaisie.call(this, aParams);
                }.bind(this));
            }
            return _serialisationJSONEtEnvoieRequeteSaisie.call(this, aParams);
        };
        ObjetRequeteJSON.prototype.lancerRequete = function(aParametres) {
            Object.assign(this.JSON, aParametres);
            return this.appelAsynchrone();
        };
        ObjetRequeteJSON.prototype.addUpload = function(aParams) {
            this.paramsUpload = aParams;
            if (aParams && aParams.listeDJCloud) {
                if (this.moduleUploadCloud && this.moduleUploadCloud.setListePJs) {
                    this.moduleUploadCloud.setListePJs(aParams.listeDJCloud);
                } else {}
            }
            return this;
        };

        function ObjetRequeteSaisie() {
            this.setOptions({
                avecControleModeExclusif: true,
                messageDetail: GTraductions.getValeur('requete.validationEnCours'),
                titreEchecValidation: GTraductions.getValeur('requete.validationEchec'),
                titreAnnulationValidation: '',
                afficherMessageErreur: true
            });
            this.inheritedCreate(arguments);
        }
        MethodesObjet.heritagePrototype(ObjetRequeteSaisie, ObjetRequeteJSON);
        (function() {
            ObjetRequeteSaisie.prototype.estUneSaisie = true;
            ObjetRequeteSaisie.prototype.actionApresRequete = function(aXml, aGenreReponse) {
                this.callbackReussite.appel({
                    JSONRapportSaisie: this.JSONRapportSaisie,
                    JSONReponse: this.JSONReponse,
                    genreReponse: aGenreReponse,
                    messageErreur: this.messageErreur,
                    promiseMessage: this.promiseMessage
                });
            };
            ObjetRequeteSaisie.prototype.traiterReponseRequete = function(aEnEchec) {
                var lGenreReponse = this.traiterReponseSaisie(null, aEnEchec);
                if (this.avecDeserialisationReponseSaisie(null, aEnEchec)) {
                    this.actionApresRequete(null, lGenreReponse);
                }
            };
            ObjetRequeteSaisie.prototype.avecDeserialisationReponseSaisie = function() {
                if (this.options.avecControleModeExclusif && GApplication.getModeExclusif()) {
                    return false;
                }
                return true;
            };
            ObjetRequeteSaisie.prototype.deserialiserSignatureSaisie = function() {
                if (ObjetRequeteJSON.modules.deserialiserSignatureSaisie) {
                    ObjetRequeteJSON.modules.deserialiserSignatureSaisie.call(this);
                }
            };

            function _getMessageErreurSaisie(aMessagesErreurRapportSaisie, aReponse, aTitre) {
                var lDetails = '';
                if (aMessagesErreurRapportSaisie && aMessagesErreurRapportSaisie.join) {
                    lDetails = aMessagesErreurRapportSaisie.join('\n');
                }
                var lTitre = aTitre || '';
                if (!lTitre) {
                    switch (aReponse) {
                        case EGenreReponseSaisie.erreur:
                            lTitre = this.options.titreEchecValidation || '';
                            break;
                        case EGenreReponseSaisie.annulation:
                            lTitre = this.options.titreAnnulationValidation || '';
                            break;
                    }
                }
                if (lTitre || lDetails) {
                    this.messageErreur = {
                        titre: lTitre,
                        message: lDetails || ''
                    };
                }
            }
            ObjetRequeteSaisie.prototype.traiterReponseSaisieMessage = function(aMessagesErreurRapportSaisie, aReponse, aTitre) {
                _getMessageErreurSaisie.call(this, aMessagesErreurRapportSaisie, aReponse, aTitre);
                if (this.messageErreur && this.options.afficherMessageErreur) {
                    this.promiseMessage = GApplication.getMessage().afficher(this.messageErreur);
                }
            };
            ObjetRequeteSaisie.prototype.traiterReponseSaisie = function(aXml, aEnEchec) {
                var lReponse = aEnEchec ? EGenreReponseSaisie.erreur : EGenreReponseSaisie.succes;
                if (!this.JSONRapportSaisie) {
                    this.JSONRapportSaisie = this._jsonRacine && this._jsonRacine.RapportSaisie ? this._jsonRacine.RapportSaisie : {};
                }
                var lMessagesErreurRapportSaisie = !this.JSONRapportSaisie ? null : this.JSONRapportSaisie._messagesErreur_ ? this.JSONRapportSaisie._messagesErreur_ : this.JSONRapportSaisie._erreurSaisie_ ? [] : null;
                if (!lMessagesErreurRapportSaisie) {
                    lMessagesErreurRapportSaisie = this.JSONSignature && this.JSONSignature.Erreur ? this.JSONSignature.MessageErreur ? [this.JSONSignature.MessageErreur] : [] : null;
                }
                var lTitreErreur = !this.JSONRapportSaisie ? null : this.JSONRapportSaisie.titre_Messages_Erreur || '';
                if (this.reponseEnErreur()) {
                    lReponse = EGenreReponseSaisie.erreur;
                } else if (lMessagesErreurRapportSaisie) {
                    lReponse = EGenreReponseSaisie.annulation;
                }
                if (lMessagesErreurRapportSaisie) {
                    this.traiterReponseSaisieMessage(lMessagesErreurRapportSaisie, lReponse, lTitreErreur);
                }
                this.deserialiserSignatureSaisie();
                return lReponse;
            };
            ObjetRequeteSaisie.prototype.reponseEnErreur = function() {
                return (this.JSONRapportSaisie && this.JSONRapportSaisie._erreurSaisie_) || (this.JSONSignature && this.JSONSignature.Erreur);
            };
        }());

        function ObjetRequeteConsultation(aPere, aEvenementSurReussite, aEvenementSurEchec) {
            this.setOptions({
                gererMessageErreur: function(aMessage) {
                    var lMessage = aMessage && (aMessage.length > 0) ? aMessage : GTraductions.getValeur('requete.erreur');
                    try {
                        return GApplication.getMessage().afficher({
                            message: lMessage
                        });
                    } catch (e) {}
                }
            });
            this._evenementEchec = aEvenementSurEchec === false ? null : aEvenementSurEchec;
            this.inheritedCreate(aPere, aEvenementSurReussite, this._evenementEchec);
        }
        MethodesObjet.heritagePrototype(ObjetRequeteConsultation, ObjetRequeteJSON);
        ObjetRequeteConsultation.prototype.traiterReponseRequete = function() {
            if (ObjetRequeteJSON.modules.deserialiserSignatureConsultation) {
                ObjetRequeteJSON.modules.deserialiserSignatureConsultation.call(this);
            }
            if (this.callbackEchec.evenement && this.JSONSignature && this.JSONSignature.Erreur) {
                this.traiterReponseEchecConsultation();
            } else {
                this.actionApresRequete();
            }
        };
        ObjetRequeteConsultation.prototype.traiterReponseEchecConsultation = function() {
            var lMessage = this.JSONSignature && this.JSONSignature.MessageErreur ? this.JSONSignature.MessageErreur : '';
            GLog.addLog('Erreur de consultation controlé avec le message : ' + lMessage, null, GLog.genre.Avertissement);
            var lParametresEchec = lMessage;
            if (!this._evenementEchec) {
                if (this.options.gererMessageErreur) {
                    lParametresEchec = {
                        promiseMessage: this.options.gererMessageErreur(lMessage),
                        message: lMessage
                    };
                }
            }
            if (this.callbackEchec.appel(lParametresEchec)) {
                this.actionApresRequete();
            }
        };
        ObjetRequeteConsultation.prototype.actionApresRequete = function() {
            this.callbackReussite.appel(this.JSONReponse);
        };
        module.exports.ObjetRequeteJSON = ObjetRequeteJSON;
        module.exports.ObjetRequeteSaisie = ObjetRequeteSaisie;
        module.exports.ObjetRequeteConsultation = ObjetRequeteConsultation;
    },
    fn: "objetrequetejson.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var Requetes = (function() {
            var lCollectionRequetes = {},
                lRequetes;
            lRequetes = function(aIdentRequete) {
                var lClasseRequete, lInstanceRequete;
                lClasseRequete = lCollectionRequetes[aIdentRequete];
                if (!lClasseRequete) {
                    return {
                        lancerRequete: function() {}
                    };
                }
                lInstanceRequete = new lClasseRequete(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                lInstanceRequete.nom = aIdentRequete;
                return lInstanceRequete;
            };
            lRequetes.inscrire = function(aIdentRequete, aClasse, aClassParent) {
                if (!aIdentRequete) {
                    return this;
                }
                if (!aClasse) {
                    return this;
                }
                if (aClassParent) {
                    MethodesObjet.heritagePrototype(aClasse, aClassParent);
                }
                if (lCollectionRequetes[aIdentRequete]) {
                    if (lCollectionRequetes[aIdentRequete] !== aClasse) {}
                    return this;
                }
                if (aClassParent) {
                    aClasse.prototype.nom = aIdentRequete;
                }
                lCollectionRequetes[aIdentRequete] = aClasse;
            };
            lRequetes.collection = lCollectionRequetes;
            return lRequetes;
        }());
        module.exports = Requetes;
    },
    fn: "collectionrequetes.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var localStorage = (function() {
            var lLocalStorage = null;
            try {
                lLocalStorage = window.localStorage || (window.globalStorage ? window.globalStorage[window.location.hostname] : null);
                if (lLocalStorage.setItem) {
                    lLocalStorage.setItem('_bidon_', 1);
                    lLocalStorage.removeItem('_bidon_');
                }
            } catch (e) {
                lLocalStorage = null;
            }
            return {
                actif: !!lLocalStorage,
                getItem: function(aCle) {
                    if (lLocalStorage) {
                        try {
                            return lLocalStorage.getItem ? lLocalStorage.getItem(aCle) : lLocalStorage[aCle];
                        } catch (e) {}
                    }
                    return null;
                },
                getItemJSON: function(aCle) {
                    var lResult = this.getItem(aCle),
                        lJSON = null;
                    try {
                        lJSON = lResult ? JSON.parse(lResult) : null;
                    } catch (e) {
                        lJSON = null;
                    }
                    return lJSON;
                },
                setItem: function(aCle, aValeur) {
                    if (lLocalStorage) {
                        try {
                            if (lLocalStorage.setItem) {
                                lLocalStorage.setItem(aCle, aValeur);
                            } else {
                                lLocalStorage[aCle] = aValeur;
                            }
                        } catch (e) {}
                    }
                },
                setItemJSON: function(aCle, aJSON) {
                    var lChaineJSON = '';
                    try {
                        lChaineJSON = JSON.stringify(aJSON);
                    } catch (e) {}
                    this.setItem(aCle, lChaineJSON || '');
                },
                removeItem: function(aCle) {
                    if (lLocalStorage) {
                        try {
                            if (lLocalStorage.removeItem) {
                                lLocalStorage.removeItem(aCle);
                            } else {
                                lLocalStorage[aCle] = null;
                            }
                        } catch (e) {}
                    }
                }
            };
        }());
        module.exports = localStorage;
    },
    fn: "localstorage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var localStorage = require('localStorage.js');
        var c_marqueur = '_idNavIndex_';
        module.exports = {
            get: function() {
                try {
                    return localStorage.getItem(c_marqueur);
                } catch (e) {
                    return '';
                }
            },
            set: function(aValue) {
                try {
                    localStorage.setItem(c_marqueur, aValue);
                } catch (e) {}
            }
        };
    },
    fn: "utilitaireidentifiantnavigateur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var Requetes = require('CollectionRequetes.js');
        var UtilitaireIdentifiantNavigateur = require('UtilitaireIdentifiantNavigateur.js');

        function ObjetRequeteFonctionParametres() {
            this.inheritedCreate(arguments);
        }
        Requetes.inscrire('FonctionParametres', ObjetRequeteFonctionParametres, ObjetRequeteConsultation);
        ObjetRequeteFonctionParametres.prototype.lancerRequete = function(aObjet) {
            this.JSON = {
                Uuid: aObjet.uuidRSA,
                identifiantNav: UtilitaireIdentifiantNavigateur.get()
            };
            return this.appelAsynchrone();
        };
        ObjetRequeteFonctionParametres.prototype.actionApresRequete = function() {
            if (this.JSONReponse.identifiantNav) {
                UtilitaireIdentifiantNavigateur.set(this.JSONReponse.identifiantNav);
            }
            this.callbackReussite.appel(this.JSONReponse);
        };
        module.exports = ObjetRequeteFonctionParametres;
    },
    fn: "objetrequetefonctionparametres.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var TypeDomaine = require('TypeDomaine.js');
        var TypeEnsembleNombre = require('TypeEnsembleNombre.js');

        function ObjetCycles() {
            this.donneesCycles = {
                premiereDate: null,
                derniereDate: null,
                dateDebutPremierCycle: null,
                joursOuvresParCycle: null,
                premierJourSemaine: 2,
                joursOuvres: null,
                joursFeries: new TypeEnsembleNombre(),
                cyclesSansFeries: false,
                cyclesHebdomadaire: true
            };
            this.cache = {
                datePremierJourOuvre: null,
                cycleEtIndiceParDate: [],
                datesAfficheesParCycle: [],
                bornesCycles: [],
                nombreCyclesAnneeScolaire: null,
                domaineFerie: null,
                indicesJoursOuvres: null
            };
            this.recherche = ObjetCycles.recherche;
        }
        var lDate = null;

        function _GDate() {
            if (!lDate) {
                lDate = require('ObjetDate.js').GDate;
            }
            return lDate;
        }
        ObjetCycles.C_IndicePremierJourCycle = 0;
        ObjetCycles.C_IndiceDernierJourCycle = Number.MAX_VALUE;
        ObjetCycles.C_IndiceDernierJourOuvreCycle = Number.MAX_VALUE - 1;
        ObjetCycles.C_MaxDomaineCycle = TypeDomaine.C_MaxDomaineCycle;
        ObjetCycles.recherche = {
            strict: 0,
            autoriserSuivants: 1,
            autoriserPrecedents: 2
        };
        var C_JourCycleHorsGrille = -1,
            C_MaxJoursParSemaine = 7,
            C_NbJoursCaches = ObjetCycles.C_MaxDomaineCycle * 7 + 21;

        function _DateEnJourHebdo(ADate, APremierJourSemaine) {
            var LJourTt, LPremierJour;
            LPremierJour = APremierJourSemaine;
            if (LPremierJour > C_MaxJoursParSemaine) {
                LPremierJour = LPremierJour - C_MaxJoursParSemaine;
            }
            LJourTt = ADate.getDay() + 1;
            if (LJourTt >= LPremierJour) {
                return LJourTt - LPremierJour;
            }
            return LJourTt + C_MaxJoursParSemaine - LPremierJour;
        }

        function _IncJourHebdo(aJourHebdo) {
            return (aJourHebdo + 1) % C_MaxJoursParSemaine;
        }

        function _calculer() {
            var lDatesAIgnorer = new TypeEnsembleNombre(),
                lEnSemaine, lJourSemaine, iJour, iCycle, lIndiceCycle, lJourHebdo, LCycle, IDate, LIndiceJourAnnee, LPasToutRempli, lTab, i;
            this._cacheDateEnJourCycle = null;
            if (!this.donneesCycles.joursOuvres ||
                this.donneesCycles.joursOuvres.count() === 0) {
                return;
            }
            if (this.donneesCycles.cyclesSansFeries && this.donneesCycles.joursFeries) {
                lTab = this.donneesCycles.joursFeries.items();
                for (i in lTab) {
                    lDatesAIgnorer.add(_GDate().GetJourSuivant(this.donneesCycles.dateDebutPremierCycle, lTab[i] - 1).getTime());
                }
            }
            this.cache.datePremierJourOuvre = this.donneesCycles.premiereDate;
            lEnSemaine = lDatesAIgnorer.count() === 0 && (this.donneesCycles.joursOuvresParCycle % this.donneesCycles.joursOuvres.count() === 0);
            if (lEnSemaine) {
                lJourSemaine = this.cache.datePremierJourOuvre.getDay() + 1;
                while (lJourSemaine !== this.donneesCycles.premierJourSemaine) {
                    this.cache.datePremierJourOuvre = _GDate().GetJourSuivant(this.cache.datePremierJourOuvre, -1);
                    lJourSemaine = this.cache.datePremierJourOuvre.getDay() + 1;
                }
            }
            for (iJour = 0; iJour <= C_NbJoursCaches; iJour++) {
                this.cache.cycleEtIndiceParDate[iJour] = {
                    cycle: 1,
                    indice: C_JourCycleHorsGrille
                };
            }
            for (iCycle = 0; iCycle <= ObjetCycles.C_MaxDomaineCycle; iCycle += 1) {
                this.cache.datesAfficheesParCycle[iCycle] = [];
                this.cache.bornesCycles[iCycle] = {
                    DateDebut: new Date(0),
                    DateFin: new Date(0)
                };
            }
            this.cache.bornesCycles[1].DateDebut = this.cache.datePremierJourOuvre;
            lIndiceCycle = -1;
            lJourHebdo = _DateEnJourHebdo(this.cache.datePremierJourOuvre, this.donneesCycles.premierJourSemaine) - 1;
            LCycle = 0;
            var lIncDate = 0;
            this.cache.nombreCyclesAnneeScolaire = 0;
            LIndiceJourAnnee = 0;
            LPasToutRempli = true;
            while (LPasToutRempli) {
                IDate = _GDate().GetJourSuivant(this.cache.datePremierJourOuvre, lIncDate);
                lIncDate++;
                lJourHebdo = _IncJourHebdo(lJourHebdo);
                if (lDatesAIgnorer.contains(IDate.getTime()) || ((!lEnSemaine) && (IDate.getTime() < this.donneesCycles.premiereDate.getTime())) || !(this.donneesCycles.joursOuvres.contains(lJourHebdo))) {
                    if (LIndiceJourAnnee <= C_NbJoursCaches) {
                        this.cache.cycleEtIndiceParDate[LIndiceJourAnnee] = {
                            cycle: Math.max(1, LCycle),
                            indice: C_JourCycleHorsGrille
                        };
                    }
                } else {
                    lIndiceCycle = (lIndiceCycle + 1) % this.donneesCycles.joursOuvresParCycle;
                    if (lIndiceCycle === 0) {
                        LCycle += 1;
                    }
                    if (LIndiceJourAnnee <= C_NbJoursCaches) {
                        this.cache.cycleEtIndiceParDate[LIndiceJourAnnee] = {
                            cycle: LCycle,
                            indice: lIndiceCycle
                        };
                    }
                    if (LCycle <= ObjetCycles.C_MaxDomaineCycle) {
                        this.cache.datesAfficheesParCycle[LCycle][lIndiceCycle] = IDate;
                    }
                    if ((lIndiceCycle === 0) && (LCycle > 1)) {
                        if (LCycle <= ObjetCycles.C_MaxDomaineCycle) {
                            this.cache.bornesCycles[LCycle].DateDebut = new Date(IDate.getTime());
                        }
                        if (LCycle - 1 <= ObjetCycles.C_MaxDomaineCycle) {
                            this.cache.bornesCycles[LCycle - 1].DateFin = _GDate().GetJourSuivant(IDate, -1);
                        }
                    }
                }
                if (_GDate().estJourEgal(IDate, this.donneesCycles.derniereDate)) {
                    this.cache.nombreCyclesAnneeScolaire = LCycle;
                }
                LIndiceJourAnnee += 1;
                LPasToutRempli = (LCycle <= ObjetCycles.C_MaxDomaineCycle) || (LIndiceJourAnnee <= C_NbJoursCaches);
            }
        }

        function _CycleEtIndiceCycleDeDate(aDate) {
            var lDate = _GDate().GetJour(aDate),
                LDateRef = this.cache.bornesCycles[1].DateDebut,
                lResult = {
                    cycle: -1,
                    indice: C_JourCycleHorsGrille
                };
            if ((lDate.getTime() >= LDateRef.getTime()) && (lDate.getTime() <= this.cache.bornesCycles[this.cache.nombreCyclesAnneeScolaire].DateFin)) {
                lResult = this.cache.cycleEtIndiceParDate[_GDate().getNbrJoursEntreDeuxDates(LDateRef, lDate)];
            }
            return lResult;
        }

        function _getDateBornee(aDate) {
            if (aDate < this.donneesCycles.premiereDate) {
                return new Date(this.donneesCycles.premiereDate.getTime());
            }
            if (aDate > this.donneesCycles.derniereDate) {
                return new Date(this.donneesCycles.derniereDate.getTime());
            } else {
                return aDate;
            }
        }

        function _dateDansBorne(aDate) {
            return (aDate >= this.donneesCycles.premiereDate || _GDate().estJourEgal(aDate, this.donneesCycles.premiereDate)) && (aDate <= this.donneesCycles.derniereDate || _GDate().estJourEgal(aDate, this.donneesCycles.derniereDate));
        }
        ObjetCycles.prototype.init = function(aParametres) {
            $.extend(this.donneesCycles, aParametres);
            _calculer.bind(this)();
            return this;
        };
        ObjetCycles.prototype.nombreJoursOuvresParCycle = function() {
            return this.donneesCycles.joursOuvresParCycle;
        };
        ObjetCycles.prototype.dateDebutPremierCycle = function() {
            return new Date(this.cache.bornesCycles[1].DateDebut);
        };
        ObjetCycles.prototype.dateFinDernierCycle = function() {
            return new Date(this.cache.bornesCycles[this.cache.nombreCyclesAnneeScolaire].DateFin);
        };
        ObjetCycles.prototype.dateEnCycleEtJourCycle = function(aDate, aTypeRecherche, aParamOut) {
            var LCycleEtIndice, LDate;
            LCycleEtIndice = {
                cycle: -1,
                indice: C_JourCycleHorsGrille
            };
            try {
                LDate = aDate;
                if (LDate < this.dateDebutPremierCycle()) {
                    if (aTypeRecherche !== ObjetCycles.recherche.autoriserSuivants) {
                        return false;
                    }
                    LDate = this.dateDebutPremierCycle();
                }
                if (LDate > this.dateFinDernierCycle()) {
                    if (aTypeRecherche !== ObjetCycles.recherche.autoriserPrecedents) {
                        return false;
                    }
                    LDate = this.dateFinDernierCycle();
                }
                while (LCycleEtIndice.indice === C_JourCycleHorsGrille && LDate >= this.dateDebutPremierCycle() && LDate <= this.dateFinDernierCycle()) {
                    LCycleEtIndice = _CycleEtIndiceCycleDeDate.bind(this)(LDate);
                    if (LCycleEtIndice.indice === C_JourCycleHorsGrille) {
                        switch (aTypeRecherche) {
                            case ObjetCycles.recherche.autoriserSuivants:
                                LDate = _GDate().GetJourSuivant(LDate, 1);
                                break;
                            case ObjetCycles.recherche.autoriserPrecedents:
                                LDate = _GDate().GetJourSuivant(LDate, -1);
                                break;
                            default:
                                return false;
                        }
                    }
                }
            } finally {
                aParamOut.cycle = LCycleEtIndice.cycle;
                aParamOut.indice = LCycleEtIndice.indice;
            }
            return aParamOut.indice !== C_JourCycleHorsGrille;
        };
        ObjetCycles.prototype.nombreCyclesAnneeScolaire = function() {
            return this.cache.nombreCyclesAnneeScolaire;
        };
        ObjetCycles.prototype.cycleDeLaDate = function(aDate) {
            var LDate = _getDateBornee.call(this, aDate),
                lObj = _CycleEtIndiceCycleDeDate.bind(this)(LDate);
            return lObj ? lObj.cycle : 0;
        };
        ObjetCycles.prototype.dateEnJourCycle = function(aDate) {
            var lTimeJour = new Date(aDate.getFullYear(), aDate.getMonth(), aDate.getDate()).getTime();
            if (!this._cacheDateEnJourCycle) {
                this._cacheDateEnJourCycle = {};
            }
            if (!this._cacheDateEnJourCycle[lTimeJour] && this._cacheDateEnJourCycle[lTimeJour] !== 0) {
                var lParam = {};
                if (this.dateEnCycleEtJourCycle(aDate, ObjetCycles.recherche.autoriserPrecedents, lParam)) {
                    this._cacheDateEnJourCycle[lTimeJour] = lParam.indice;
                }
            }
            var lJourCycle = this._cacheDateEnJourCycle[lTimeJour];
            return lJourCycle === undefined ? 0 : lJourCycle;
        };
        ObjetCycles.prototype.cycleCourant = function() {
            return this.cycleDeLaDate(new Date());
        };
        ObjetCycles.prototype.dateDebutCycle = function(aCycle) {
            var lDate = this.cache.bornesCycles[Math.borner(aCycle, 1, this.nombreCyclesAnneeScolaire())].DateDebut;
            return MethodesObjet.isDate(lDate) ? new Date(lDate) : lDate;
        };
        ObjetCycles.prototype.dateFinCycle = function(aCycle) {
            var lDate = this.cache.bornesCycles[Math.borner(aCycle, 1, this.nombreCyclesAnneeScolaire())].DateFin;
            return MethodesObjet.isDate(lDate) ? new Date(lDate) : lDate;
        };
        ObjetCycles.prototype.datePremierJourOuvreCycle = function(aCycle) {
            var lCycle = Math.borner(aCycle, 1, this.nombreCyclesAnneeScolaire()),
                lIndice, lResult = 0;
            for (lIndice = 0; lIndice < this.donneesCycles.joursOuvresParCycle; lIndice++) {
                lResult = this.cache.datesAfficheesParCycle[lCycle][lIndice] || 0;
                if (lResult > 0) {
                    break;
                }
            }
            return MethodesObjet.isDate(lResult) ? new Date(lResult) : lResult;
        };
        ObjetCycles.prototype.dateDernierJourOuvreCycle = function(aCycle) {
            var lCycle = Math.borner(aCycle, 1, this.nombreCyclesAnneeScolaire()),
                lIndice = this.donneesCycles.joursOuvresParCycle,
                lResult = 0;
            while (lResult === 0 && lIndice >= 0) {
                lResult = this.cache.datesAfficheesParCycle[lCycle][lIndice] || 0;
                lIndice += -1;
            }
            return MethodesObjet.isDate(lResult) ? new Date(lResult) : lResult;
        };
        ObjetCycles.prototype.jourCycleEnDate = function(AJourCycle, ACycle) {
            if (ACycle < 1) {
                return this.dateDebutPremierCycle();
            }
            if (ACycle > this.cache.nombreCyclesAnneeScolaire) {
                return this.dateFinCycle(this.cache.nombreCyclesAnneeScolaire);
            }
            if (AJourCycle < 0) {
                return this.dateDebutCycle(ACycle);
            }
            if (!this.cache.datesAfficheesParCycle[ACycle]) {
                return this.dateDebutPremierCycle();
            }
            if (AJourCycle >= this.cache.datesAfficheesParCycle[ACycle].length) {
                return this.dateFinCycle(ACycle);
            }
            var lDate = this.cache.datesAfficheesParCycle[ACycle][AJourCycle];
            return MethodesObjet.isDate(lDate) ? new Date(lDate) : lDate;
        };
        ObjetCycles.prototype.getDomaineFerie = function() {
            if (!this.cache.domaineFerie) {
                this.cache.domaineFerie = new TypeDomaine();
                var lCycle, lJourCycle, LSemaineFeriee, lNombreCycles = this.nombreCyclesAnneeScolaire(),
                    lNombreJoursCycle = this.nombreJoursOuvresParCycle(),
                    lDateDebutPremierCycle = this.dateDebutPremierCycle(),
                    lJourAnnuel, lDate;
                for (lCycle = 1; lCycle <= lNombreCycles; lCycle += 1) {
                    LSemaineFeriee = true;
                    for (lJourCycle = 0; lJourCycle < lNombreJoursCycle && LSemaineFeriee; lJourCycle += 1) {
                        lDate = this.jourCycleEnDate(lJourCycle, lCycle);
                        lJourAnnuel = _GDate().getNbrJoursEntreDeuxDates(lDateDebutPremierCycle, lDate);
                        LSemaineFeriee = this.donneesCycles.joursFeries.contains(lJourAnnuel + 1) || !_dateDansBorne.call(this, lDate);
                    }
                    this.cache.domaineFerie.SetValeur(LSemaineFeriee, lCycle);
                }
            }
            return this.cache.domaineFerie;
        };
        ObjetCycles.prototype.cycleDansAnnee = function(aCycle) {
            return Math.max(1, Math.min(this.nombreCyclesAnneeScolaire(), aCycle));
        };
        ObjetCycles.prototype.indicesJoursOuvres = function() {
            if (!this.cache.indicesJoursOuvres) {
                this.cache.indicesJoursOuvres = [];
                var i, lJour;
                if (this.donneesCycles.cyclesHebdomadaire) {
                    for (i = 0; i < 7; i++) {
                        if (this.donneesCycles.joursOuvres.contains(i)) {
                            lJour = (i + this.donneesCycles.premierJourSemaine - 2) % 7;
                            if (lJour < 0) {
                                lJour = 6;
                            }
                            this.cache.indicesJoursOuvres.push(lJour);
                        }
                    }
                } else {
                    for (i = 0; i < this.donneesCycles.joursOuvresParCycle; i++) {
                        this.cache.indicesJoursOuvres.push(i);
                    }
                }
            }
            return this.cache.indicesJoursOuvres;
        };
        module.exports = ObjetCycles;
    },
    fn: "objetcycles.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ECouleurDeTheme = {
            Light: 0,
            Legere: 1,
            Legere2: 2,
            Claire: 3,
            Moyen1: 4,
            Moyen2: 5,
            Foncee: 6,
            Sombre: 7
        };
        module.exports = ECouleurDeTheme;
    },
    fn: "enumere_couleursdetheme.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeTheme = {
            Personnalise: 0,
            Framboise: 1,
            Fraise: 2,
            Citrouille: 3,
            Mandarine: 4,
            Mure: 5,
            Lavande: 6,
            Prune: 7,
            Bleu: 8,
            BleuOcean: 9,
            BleuCanard: 10,
            Emeraude: 11,
            Feuille: 12,
            Taupe: 13,
            Chocolat: 14,
            Gris: 15
        };
        module.exports.TypeTheme = TypeTheme;
        TypeTheme.MobilePN = 1000;
        TypeTheme.MobileHP = 1001;
        var lCouleurThemes = {
            neutre: {
                light: '#F8F8F8',
                legere: '#F6F6F6',
                legere2: '#EDEDED',
                claire: '#E2E2E2',
                moyen1: '#D9DBDC',
                moyen2: '#C5C5C5',
                foncee: '#6B6E77',
                sombre: '#515459'
            },
            1: {
                nom: 'Framboise',
                genre: 1,
                claire: '#EDD5DB',
                moyen1: '#F8C2CD',
                foncee: '#B9335F',
                sombre: '#911C42'
            },
            2: {
                nom: 'Fraise',
                genre: 2,
                claire: '#F1D7D9',
                moyen1: '#FFB5B9',
                foncee: '#C23B44',
                sombre: '#972028'
            },
            3: {
                nom: 'Citrouille',
                genre: 3,
                claire: '#EED7CC',
                moyen1: '#FAB99D',
                foncee: '#D05722',
                sombre: '#AC4011'
            },
            4: {
                nom: 'Mandarine',
                genre: 4,
                claire: '#F1DBBD',
                moyen1: '#FFCA80',
                foncee: '#E18400',
                sombre: '#B96103'
            },
            5: {
                nom: 'Mure',
                genre: 5,
                claire: '#EAD7E3',
                moyen1: '#E4C1D8',
                foncee: '#9D447F',
                sombre: '#6B174E'
            },
            6: {
                nom: 'Lavande',
                genre: 6,
                claire: '#E9DFEE',
                moyen1: '#DCC5F7',
                foncee: '#8855A3',
                sombre: '#6A3288'
            },
            7: {
                nom: 'Prune',
                genre: 7,
                claire: '#DCD9ED',
                moyen1: '#C8BAF6',
                foncee: '#705CB1',
                sombre: '#49358C'
            },
            8: {
                nom: 'Bleu',
                genre: 8,
                claire: '#DAE5F2',
                moyen1: '#B5D6F9',
                foncee: '#3273B5',
                sombre: '#114B88'
            },
            9: {
                nom: 'BleuOcean',
                genre: 9,
                claire: '#DAE5F2',
                moyen1: '#AAE0F0',
                foncee: '#0281A6',
                sombre: '#045F79'
            },
            10: {
                nom: 'BleuCanard',
                genre: 10,
                claire: '#D4E9E9',
                moyen1: '#9EDEDC',
                foncee: '#158786',
                sombre: '#096665'
            },
            11: {
                nom: 'Emeraude',
                genre: 11,
                claire: '#D1E9DA',
                moyen1: '#A1E5C6',
                foncee: '#0A9B6A',
                sombre: '#057C54'
            },
            12: {
                nom: 'Feuille',
                genre: 12,
                claire: '#DBE4C8',
                moyen1: '#CDE893',
                foncee: '#699A00',
                sombre: '#547A04'
            },
            13: {
                nom: 'Taupe',
                genre: 13,
                claire: '#E4DADD',
                moyen1: '#CCBEC2',
                foncee: '#877379',
                sombre: '#6F5960'
            },
            14: {
                nom: 'Chocolat',
                genre: 14,
                claire: '#E2DCCD',
                moyen1: '#DECB95',
                foncee: '#937A33',
                sombre: '#7A6321'
            }
        };
        module.exports.couleurThemes = lCouleurThemes;
        module.exports.couleurNonEditable = '#EFEFEF';
        TypeTheme.estMobile = function(aTheme) {
            return aTheme === TypeTheme.MobilePN || aTheme === TypeTheme.MobileHP;
        };
        lCouleurThemes[TypeTheme.MobilePN] = {
            nom: 'MobilePN',
            genre: TypeTheme.MobilePN,
            claire: '#72C393',
            moyen1: '#55C381',
            foncee: '#21874a',
            sombre: '#2C6543',
            sombre2: '#0B582A'
        };
        lCouleurThemes[TypeTheme.MobileHP] = {
            nom: 'MobileHP',
            genre: TypeTheme.MobileHP,
            claire: '#C0568C',
            moyen1: '#C03079',
            foncee: '#800041',
            sombre: '#60183D',
            sombre2: '#53002A'
        };
    },
    fn: "typetheme.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ECouleurDeTheme = require('Enumere_CouleursDeTheme.js');
        var ObjetTheme = require('TypeTheme.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var ObjetElement = require('ObjetElement.js');
        var MethodesObjet = require('MethodesObjet.js');
        var GTraductions = require('ObjetTraduction.js');
        var Invocateur = require('Invocateur.js').Invocateur;
        var TypeTheme = require('TypeTheme.js').TypeTheme;

        function ObjetThemesCouleurs() {
            this.themeNeutre = _themeToArray(ObjetTheme.couleurThemes.neutre);
            this.nonEditable = ObjetTheme.couleurNonEditable;
            this.listeThemes = new ObjetListeElements();
            Object.keys(ObjetTheme.TypeTheme).forEach(function(aKey) {
                var lTheme = ObjetTheme.couleurThemes[ObjetTheme.TypeTheme[aKey]];
                if (lTheme) {
                    var lElement = new ObjetElement(TypeTheme.estMobile(lTheme.genre) ? '' : GTraductions.getValeur('theme.' + lTheme.genre), null, lTheme.genre);
                    lElement.nom = lTheme.nom;
                    lElement.themeCouleur = _themeToArray(lTheme);
                    this.listeThemes.AddElement(lElement);
                }
            }.bind(this));
            this.setTheme(null, true);
            this.elementZoneFenetre = null;
            Invocateur.abonner('creationZoneFenetre', function(aElement) {
                this.elementZoneFenetre = aElement;
                $(this.elementZoneFenetre).addClass(_getClassThemeCourant.call(this));
            }.bind(this));
        }
        ObjetThemesCouleurs.prototype.getThemeNeutre = function() {
            return Object.assign({}, ObjetTheme.couleurThemes.neutre);
        };
        ObjetThemesCouleurs.prototype.getThemeCouleur = function(aGenreThemeCouleur) {
            return {
                claire: this.getCouleurDuTheme(ECouleurDeTheme.Claire, this.avecCouleur, aGenreThemeCouleur),
                moyen1: this.getCouleurDuTheme(ECouleurDeTheme.Moyen1, this.avecCouleur, aGenreThemeCouleur),
                foncee: this.getCouleurDuTheme(ECouleurDeTheme.Foncee, this.avecCouleur, aGenreThemeCouleur),
                sombre: this.getCouleurDuTheme(ECouleurDeTheme.Sombre, this.avecCouleur, aGenreThemeCouleur)
            };
        };

        function _themeToArray(aTheme) {
            if (!aTheme) {
                return [];
            }
            return [
                aTheme.light || '', aTheme.legere || '', aTheme.legere2 || '', aTheme.claire || '', aTheme.moyen1 || '', aTheme.moyen2 || '', aTheme.foncee || '', aTheme.sombre || ''
            ];
        }
        ObjetThemesCouleurs.prototype.getTheme = function() {
            return this.themeNeutre;
        };
        ObjetThemesCouleurs.prototype.getCouleurDuTheme = function(aCouleurDeTheme, aAvecCouleur, aGenreThemeCouleur) {
            var lGenre = aGenreThemeCouleur;
            if (!aGenreThemeCouleur && aGenreThemeCouleur !== 0) {
                lGenre = this.genreTheme;
            }
            var lTheme = this.listeThemes && lGenre >= 0 ? this.listeThemes.GetElementParGenre(lGenre) : null;
            var lThemeCouleur = lTheme ? lTheme.themeCouleur : this.themeNeutre;
            var lJeuDeCouleurs = aAvecCouleur && lThemeCouleur ? lThemeCouleur : this.themeNeutre;
            return lJeuDeCouleurs[aCouleurDeTheme];
        };

        function _getClassThemeCourant() {
            if (this.avecCouleur) {
                var lElementTheme = this.listeThemes.GetElementParGenre(this.genreTheme);
                if (lElementTheme && this.genreTheme >= 0 && MethodesObjet.isNumber(this.genreTheme)) {
                    return 'Theme' + lElementTheme.nom;
                } else {
                    return 'ThemeNeutre';
                }
            }
            return 'ThemeNeutre';
        }
        ObjetThemesCouleurs.prototype.setTheme = function(aGenreTheme, aModeAccessible) {
            this.genreTheme = aGenreTheme;
            this.avecCouleur = !aModeAccessible;
            if (document.body && global.GApplication) {
                var lThemeCourant = _getClassThemeCourant.call(this);
                var lTabRemove = ['ThemeNeutre'];
                this.listeThemes.parcourir(function(aElement) {
                    lTabRemove.push('Theme' + aElement.nom);
                });
                if (this.avecCouleur) {
                    $(document.body).removeClass('ThemeAccessible');
                } else {
                    $(document.body).addClass('ThemeAccessible');
                }
                $('#' + GApplication.getIdConteneur().escapeJQ()).removeClass(lTabRemove.join(' ')).addClass(lThemeCourant);
                if (this.elementZoneFenetre) {
                    $(this.elementZoneFenetre).removeClass(lTabRemove.join(' ')).addClass(lThemeCourant);
                }
            }
        };
        module.exports.GThemesCouleurs = new ObjetThemesCouleurs();
    },
    fn: "themescouleurs.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreDomaineFrequence = {
            H: 0,
            QZ1: 1,
            QZ2: 2
        };
        EGenreDomaineFrequence.getCouleur = function(aGenre) {
            switch (aGenre) {
                case EGenreDomaineFrequence.H:
                    return 'white';
                case EGenreDomaineFrequence.QZ1:
                    return GCouleur.fenetre.cumul;
                case EGenreDomaineFrequence.QZ2:
                    return GCouleur.fenetre.intermediaire;
            }
            return 'white';
        };
        module.exports = EGenreDomaineFrequence;
    },
    fn: "enumere_domainefrequence.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreEspace = {
            Commun: 0,
            Professeur: 1,
            Parent: 2,
            Eleve: 3,
            Entreprise: 4,
            Academie: 5,
            Mobile_Eleve: 6,
            Mobile_Parent: 7,
            Mobile_Professeur: 8,
            Mobile_Commun: 9,
            Etablissement: 13,
            Mobile_Etablissement: 14,
            Gestion_SSO: 15,
            Administrateur: 16,
            Mobile_Administrateur: 17,
            Inscription: 18,
            PrimProfesseur: 19,
            PrimParent: 20,
            Mobile_PrimProfesseur: 21,
            Mobile_PrimParent: 22,
            PrimEleve: 23,
            Mobile_PrimEleve: 24,
            Accompagnant: 25,
            Mobile_Accompagnant: 26,
            PrimAccompagnant: 27,
            Mobile_PrimAccompagnant: 28
        };
        module.exports = EGenreEspace;
    },
    fn: "enumere_espace.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesTableau = require('MethodesTableau.js');
        var EGenrePeriodeDeNotation = {
            Trimestre1: 0,
            Trimestre2: 1,
            Trimestre3: 2,
            Semestre1: 3,
            Semestre2: 4,
            Annuelle: 5,
            Utilisateur: 6
        };
        EGenrePeriodeDeNotation.estTrimestrielle = function(aGenrePeriodeDeNotation) {
            return MethodesTableau.existe(aGenrePeriodeDeNotation, [this.Trimestre1, this.Trimestre2, this.Trimestre3]);
        };
        EGenrePeriodeDeNotation.estSemestrielle = function(aGenrePeriodeDeNotation) {
            return MethodesTableau.existe(aGenrePeriodeDeNotation, [this.Semestre1, this.Semestre2]);
        };
        EGenrePeriodeDeNotation.estAnnuelle = function(aGenrePeriodeDeNotation) {
            return MethodesTableau.existe(aGenrePeriodeDeNotation, [this.Annuelle]);
        };
        EGenrePeriodeDeNotation.estOfficielle = function(aGenrePeriodeDeNotation) {
            return this.estTrimestrielle(aGenrePeriodeDeNotation) || this.estSemestrielle(aGenrePeriodeDeNotation) || this.estAnnuelle(aGenrePeriodeDeNotation);
        };
        module.exports = EGenrePeriodeDeNotation;
    },
    fn: "enumere_periodedenotation.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var UtilitaireCouleur = {
            hslDelphiMax: 240,
            CouleurToRGB: function(aHex) {
                if (!aHex || !aHex.substr || aHex[0] !== '#' || (aHex.length !== 4 && aHex.length < 7)) {
                    return {};
                }
                if (aHex.length === 4) {
                    var lRGBHex = {
                        r: aHex.substr(1, 1),
                        g: aHex.substr(2, 1),
                        b: aHex.substr(3, 1)
                    };
                    return {
                        r: parseInt(lRGBHex.r + lRGBHex.r, 16),
                        g: parseInt(lRGBHex.g + lRGBHex.g, 16),
                        b: parseInt(lRGBHex.b + lRGBHex.b, 16)
                    };
                }
                return {
                    r: parseInt(aHex.substr(1, 2), 16),
                    g: parseInt(aHex.substr(3, 2), 16),
                    b: parseInt(aHex.substr(5, 2), 16)
                };
            },
            CouleurToHSV: function(hex) {
                return this.RGBToHSV(this.CouleurToRGB(hex));
            },
            RGBToCouleur: function(aRGB) {
                var hex = [
                    parseInt(aRGB.r).toString(16), parseInt(aRGB.g).toString(16), parseInt(aRGB.b).toString(16)
                ];
                $.each(hex, function(nr, val) {
                    if (val.length === 1) {
                        hex[nr] = '0' + val;
                    }
                });
                hex = hex.join('');
                return '#' + hex;
            },
            RGBToHSV: function(rgb) {
                var rr, gg, bb, r = rgb.r / 255,
                    g = rgb.g / 255,
                    b = rgb.b / 255,
                    h, s, v = Math.max(r, g, b),
                    diff = v - Math.min(r, g, b),
                    diffc = function(c) {
                        return (v - c) / 6 / diff + 1 / 2;
                    };
                if (diff === 0) {
                    h = s = 0;
                } else {
                    s = diff / v;
                    rr = diffc(r);
                    gg = diffc(g);
                    bb = diffc(b);
                    if (r === v) {
                        h = bb - gg;
                    } else if (g === v) {
                        h = (1 / 3) + rr - bb;
                    } else if (b === v) {
                        h = (2 / 3) + gg - rr;
                    }
                    if (h < 0) {
                        h += 1;
                    } else if (h > 1) {
                        h -= 1;
                    }
                }
                return {
                    h: Math.round(h * 360),
                    s: Math.round(s * 100),
                    l: Math.round(v * 100)
                };
            },
            HSVToCouleur: function(hsl) {
                return this.RGBToCouleur(this.HSVToRGB(hsl));
            },
            HSVToRGB: function(hsl) {
                var rgb = {};
                var h = Math.round(hsl.h);
                var s = Math.round(hsl.s * 255 / 100);
                var v = Math.round(hsl.l * 255 / 100);
                if (s === 0) {
                    rgb.r = rgb.g = rgb.b = v;
                } else {
                    var t1 = v;
                    var t2 = (255 - s) * v / 255;
                    var t3 = (t1 - t2) * (h % 60) / 60;
                    if (h === 360) {
                        h = 0;
                    }
                    if (h < 60) {
                        rgb.r = t1;
                        rgb.b = t2;
                        rgb.g = t2 + t3;
                    } else if (h < 120) {
                        rgb.g = t1;
                        rgb.b = t2;
                        rgb.r = t1 - t3;
                    } else if (h < 180) {
                        rgb.g = t1;
                        rgb.r = t2;
                        rgb.b = t2 + t3;
                    } else if (h < 240) {
                        rgb.b = t1;
                        rgb.r = t2;
                        rgb.g = t1 - t3;
                    } else if (h < 300) {
                        rgb.b = t1;
                        rgb.g = t2;
                        rgb.r = t2 + t3;
                    } else if (h < 360) {
                        rgb.r = t1;
                        rgb.g = t2;
                        rgb.b = t1 - t3;
                    } else {
                        rgb.r = 0;
                        rgb.g = 0;
                        rgb.b = 0;
                    }
                }
                return {
                    r: Math.round(rgb.r),
                    g: Math.round(rgb.g),
                    b: Math.round(rgb.b)
                };
            },
            HSVToHSLDelphi: function(hsv) {
                var lLuminance = (200 - hsv.s) * hsv.l / 200,
                    lHSL = {
                        h: hsv.h * this.hslDelphiMax / 360,
                        s: 0,
                        l: lLuminance * this.hslDelphiMax / 100
                    };
                lHSL.s = (hsv.l > 0 ? hsv.s * hsv.l / (lLuminance < 50 ? lLuminance * 2 : 200 - lLuminance * 2) : hsv.s) * this.hslDelphiMax / 100;
                if (isNaN(lHSL.s)) {
                    lHSL.s = 0;
                }
                return lHSL;
            },
            HSLDelphiToHSV: function(hsl) {
                var lHSV = {
                    h: hsl.h * 360 / this.hslDelphiMax,
                    s: hsl.s * 100 / this.hslDelphiMax,
                    l: hsl.l * 100 / this.hslDelphiMax
                };
                var t = lHSV.s * (lHSV.l < 50 ? lHSV.l : 100 - lHSV.l) / 100;
                lHSV.s = lHSV.l > 0 ? 200 * t / (lHSV.l + t) : lHSV.s;
                if (isNaN(lHSV.s)) {
                    lHSV.s = 0;
                }
                lHSV.l = t + lHSV.l;
                return lHSV;
            }
        };
        module.exports = UtilitaireCouleur;
    },
    fn: "utilitairecouleur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GThemesCouleurs = require('ThemesCouleurs.js').GThemesCouleurs;
        var UtilitaireCouleur = require('UtilitaireCouleur.js');
        global.GCouleur = null;

        function _ObjetCouleur(aGenreThemeCouleur, aEstAccessible, aAvecNonEditable) {
            this.blanc = 'white';
            this.noir = 'black';
            this.eleve = {
                garcon: '#2D24F0',
                fille: '#EE01F6'
            };
            this.themeNeutre = GThemesCouleurs.getThemeNeutre();
            this.themeCouleur = GThemesCouleurs.getThemeCouleur(aGenreThemeCouleur);
            this.fond = this.themeNeutre.light;
            this.texte = this.noir;
            this.bordure = this.trait = this.themeNeutre.moyen2;
            this.cumul = this.themeNeutre.moyen2;
            this.nonEditable = {
                fond: GThemesCouleurs.nonEditable,
                texte: this.themeNeutre.foncee,
                bordure: this.themeNeutre.moyen2
            };
            this.intermediaire = this.themeNeutre.claire;
            this.avecNonEditable = aAvecNonEditable === null || aAvecNonEditable === undefined ? true : aAvecNonEditable;
            this.texteListeCreation = '#444444';
            this.fenetre = {
                fond: this.fond,
                bordure: this.bordure,
                bandeau: {
                    fond: this.blanc,
                    texte: this.noir
                },
                nonEditable: this.nonEditable,
                cumul: this.cumul,
                texte: this.themeNeutre.foncee,
                intermediaire: this.themeNeutre.claire
            };
            this.rouge = aEstAccessible ? '#666666' : '#CC3300';
            this.rougeClair = aEstAccessible ? '#666666' : '#FF0000';
            this.vert = aEstAccessible ? '#666666' : '#228B22';
            this.grisTresClair = this.fenetre.nonEditable;
            this.grisClair = this.fenetre.intermediaire;
            this.grisFonce = this.fenetre.cumul;
            this.grisTresFonce = this.fenetre.texte;
            this.standard = new ObjectCouleurCellule(this.blanc, this.noir);
            this.selection = new ObjectCouleurCellule(aEstAccessible ? '#7b7b7b' : '#3399ff', this.blanc);
            this.selection.fondClair = aEstAccessible ? '#b3b3b3' : '#6699FF';
            this.inactif = new ObjectCouleurCellule('#F0F0F0', '#AAAAAA');
            this.grille = {
                fond: this.themeNeutre.moyen1,
                bordure: '#848484',
                texte: 'black',
                gabarit: aEstAccessible ? '#606060' : '#00BF00',
                fondCoursSuperpose: '#f9f4f0',
                selectionCours: this.selection.fond
            };
            this.bandeau = {
                fond: this.themeNeutre.moyen1,
                texte: this.noir,
                bordure: this.themeNeutre.light,
                separateur: this.themeCouleur.foncee
            };
            this.liste = new ObjectCouleurCellule();
            this.liste.bordure = this.bordure;
            this.liste.bordureSeparationTitre = this.themeCouleur.foncee;
            this.liste.traitSeparationDeploiementAlternance = this.themeCouleur.foncee;
            this.liste.titre = new ObjectCouleurCellule(this.themeNeutre.light, this.themeCouleur.foncee, this.bordure);
            this.liste.cellule = new ObjectCouleurCellule(this.fond, this.texte, this.bordure);
            this.liste.editable = new ObjectCouleurCellule(this.blanc, this.noir, this.bordure);
            this.liste.editableAlternee1 = new ObjectCouleurCellule(this.themeNeutre.light, this.noir, this.bordure);
            this.liste.editableAlternee2 = new ObjectCouleurCellule(this.blanc, this.noir, this.bordure);
            this.liste.nonEditable = new ObjectCouleurCellule(this.avecNonEditable ? this.themeNeutre.legere2 : this.blanc, this.noir, this.bordure);
            this.liste.nonEditableAlternee1 = new ObjectCouleurCellule(this.themeNeutre.claire, this.noir, this.bordure);
            this.liste.nonEditableAlternee2 = new ObjectCouleurCellule(this.themeNeutre.legere2, this.noir, this.bordure);
            this.liste.nonApplicable = new ObjectCouleurCellule(this.themeNeutre.moyen1, this.noir, this.bordure);
            this.liste.colonneFixe = new ObjectCouleurCellule(this.themeNeutre.claire, this.noir, this.bordure);
            this.liste.colonneFixeAlternee1 = new ObjectCouleurCellule(this.themeNeutre.claire, this.noir, this.bordure);
            this.liste.colonneFixeAlternee2 = new ObjectCouleurCellule(this.themeNeutre.legere2, this.noir, this.bordure);
            this.liste.moyenne = new ObjectCouleurCellule(this.themeNeutre.claire, this.noir, this.bordure);
            this.liste.moyenneAlternee1 = new ObjectCouleurCellule(this.themeNeutre.claire, this.noir, this.bordure);
            this.liste.moyenneAlternee2 = new ObjectCouleurCellule(this.themeNeutre.legere2, this.noir, this.bordure);
            this.liste.total = new ObjectCouleurCellule(this.themeNeutre.foncee, this.blanc, this.bordure);
            this.liste.totalAlternee1 = new ObjectCouleurCellule(this.themeNeutre.sombre, this.blanc, this.bordure);
            this.liste.totalAlternee2 = new ObjectCouleurCellule(this.themeNeutre.foncee, this.blanc, this.bordure);
            this.liste.rollover = new ObjectCouleurCellule(this.themeCouleur.moyen1, this.themeCouleur.moyen1, this.themeCouleur.foncee);
            this.liste.cumul = new ObjectCouleurCellule(this.themeCouleur.claire, this.noir, this.bordure);
            this.liste.cumul[0] = new ObjectCouleurCellule(this.themeCouleur.moyen1, this.noir, this.bordure);
            this.liste.cumul[1] = new ObjectCouleurCellule(this.themeCouleur.claire, this.noir, this.bordure);
            this.liste.cumul[2] = new ObjectCouleurCellule(this.themeNeutre.moyen1, this.noir, this.bordure);
            this.liste.cumul[3] = new ObjectCouleurCellule(this.themeNeutre.claire, this.noir, this.bordure);
            this.listeNeutre = MethodesObjet.dupliquer(this.liste);
            this.listeNeutre.titre.fond = this.themeNeutre.light;
            this.listeNeutre.titre.texte = this.themeNeutre.foncee;
            this.listeNeutre.bordureSeparationTitre = this.themeNeutre.foncee;
            this.listeNeutre.traitSeparationDeploiementAlternance = this.themeNeutre.foncee;
            this.listeNeutre.cumul.fond = this.themeNeutre.claire;
            this.listeNeutre.cumul[0].fond = this.themeNeutre.claire;
            this.listeNeutre.cumul[1].fond = this.themeNeutre.claire;
            this.listeNeutre.cumul[2].fond = this.themeNeutre.claire;
            this.listeNeutre.cumul[3].fond = this.themeNeutre.claire;
            this.listeNeutre.rollover = new ObjectCouleurCellule(this.themeNeutre.moyen1, this.themeNeutre.moyen1, this.themeNeutre.foncee);
            this.correspondance = {};
            this.accessible = {};
            this.devoir = {
                commeUnBonus: '#0f0',
                commeUneNote: 'darkorange'
            };
            this.surlignageTexte = '#99cde4';
        }
        _ObjetCouleur.prototype.getCouleurCellule = function(aEditable, aSelectionne, aEstTitre) {
            if (aSelectionne) {
                return this.selection;
            }
            if (aEstTitre) {
                return this.liste.titre;
            }
            return aEditable ? this.liste.editable : this.liste.nonEditable;
        };
        _ObjetCouleur.hslDelphiMax = 240;
        _ObjetCouleur.prototype.CouleurToRGB = function(aHex) {
            return UtilitaireCouleur.CouleurToRGB(aHex);
        };
        _ObjetCouleur.prototype.CouleurToHSV = function(hex) {
            return UtilitaireCouleur.CouleurToHSV(hex);
        };
        _ObjetCouleur.prototype.RGBToCouleur = function(aRGB) {
            return UtilitaireCouleur.RGBToCouleur(aRGB);
        };
        _ObjetCouleur.prototype.RGBToHSV = function(rgb) {
            return UtilitaireCouleur.RGBToHSV(rgb);
        };
        _ObjetCouleur.prototype.HSVToCouleur = function(hsl) {
            return UtilitaireCouleur.HSVToCouleur(hsl);
        };
        _ObjetCouleur.prototype.HSVToRGB = function(hsl) {
            return UtilitaireCouleur.HSVToRGB(hsl);
        };
        _ObjetCouleur.prototype.HSVToHSLDelphi = function(hsv) {
            return UtilitaireCouleur.HSVToHSLDelphi(hsv);
        };
        _ObjetCouleur.prototype.HSLDelphiToHSV = function(hsl) {
            return UtilitaireCouleur.HSLDelphiToHSV(hsl);
        };
        _ObjetCouleur.prototype.getCouleurCorrespondance = function(aCouleur) {
            if (!aCouleur) {
                return aCouleur;
            }
            if (this.correspondance[aCouleur] !== undefined) {
                return this.correspondance[aCouleur];
            }
            var lCouleurHSL = this.HSVToHSLDelphi(this.CouleurToHSV(aCouleur));
            if (Math.round(lCouleurHSL.l) <= 95) {
                this.correspondance[aCouleur] = '#FFFFFF';
            } else if (Math.round(lCouleurHSL.l) > 160) {
                this.correspondance[aCouleur] = '#000000';
            } else if (Math.round(lCouleurHSL.h) <= 120) {
                this.correspondance[aCouleur] = '#000000';
            } else {
                this.correspondance[aCouleur] = '#FFFFFF';
            }
            return this.correspondance[aCouleur];
        };
        _ObjetCouleur.prototype.getCouleurAccessible = function(aCouleur) {
            if (!aCouleur || !aCouleur.substr) {
                return aCouleur;
            }
            if (this.accessible[aCouleur] !== undefined) {
                return this.accessible[aCouleur];
            }
            var r = parseInt(aCouleur.substr(1, 2), 16) / 255;
            var g = parseInt(aCouleur.substr(3, 2), 16) / 255;
            var b = parseInt(aCouleur.substr(5, 2), 16) / 255;
            var max = Math.max(r, g, b),
                min = Math.min(r, g, b);
            var l = (max + min) / 2;
            r = g = b = Math.round(l * 255);
            this.accessible[aCouleur] = '#' + (r < 16 ? '0' : '') + r.toString(16) + (g < 16 ? '0' : '') + g.toString(16) + (b < 16 ? '0' : '') + b.toString(16);
            return this.accessible[aCouleur];
        };
        _ObjetCouleur.prototype.getCouleurTransparente = function(aColor, aOpacity, aBackground, aBackOpa) {
            if (!aColor || !aColor.substr) {
                return false;
            }
            if (aOpacity < 0 || aOpacity > 1) {
                return false;
            }
            if (!aBackOpa || aBackOpa < 0 || aBackOpa > 1) {
                aBackOpa = 1;
            }
            var lDest = [];
            var lFond = [255, 255, 255];
            var lOrig = [];
            if (aBackground && aBackground.substr) {
                lFond[0] = parseInt(aBackground.substr(1, 2), 16);
                lFond[1] = parseInt(aBackground.substr(3, 2), 16);
                lFond[2] = parseInt(aBackground.substr(5, 2), 16);
            }
            lDest[0] = parseInt(aColor.substr(1, 2), 16);
            lDest[1] = parseInt(aColor.substr(3, 2), 16);
            lDest[2] = parseInt(aColor.substr(5, 2), 16);
            for (var i = 0; i < 3; i++) {
                lOrig[i] = Math.floor(((lDest[i] * (aOpacity + aBackOpa * (1 - aOpacity))) - ((lFond[i] * aBackOpa) * (1 - aOpacity))) / aOpacity);
                if (lOrig[i] > 255 || lOrig[i] < 0) {
                    return false;
                }
            }
            return '#' + (lOrig[0] < 16 ? '0' : '') + lOrig[0].toString(16) + (lOrig[1] < 16 ? '0' : '') + lOrig[1].toString(16) + (lOrig[2] < 16 ? '0' : '') + lOrig[2].toString(16);
        };
        _ObjetCouleur.prototype.getCouleurTransformationCours = function(aCouleur) {
            var lRGB = this.CouleurToRGB(aCouleur),
                lHSL = this.HSVToHSLDelphi(this.RGBToHSV(lRGB));
            var lEstProcheDuGris = (Math.abs(lRGB.r - lRGB.g) < 10) && (Math.abs(lRGB.r - lRGB.b) < 10) && (Math.abs(lRGB.g - lRGB.b) < 10);
            if (!lEstProcheDuGris) {
                lEstProcheDuGris = lHSL.s < 8;
            }
            if (lEstProcheDuGris) {
                lRGB.r = Math.borner(lRGB.r + 50, 180, 255);
                lRGB.g = Math.borner(lRGB.g + 50, 180, 255);
                lRGB.b = Math.borner(lRGB.b + 50, 180, 255);
                return this.RGBToCouleur(lRGB);
            } else {
                lHSL.s = Math.max(lHSL.s - 100, 60);
                if (lHSL.l < 140) {
                    lHSL.l = 160;
                } else if (lHSL.l < 160) {
                    lHSL.l = 200;
                } else {
                    lHSL.l = 220;
                }
                return this.HSVToCouleur(this.HSLDelphiToHSV(lHSL));
            }
        };
        _ObjetCouleur.prototype.getCouleurContrastee = function(aCouleur, aCouleurFond, aParametresContraste) {
            if (!aCouleur || !aCouleurFond) {
                return aCouleur || '';
            }
            if (!aParametresContraste) {
                aParametresContraste = {};
            }
            if (aParametresContraste.ponderationFoncee === undefined) {
                aParametresContraste.ponderationFoncee = 1;
            }
            if (aParametresContraste.ponderationClaire === undefined) {
                aParametresContraste.ponderationClaire = 1;
            }
            var lHSL = UtilitaireCouleur.HSVToHSLDelphi(UtilitaireCouleur.CouleurToHSV(aCouleur));
            var lHSLFond = UtilitaireCouleur.HSVToHSLDelphi(UtilitaireCouleur.CouleurToHSV(aCouleurFond));
            var lDeltaInitial = 30;
            var lDeltaRenduPlusFoncee = lDeltaInitial * aParametresContraste.ponderationFoncee;
            var lDeltaRenduPlusClair = lDeltaInitial * aParametresContraste.ponderationClaire;
            if (lHSLFond.l > 75) {
                if (lHSL.l >= lDeltaRenduPlusFoncee) {
                    lHSL.l += (-1 * lDeltaRenduPlusFoncee);
                } else {
                    lHSL.l = 0;
                }
            } else {
                lHSL.l = UtilitaireCouleur.hslDelphiMax - lDeltaRenduPlusClair;
            }
            return UtilitaireCouleur.HSVToCouleur(UtilitaireCouleur.HSLDelphiToHSV(lHSL));
        };

        function ObjectCouleurCellule(aFond, aTexte, aBordure) {
            this.fond = aFond;
            this.texte = aTexte;
            this.bordure = aBordure;
        }
        ObjectCouleurCellule.prototype.getFond = function(aPourImpression) {
            return aPourImpression ? global.GCouleur.blanc : this.fond;
        };
        ObjectCouleurCellule.prototype.getTexte = function(aPourImpression) {
            return aPourImpression ? global.GCouleur.noir : this.texte;
        };
        ObjectCouleurCellule.prototype.getBordure = function(aPourImpression) {
            return aPourImpression ? global.GCouleur.noir : this.bordure;
        };
        module.exports._ObjetCouleur = _ObjetCouleur;
        module.exports.ObjectCouleurCellule = ObjectCouleurCellule;
    },
    fn: "_objetcouleur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GStyle = require('GStyle.js');
        MethodesObjet.heritagePrototype(ObjetCouleur, require('_ObjetCouleur.js')._ObjetCouleur);

        function ObjetCouleur(aThemeEspace, aEstAccessible, aAvecNonEditable) {
            this.inheritedCreate(aThemeEspace, aEstAccessible, aAvecNonEditable);
            this.service = this.intermediaire;
            this.note = '#FFFFCC';
            this.periodesFonce = new Array('', '#CC33CC', '#399361', '#3399FF', '#CC33CC', '#399361', '#CC33CC');
            this.periodesClair = new Array('', '#EBA2D5', '#8CE4A3', '#A9D4E9', '#EBA2D5', '#8CE4A3', '#EBA2D5');
            $.extend(this.grille, {
                indisponibilite: '#F18280',
                indisponibiliteSouple: '#f9d059',
                voeu: '#8acb63',
                demiPensionActive: '#52E252',
                demiPensionInactive: '#B54095',
                indisponibiliteSession: '#0066CC',
                indisponibiliteSessionPlanning: '#326699',
                horsPlageSessionRencontre: '#F0F0F0',
                recreations: '#F4D217'
            });
            this.grilleOccupation = {
                fond: '#808080',
                placeLibre: '#FFFFFF',
                bordure: '#f9f4f0'
            };
            this.grilleSlider = {
                fond: '#D8D8D8',
                fondBouton: '#F0F0F0',
                fondBoutonSurvol: '#D0D0D0',
                fondBoutonSelectionne: '#FFFFFF',
                boutonBordureFonce: '#A0A0A0',
                boutonBordureClaire: '#FFFFFF'
            };
            this.voeuxRencontres = ["#FFFFFF", "#F7B95D", "#7EECAA", "#F95959"];
            this.diagnostic = {
                placeLibre: 'white',
                occupation: 'red',
                occupationPermanence: '#FFBF3A',
                demiPension: '#884605',
                site: '#FF00CC',
                absenceRessource: '#CC0033',
                indisponibilite: '#d5818a',
                gaev: '#CC0033',
                recreation: '#784c1e'
            };
        }
        ObjetCouleur.prototype.composeCouleurSelection = function() {
            return GStyle.composeCouleur(this.selection.fond, this.selection.texte);
        };
        ObjetCouleur.prototype.setCouleurSelection = function(aId) {
            GStyle.setCouleur(aId, this.selection.fond, this.selection.texte);
        };
        module.exports = ObjetCouleur;
    },
    fn: "objetcouleur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesTableau = require('MethodesTableau.js');
        var GChaine = require('GChaine.js');
        var ObjetCycles = require('ObjetCycles.js');
        var GDate = require('ObjetDate.js').GDate;
        var ObjetListeElements = require('ObjetListeElements.js');
        var GThemesCouleurs = require('ThemesCouleurs.js').GThemesCouleurs;
        var TypeDomaine = require('TypeDomaine.js');
        var TypeNote = require('TypeNote.js');
        var EGenreDomaineFrequence = require('Enumere_DomaineFrequence.js');
        var EGenreEspace = require('Enumere_Espace.js');
        var EGenrePeriodeDeNotation = require('Enumere_PeriodeDeNotation.js');
        global.GParametres = null;

        function ObjetParametres(aJSON) {
            GApplication.initDateServeur(aJSON.DateServeurHttp);
            GApplication.setDateDemo(aJSON.DateDemo);
            this.avecMembre = aJSON.avecMembre;
            this.pourNouvelleCaledonie = aJSON.pourNouvelleCaledonie;
            this.genreImageConnexion = aJSON.genreImageConnexion;
            this.urlImageConnexion = aJSON.urlImageConnexion;
            this.avecAccesMobile = aJSON.AvecEspaceMobile;
            this.URLMobile = aJSON.URLMobile;
            this.URLEspace = aJSON.URLEspace;
            this.logoProduitCss = aJSON.logoProduitCss;
            this.listeCivilites = aJSON.listeCivilites;
            this.listePays = aJSON.listePays;
            this.listeLienParente = aJSON.listeLienParente;
            this.listeMatieres = aJSON.listeMatieres;
            this.listeOrientations = aJSON.listeOrientations;
            this.listeVilles = aJSON.listeVilles;
            this.listeRegimes = aJSON.listeRegimes;
            this.listeEtablissements = aJSON.listeEtablissements;
            this.listeSituations = aJSON.listeSituations;
            this.listeProfessions = aJSON.listeProfessions;
            this.listeSessionsInscriptions = aJSON.listeSessionsInscriptions;
            this.listePolices = aJSON.listePolices;
            var lJGeneral = this.general = aJSON.General;
            this.version = lJGeneral.version;
            this.versionPN = lJGeneral.versionPN;
            this.millesime = lJGeneral.millesime;
            this.langue = lJGeneral.langue;
            this.langID = lJGeneral.langID;
            this.listeLangues = lJGeneral.listeLangues;
            this.lienMentions = lJGeneral.lienMentions;
            this.avecForum = lJGeneral.avecForum;
            this.estHebergeEnFrance = lJGeneral.estHebergeEnFrance;
            this.urlSiteIndexEducation = lJGeneral.urlSiteIndexEducation;
            this.urlAide = lJGeneral.UrlAide;
            this.urlAccesVideos = lJGeneral.urlAccesVideos;
            this.urlAccesTwitter = lJGeneral.urlAccesTwitter;
            this.urlFAQEnregistrementDoubleAuth = lJGeneral.urlFAQEnregistrementDoubleAuth;
            this.urlCanope = lJGeneral.urlCanope;
            this.urlStopCovid = lJGeneral.urlStopCovid;
            this.logo = lJGeneral.logo;
            this.logoDepartementImage = lJGeneral.logoDepartementImage;
            this.logoDepartementLien = lJGeneral.logoDepartementLien;
            this.avecChoixConnexion = lJGeneral.AvecChoixConnexion;
            this.afficherSemainesCalendaires = lJGeneral.afficherSemainesCalendaires;
            this.anneeScolaire = lJGeneral.anneeScolaire;
            this.dateDebutPremierCycle = lJGeneral.dateDebutPremierCycle;
            this.PremierLundi = lJGeneral.PremierLundi;
            this.PremiereDate = lJGeneral.PremiereDate;
            this.DerniereDate = lJGeneral.DerniereDate;
            this.PremierJourSemaine = GDate.GetJourDeDate(this.PremierLundi);
            this.DernierJourSemaine = (this.PremierJourSemaine + 6) % 7;
            this.listeJoursFeries = lJGeneral.listeJoursFeries;
            this.JourOuvre = lJGeneral.JourOuvre;
            this.JoursOuvres = lJGeneral.JoursOuvres;
            this.DemiJourneesOuvrees = lJGeneral.DemiJourneesOuvrees;
            this.joursDemiPension = lJGeneral.JoursDemiPension;
            this.JoursFeries = this.getJoursFeries();
            this.PlacesParJour = lJGeneral.PlacesParJour;
            this.PlacesParHeure = lJGeneral.PlacesParHeure;
            this.DureeSequence = lJGeneral.DureeSequence;
            this.PlaceDemiJournee = lJGeneral.PlaceDemiJourneeAbsence;
            this.joursOuvresParCycle = lJGeneral.joursOuvresParCycle;
            this.premierJourSemaine = lJGeneral.premierJourSemaine;
            this.grillesEDTEnCycle = lJGeneral.grillesEDTEnCycle;
            this.setOfJoursCycleOuvre = lJGeneral.setOfJoursCycleOuvre;
            this.activationDemiPension = lJGeneral.activationDemiPension;
            this.debutDemiPension = lJGeneral.debutDemiPension;
            this.finDemiPension = lJGeneral.finDemiPension;
            this.recreations = lJGeneral.recreations;
            this.AvecHeuresPleinesApresMidi = lJGeneral.AvecHeuresPleinesApresMidi;
            this.LibellesHeures = lJGeneral.ListeHeures;
            this.LibellesHeuresFin = lJGeneral.ListeHeuresFin;
            this.PremiereHeure = lJGeneral.PremiereHeure;
            this.afficherSequences = lJGeneral.afficherSequences;
            this.sequences = lJGeneral.sequences;
            this.ActivationMessagerieEntreParents = lJGeneral.ActivationMessagerieEntreParents;
            this.NomEtablissement = lJGeneral.NomEtablissement;
            this.NomEtablissementConnexion = lJGeneral.NomEtablissementConnexion;
            this.NomEspace = aJSON.Nom;
            this.listeComboPeriodes = lJGeneral.listeComboPeriodes;
            this.listeAnneesPrecedentes = lJGeneral.listeAnneesPrecedentes;
            this.tailleMaxAppreciation = lJGeneral.TailleMaxAppreciation;
            this.baremeNotation = lJGeneral.BaremeNotation;
            if (TypeNote) {
                TypeNote.baremeNotation = this.baremeNotation;
            }
            if (TypeNote) {
                TypeNote.listeAnnotationsAutorisees = lJGeneral.listeAnnotationsAutorisees;
            }
            this.minBaremeQuestionQCM = lJGeneral.minBaremeQuestionQCM;
            this.maxBaremeQuestionQCM = lJGeneral.maxBaremeQuestionQCM;
            this.maxNombrePointsQCM = lJGeneral.maxNbPointQCM;
            this.tailleLibelleElementGrilleCompetence = lJGeneral.tailleLibelleElementGrilleCompetence;
            this.tailleCommentaireDevoir = lJGeneral.tailleCommentaireDevoir;
            this.tailleMaxLibelleUrlCours = lJGeneral.tailleLibelleUrlCours;
            this.tailleMaxCommentaireUrlCours = lJGeneral.tailleCommentaireUrlCours;
            this.listeNiveauxDAcquisitions = lJGeneral.ListeNiveauxDAcquisitions;
            this.afficherAbbreviationNiveauDAcquisition = lJGeneral.AfficherAbbreviationNiveauDAcquisition;
            this.avecEvaluationHistorique = lJGeneral.AvecEvaluationHistorique;
            this.avecO365 = lJGeneral.O365_Actif;
            if (this.avecO365 === true) {
                this.lienO365Tuto_Office = lJGeneral.O365_UrlTuto_Office;
                this.lienO365Tuto_OneDrive = lJGeneral.O365_UrlTuto_OneDrive;
            }
            this.avecRecuperationInfosConnexion = lJGeneral.AvecRecuperationInfosConnexion;
            this.avecElevesRattaches = lJGeneral.AvecElevesRattaches;
            this.police = lJGeneral.Police;
            this.taillePolice = lJGeneral.TaillePolice + 'px';
            this.publicationSuiviStageParDefaut = lJGeneral.publicationSuiviStage;
            if (lJGeneral.maskTelephone) {
                GChaine.maskTelephone = lJGeneral.maskTelephone;
            }
            var lDomainesFrequences = lJGeneral.DomainesFrequences;
            var lLibellesFrequences = lJGeneral.LibellesFrequences;
            this.frequences = null;
            if (!GEtatUtilisateur.pourPrimaire()) {
                this.frequences = [];
                for (var lNumeroSemaine = 1; lNumeroSemaine <= ObjetCycles.C_MaxDomaineCycle; lNumeroSemaine++) {
                    this.frequences[lNumeroSemaine] = {};
                    for (var I in EGenreDomaineFrequence) {
                        var lGenre = EGenreDomaineFrequence[I];
                        if ((lGenre === EGenreDomaineFrequence.QZ1) || (lGenre === EGenreDomaineFrequence.QZ2)) {
                            if (lDomainesFrequences[lGenre].GetValeur(lNumeroSemaine)) {
                                this.frequences[lNumeroSemaine].genre = lGenre;
                                this.frequences[lNumeroSemaine].libelle = lLibellesFrequences[lGenre];
                            }
                        }
                    }
                }
            }
            this.themeParDefaut = aJSON.Theme;
            GThemesCouleurs.setTheme(this.themeParDefaut);
            this.initialiserCouleur();
            this.listePeriodes = new ObjetListeElements().fromJSON(lJGeneral.ListePeriodes, this._ajouterPeriode);
            this.nomCookieAppli = lJGeneral.nomCookieAppli;
            if ((GEtatUtilisateur.GenreEspace === EGenreEspace.Inscription) && aJSON.infosInscription) {
                this.infosInscription = aJSON.infosInscription;
            }
        }
        ObjetParametres.prototype.getLibelleHeure = function(aPlace) {
            try {
                return this.LibellesHeures.GetLibelle(aPlace);
            } catch (e) {
                return '';
            }
        };
        ObjetParametres.prototype.getCookieValidationAppli = function() {
            return this.nomCookieAppli;
        };
        ObjetParametres.prototype.initAuthentification = function(aParam) {
            this.domaineVerrou = aParam.domaineVerrou ? aParam.domaineVerrou : new TypeDomaine();
        };
        ObjetParametres.prototype.getThemeCourant = function() {
            var lThemeSauvegarde = GApplication && GApplication.parametresUtilisateur && GApplication.parametresUtilisateur.get && GApplication.parametresUtilisateur.get('theme');
            var lTheme = GThemesCouleurs.getThemeCourant({
                genreEspace: GEtatUtilisateur.GenreEspace,
                themeParDefaut: this.themeParDefaut,
                theme: lThemeSauvegarde
            });
            return lTheme;
        };
        ObjetParametres.prototype.initialiserCouleur = function(aTheme) {
            var lTheme = aTheme !== undefined ? aTheme : null;
            if (!lTheme) {
                var lThemeSauvegarde = GApplication && GApplication.parametresUtilisateur && GApplication.parametresUtilisateur.get && GApplication.parametresUtilisateur.get('theme');
                if (lThemeSauvegarde) {
                    lTheme = lThemeSauvegarde;
                } else {
                    lTheme = {
                        theme: GThemesCouleurs.genreTheme
                    };
                }
            }
            GThemesCouleurs.setTheme(lTheme.theme, GEtatUtilisateur.estModeAccessible());
            var ObjetCouleur = require('ObjetCouleur.js');
            global.GCouleur = new ObjetCouleur(lTheme.theme, GEtatUtilisateur.estModeAccessible(), !MethodesTableau.existe(GEtatUtilisateur.GenreEspace, [EGenreEspace.Parent, EGenreEspace.Inscription, EGenreEspace.Eleve, EGenreEspace.PrimParent, EGenreEspace.PrimEleve, EGenreEspace.Accompagnant, EGenreEspace.PrimAccompagnant]));
            setTimeout(function() {
                Invocateur.evenement(ObjetInvocateur.events.modificationThemeCouleur);
            }, 1);
            $('#id_body').addClass('Scroll');
        };
        ObjetParametres.prototype.GetNomEspace = function() {
            return this.NomEspace;
        };
        ObjetParametres.prototype.getJoursFeries = function() {
            var lJoursFeries = new TypeDomaine(null, 365);
            for (var I = 0; I < this.listeJoursFeries.GetNbrElements(); I++) {
                var lJourFerie = this.listeJoursFeries.GetElement(I);
                lJoursFeries.SetValeur(true, GDate.getNbrJoursEntreDeuxDates(this.dateDebutPremierCycle, lJourFerie.dateDebut) + 1, GDate.getNbrJoursEntreDeuxDates(this.dateDebutPremierCycle, lJourFerie.dateFin) + 1);
            }
            return lJoursFeries;
        };
        ObjetParametres.prototype.getDomaineCycleFerie = function() {
            if (!this.domaineCycleFerie) {
                this.domaineCycleFerie = new TypeDomaine();
                var lCycle, lJourCycle, LSemaineFeriee, lNombreCycles = IE.Cycles.nombreCyclesAnneeScolaire(),
                    lNombreJoursCycle = IE.Cycles.nombreJoursOuvresParCycle();
                for (lCycle = 1; lCycle <= lNombreCycles; lCycle += 1) {
                    LSemaineFeriee = true;
                    for (lJourCycle = 0; lJourCycle < lNombreJoursCycle && LSemaineFeriee; lJourCycle += 1) {
                        var lJourAnnuel = GDate.getNbrJoursEntreDeuxDates(this.dateDebutPremierCycle, IE.Cycles.jourCycleEnDate(lJourCycle, lCycle));
                        LSemaineFeriee = this.JoursFeries.GetValeur(lJourAnnuel + 1);
                    }
                    this.domaineCycleFerie.SetValeur(LSemaineFeriee, lCycle);
                }
            }
            return this.domaineCycleFerie;
        };
        ObjetParametres.prototype.getTailleMaxAppreciationParEnumere = function(aGenre) {
            var lTailleMaxAppreciation = 255;
            if (aGenre !== null) {
                lTailleMaxAppreciation = this.tailleMaxAppreciation[aGenre];
            }
            return lTailleMaxAppreciation ? lTailleMaxAppreciation : 1000000;
        };
        ObjetParametres.prototype._ajouterPeriode = function(aJSON, aElement) {
            aElement.periodeNotation = aJSON.periodeNotation;
            aElement.dates = {};
            aElement.dates.debut = aJSON.dateDebut;
            aElement.dates.fin = aJSON.dateFin;
        };
        ObjetParametres.prototype.getDatesPeriodeDeNotation = function(aNumeroPeriode) {
            var lPeriode = this.listePeriodes.GetElementParNumero(aNumeroPeriode);
            return lPeriode ? lPeriode.dates : null;
        };
        ObjetParametres.prototype.getDateDansPeriodeDeNotation = function(aDate, aNumeroPeriode) {
            var lDates = this.getDatesPeriodeDeNotation(aNumeroPeriode);
            var lDate = aDate ? aDate : GDate.getDateCourante();
            if (lDates && (lDate > lDates.fin)) {
                return lDates.fin;
            }
            if (lDates && (lDate < lDates.debut)) {
                return lDates.debut;
            }
            return lDate;
        };
        ObjetParametres.prototype.getPeriodeDeNotation = function(aNumeroPeriode) {
            var lPeriode = this.listePeriodes.GetElementParNumero(aNumeroPeriode);
            return lPeriode ? lPeriode.periodeNotation : null;
        };
        ObjetParametres.prototype.getPeriodeDeNotationParGenre = function(aGenrePeriodeDeNotation) {
            for (var i = 0; i < this.listePeriodes.GetNbrElements(); i++) {
                var lPeriode = this.listePeriodes.GetElement(i);
                if (aGenrePeriodeDeNotation === lPeriode.periodeNotation) {
                    return lPeriode;
                }
            }
        };
        ObjetParametres.prototype.estPeriodeTrimestrielle = function(aNumeroPeriode) {
            return EGenrePeriodeDeNotation.estTrimestrielle(this.getPeriodeDeNotation(aNumeroPeriode));
        };
        ObjetParametres.prototype.estPeriodeSemestrielle = function(aNumeroPeriode) {
            return EGenrePeriodeDeNotation.estSemestrielle(this.getPeriodeDeNotation(aNumeroPeriode));
        };
        ObjetParametres.prototype.estPeriodeAnnuelle = function(aNumeroPeriode) {
            return EGenrePeriodeDeNotation.estAnnuelle(this.getPeriodeDeNotation(aNumeroPeriode));
        };
        ObjetParametres.prototype.estPeriodeOfficielle = function(aNumeroPeriode) {
            return EGenrePeriodeDeNotation.estOfficielle(this.getPeriodeDeNotation(aNumeroPeriode));
        };
        ObjetParametres.prototype.getListeComboPeriodes = function(aGenres) {
            if (!aGenres) {
                return this.listeComboPeriodes;
            }
            var lListePeriodes = new ObjetListeElements();
            for (var I = 0; I < this.listeComboPeriodes.GetNbrElements(); I++) {
                var lPeriode = this.listeComboPeriodes.GetElement(I);
                if (MethodesTableau.existe(lPeriode.GetGenre(), aGenres)) {
                    lListePeriodes.AddElement(lPeriode);
                }
            }
            return lListePeriodes;
        };
        module.exports = ObjetParametres;
    },
    fn: "parametres.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        function Chronometre() {
            this.reset();
            this.actif = true;
        }
        Chronometre.prototype.start = function() {
            this.dateChrono = Date.now();
            this.actif = true;
        };
        Chronometre.prototype.stop = function() {
            this.valeur += Date.now() - this.dateChrono;
            this.actif = false;
        };
        Chronometre.prototype.reset = function() {
            this.dateChrono = Date.now();
            this.valeur = 0;
        };
        Chronometre.prototype.toString = function() {
            var lValeur = this.valeur + (this.actif ? (Date.now() - this.dateChrono) : 0);
            if (lValeur > 1000) {
                return (lValeur / 1000) + ' s';
            }
            return lValeur + ' ms';
        };
        module.exports = Chronometre;
    },
    fn: "chronometre.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('NamespaceIE.js');
        require('divers.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var deferLoadingScript = (function() {
            var lModules = {},
                isOpera = typeof window.opera !== 'undefined' && window.opera.toString() === '[object Opera]',
                lUrlsDone = {},
                options = {
                    done: null,
                    fail: null,
                    messageChargement: ''
                },
                lModuleEnCours = null,
                lSupportASync, lHead = null;

            function createNode(config) {
                var node = config.xhtml ? document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') : document.createElement('script');
                node.type = config.scriptType || 'text/javascript';
                node.async = false;
                return node;
            }

            function removeListener(node, func, name, ieName) {
                if (node.detachEvent && !isOpera) {
                    if (ieName) {
                        node.detachEvent(ieName, func);
                    }
                } else {
                    node.removeEventListener(name, func, false);
                }
            }

            function _getHead() {
                if (!lHead) {
                    lHead = document.getElementsByTagName('head')[0];
                }
                return lHead;
            }

            function createLoaderScript(aUrl, aCallback, aParams) {
                function finScript(evt) {
                    var node = evt.currentTarget || evt.srcElement;
                    removeListener(node, onScriptLoad, 'load', 'onreadystatechange');
                    removeListener(node, onScriptError, 'error');
                    return node;
                }

                function onScriptLoad(evt) {
                    if (evt.type === 'load' || (/^(complete|loaded)$/.test((evt.currentTarget || evt.srcElement).readyState))) {
                        finScript(evt);
                        lLoader.loaded = true;
                        lLoader.finChargement();
                    }
                }
                var lLoader = {
                    url: aUrl,
                    loaded: false,
                    loadedFail: false,
                    chrono: null,
                    supportASync: false,
                    timerFail: -1,
                    params: aParams,
                    load: function() {
                        if (this.loaded) {
                            this.finChargement();
                            return;
                        }
                        this.chrono = new(require('Chronometre.js'))();
                        var node = createNode({});
                        if (lSupportASync === undefined) {
                            if (!document.addEventListener) {
                                lSupportASync = false;
                            } else {
                                lSupportASync = 'async' in node;
                            }
                        }
                        if (node.attachEvent &&
                            !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                            !isOpera) {
                            node.attachEvent('onreadystatechange', onScriptLoad);
                            lSupportASync = false;
                        } else {
                            node.addEventListener('load', onScriptLoad, false);
                            node.addEventListener('error', onScriptError, false);
                        }
                        node.src = this.url;
                        if (lSupportASync && this.params.accepteASync) {
                            node.async = false;
                        }
                        _getHead().appendChild(node);
                        var lSelf = this;
                        this.timerFail = setTimeout(function() {
                            lSelf.loadedTimeoutFail = true;
                            onScriptError({
                                currentTarget: node
                            });
                        }, aParams.timeoutFailScript);
                        if (lSupportASync && this.params.accepteASync && this.next) {
                            this.params._compteurTimeout += 1;
                            if (this.params.timeoutLoad >= 0 && this.params._compteurTimeout >= this.params.nbPourDelaiTimeout) {
                                this.params._compteurTimeout = 0;
                                setTimeout(function() {
                                    lSelf.next.load();
                                }, this.params.timeoutLoad);
                            } else {
                                Promise.resolve().then(function() {
                                    this.next.load();
                                }.bind(this));
                            }
                        }
                    },
                    finChargement: function() {
                        clearTimeout(this.timerFail);
                        aCallback(this);
                        if (this.next && !(lSupportASync && this.params.accepteASync)) {
                            this.next.load();
                        }
                    }
                };

                function onScriptError(evt) {
                    finScript(evt);
                    lLoader.loadedFail = true;
                    lLoader.finChargement();
                }
                return lLoader;
            }

            function _loadSingletonModule(aNom, aParams) {
                var lNom = aNom.toLowerCase(),
                    lModule = lModules[lNom];
                lModule.nom = aNom;
                lModule.params = aParams;

                function _callbackFin(aEchec) {
                    if (aEchec) {
                        if (options.fail) {
                            options.fail(aNom, lModule);
                        }
                        if (aParams.fail) {
                            aParams.fail(aNom, lModule);
                        }
                    } else {
                        if (options.done) {
                            options.done(aNom, lModule);
                        }
                        aParams.done(aNom, lModule);
                    }
                }
                if (!aParams || !aParams.done) {
                    return this;
                }
                if (!lModule) {
                    _callbackFin();
                    return this;
                }
                if (lModuleEnCours === lNom) {
                    return this;
                }
                lModuleEnCours = lNom;
                var lUrl, i, lScript, LPrevScript;

                function _callback(aLoader) {
                    if (lModule.interrupt) {
                        return;
                    }
                    if (aLoader.loadedFail) {
                        aLoader.next = null;
                        lModule.interrupt = true;
                        _callbackFin(true);
                        return;
                    }
                    lUrlsDone[aLoader.url] = true;
                    if (!aLoader.next) {
                        _callbackFin();
                    }
                }
                lModule.first = null;
                for (i = 0; i < lModule.urls.length; i++) {
                    lUrl = lModule.urls[i];
                    if (!lUrlsDone[lUrl]) {
                        lScript = createLoaderScript(lUrl, _callback, aParams);
                        if (LPrevScript) {
                            LPrevScript.next = lScript;
                        }
                        if (!lModule.first) {
                            lModule.first = lScript;
                        }
                        LPrevScript = lScript;
                    }
                }
                if (lModule.first) {
                    lModule.first.load(lModule);
                } else {
                    _callbackFin();
                }
            }
            return {
                add: function(aNom, aUrls) {
                    var lNom = aNom.toLowerCase(),
                        lModule = {
                            urls: [],
                            count: 0
                        },
                        lUrl, i;
                    lModules[lNom] = lModule;
                    for (i = 0; i < aUrls.length; i++) {
                        lUrl = aUrls[i];
                        lModule.urls.push(lUrl);
                    }
                    return this;
                },
                contains: function(aNom) {
                    return !!lModules[aNom.toLowerCase()];
                },
                setOptions: function(aOptions) {
                    Object.assign(options, aOptions);
                    return this;
                },
                load: function(aNom, aParam) {
                    if (MethodesObjet.isString(aNom)) {
                        this.load([aNom], aParam);
                        return;
                    }

                    function _loadSingletonDeTableau(aDefer, aNomsTraites, aParam, aDone, aFail) {
                        if (aNomsTraites.length === 0) {
                            lModuleEnCours = null;
                            if (aParam.eventIO !== false) {
                                Invocateur.evenement(ObjetInvocateur.events.patience, false);
                            }
                            aDone();
                            return;
                        }
                        aParam.done = function() {
                            aNomsTraites.shift();
                            if (aParam.timeoutLoadGroupe >= 0) {
                                setTimeout(function() {
                                    _loadSingletonDeTableau(aDefer, aNomsTraites, aParam, aDone, aFail);
                                }, aParam.timeoutLoadGroupe);
                            } else {
                                Promise.resolve().then(function() {
                                    _loadSingletonDeTableau(aDefer, aNomsTraites, aParam, aDone, aFail);
                                });
                            }
                        };
                        aParam.fail = function(aNom) {
                            aNomsTraites = [];
                            if (aParam.eventIO !== false) {
                                Invocateur.evenement(ObjetInvocateur.events.patience, false);
                            }
                            if (aFail) {
                                aFail(aNom);
                            }
                        };
                        aParam._compteurTimeout = 0;
                        if (aDefer.contains(aNomsTraites[0])) {
                            if (aParam.eventIOExt) {
                                Invocateur.evenement(ObjetInvocateur.events.patience, false);
                            }
                            if (aParam.eventIO !== false) {
                                Invocateur.evenement(ObjetInvocateur.events.patience, true, {
                                    actualisation: true,
                                    message: (options.messageChargement + ' ' + aNomsTraites[0]).trim()
                                });
                            }
                            _loadSingletonModule.call(aDefer, aNomsTraites[0], aParam);
                        } else {
                            aParam.done();
                        }
                    }
                    var lParams = Object.assign({
                        done: null,
                        fail: null,
                        eventIO: false,
                        timeoutLoadGroupe: -1,
                        timeoutLoad: -1,
                        nbPourDelaiTimeout: 1,
                        accepteASync: true,
                        timeoutFailScript: 3 * 60 * 1000
                    }, aParam);
                    if (Array.isArray(aNom)) {
                        var lDone = lParams.done,
                            lFail = lParams.fail;
                        if (lParams.eventIO !== false) {
                            Invocateur.evenement(ObjetInvocateur.events.patience, true, {
                                message: options.messageChargement
                            });
                        }
                        _loadSingletonDeTableau(this, aNom, lParams, lDone, lFail);
                        return this;
                    } else {
                        return this;
                    }
                },
                loadPromise: function(aNom, aParam) {
                    return new Promise(function(aResolve, aReject) {
                        var lParams = Object.assign(aParam || {}, {
                            done: function(aParam) {
                                aResolve(aParam);
                            },
                            fail: function(aParam) {
                                aReject(aParam);
                            }
                        });
                        deferLoadingScript.load(aNom, lParams);
                    }.bind(this));
                },
                afficherPatience: function() {
                    if (!lModuleEnCours) {
                        return false;
                    }
                    var lModule = lModules[lModuleEnCours.toLowerCase()];
                    if (!lModule || !lModule.nom || !lModule.params) {
                        return false;
                    }
                    lModule.params.eventIO = true;
                    lModule.params.eventIOExt = true;
                    Invocateur.evenement(ObjetInvocateur.events.patience, true, {
                        message: (options.messageChargement + ' ' + lModule.nom).trim()
                    });
                    return true;
                }
            };
        }());
        module.exports = deferLoadingScript;
    },
    fn: "deferloadingscript.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreCryptage = {
            Aucun: 0,
            Unicode: 1,
            AES: 2,
            RSA: 3
        };
        module.exports = EGenreCryptage;
    },
    fn: "enumere_cryptage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreIdsRequeteAjax = {
            SignatureAttente: '_SignatureAttente_',
            numeroSession: 'session',
            numeroOrdre: 'numeroOrdre',
            donneesSecurisee: 'donneesSec',
            donneesNonSecurisee: 'donneesNonSec',
            nomFonction: 'nom'
        };
        module.exports = EGenreIdsRequeteAjax;
    },
    fn: "enumere_idsrequeteajax.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationForge.js');

        function ObjetCryptageAES() {}
        ObjetCryptageAES.prototype.Decrypter = function(aChaine, aCle, aIv) {
            try {
                aCle = forge.md.md5.create().update(aCle.bytes()).digest();
                aIv = aIv.length() ? forge.md.md5.create().update(aIv.bytes()).digest() : new forge.util.ByteBuffer('\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0');
                aChaine = new forge.util.ByteBuffer(forge.util.hexToBytes(aChaine));
                var lChiffreur = forge.cipher.createDecipher('AES-CBC', aCle);
                lChiffreur.start({
                    iv: aIv
                });
                lChiffreur.update(aChaine);
                return lChiffreur.finish() && lChiffreur.output.bytes();
            } catch (e) {
                return false;
            }
        };
        ObjetCryptageAES.prototype.Encrypter = function(aChaine, aCle, aIv, aBytes) {
            try {
                aCle = forge.md.md5.create().update(aCle.bytes()).digest();
                aIv = aIv.length() ? forge.md.md5.create().update(aIv.bytes()).digest() : new forge.util.ByteBuffer('\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0');
                aChaine = new forge.util.ByteBuffer(aChaine);
                var lChiffreur = forge.cipher.createCipher('AES-CBC', aCle);
                lChiffreur.start({
                    iv: aIv
                });
                lChiffreur.update(aChaine);
                return lChiffreur.finish() && lChiffreur.output.toHex();
            } catch (e) {
                return false;
            }
        };
        module.exports = ObjetCryptageAES;
    },
    fn: "objetcryptageaes.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationForge.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;

        function ObjetCryptageRSA(aModulo, aExposant) {
            this.modulo = aModulo;
            this.exposant = aExposant;
            Invocateur.abonner(ObjetInvocateur.events.initChiffrement, function(aParam) {
                this.setClePublique(aParam.MR, aParam.ER);
            }, this);
        }
        ObjetCryptageRSA.prototype.encrypter = function(aChaine) {
            var lRSA = forge.pki.rsa.setPublicKey(new forge.jsbn.BigInteger(this.modulo, 16), new forge.jsbn.BigInteger(this.exposant, 16));
            var lResult = forge.util.encode64(lRSA.encrypt(aChaine.bytes()), 64);
            return lResult;
        };
        ObjetCryptageRSA.prototype.setClePublique = function(aModulo, aExposant) {
            this.modulo = aModulo;
            this.exposant = aExposant;
        };
        module.exports = ObjetCryptageRSA;
    },
    fn: "objetcryptagersa.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationForge.js');
        require('DeclarationPako.js');
        var EGenreCryptage = require('Enumere_Cryptage.js');
        var ObjetCryptageAES = require('ObjetCryptageAES.js');
        var ObjetCryptageRSA = require('ObjetCryptageRSA.js');
        var GCryptage = new ObjetCryptage();

        function ObjetCryptage() {
            this.Minuscules = 'abcdefghijklmnopkrstuvwxyz';
            this.Majuscules = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            this.Nombres = '0123456789';
            this.Caracteres = '&#|^@£$µ?!%ù§~°()[]{}+-*/=.,;';
            this.CryptageAES = new ObjetCryptageAES();
            try {
                this.cryptageRSA = new ObjetCryptageRSA('', '');
            } catch (e) {}
        }
        ObjetCryptage.prototype.GenererTexteAleatoire = function(ALongueur) {
            var LListeCaracteres = this.Minuscules + this.Majuscules + this.Nombres;
            var N = LListeCaracteres.length;
            var LChaine = '';
            while (LChaine.length < ALongueur) {
                LChaine += LListeCaracteres.charAt(Math.floor(N * Math.random()));
            }
            return LChaine;
        };
        ObjetCryptage.prototype.getBuffer = function(aChaine) {
            return new forge.util.ByteBuffer(forge.util.encodeUtf8(aChaine));
        };
        ObjetCryptage.prototype.encrypter = function(aOptions) {
            var lDefault = {
                genreCryptage: EGenreCryptage.Aucun,
                chaine: '',
                cle: '',
                iv: '',
                avecAlea: false,
                avecCompression: false
            };
            var lOptions = {};
            $.extend(lOptions, lDefault, aOptions);
            lOptions.chaine = '' + lOptions.chaine;
            lOptions.chaine = forge.util.encodeUtf8(lOptions.chaine);
            if (lOptions.avecAlea) {
                lOptions.chaine = this.ajouterAlea(lOptions.chaine);
            }
            if (lOptions.avecCompression) {
                lOptions.chaine = new forge.util.ByteBuffer(lOptions.chaine).toHex();
                lOptions.chaine = window.pako.deflateRaw(lOptions.chaine, {
                    level: 6,
                    to: 'string'
                });
            }
            var lChaineEncrypte = '';
            switch (lOptions.genreCryptage) {
                case EGenreCryptage.Aucun:
                    lChaineEncrypte = lOptions.chaine;
                    break;
                case EGenreCryptage.Unicode:
                    lChaineEncrypte = lOptions.chaine;
                    break;
                case EGenreCryptage.AES:
                    lChaineEncrypte = this.CryptageAES.Encrypter(lOptions.chaine, lOptions.cle, lOptions.iv);
                    break;
                case EGenreCryptage.RSA:
                    lChaineEncrypte = this.cryptageRSA.encrypter(lOptions.chaine);
                    break;
                default:
                    ;
                    break;
            }
            return lChaineEncrypte;
        };
        ObjetCryptage.prototype.decrypter = function(aOptions) {
            var lDefault = {
                genreCryptage: EGenreCryptage.Aucun,
                chaine: '',
                cle: '',
                iv: '',
                avecAlea: false,
                enBytes: false,
                avecCompression: false
            };
            var lOptions = {};
            $.extend(lOptions, lDefault, aOptions);
            var lChaineEncrypte;
            lChaineEncrypte = lOptions.chaine;
            var lChaineDecrypte = '';
            switch (lOptions.genreCryptage) {
                case EGenreCryptage.Aucun:
                    lChaineDecrypte = lChaineEncrypte;
                    break;
                case EGenreCryptage.Unicode:
                    lChaineDecrypte = lChaineEncrypte;
                    break;
                case EGenreCryptage.AES:
                    lChaineDecrypte = this.CryptageAES.Decrypter(lChaineEncrypte, lOptions.cle, lOptions.iv, lOptions.enBytes);
                    break;
                default:
                    ;
                    break;
            }
            if (lChaineDecrypte !== '' && lOptions.avecCompression) {
                lChaineDecrypte = window.pako.inflateRaw(lChaineDecrypte, {
                    to: 'string'
                });
            }
            if (lChaineDecrypte !== '') {
                try {
                    lChaineDecrypte = forge.util.decodeUtf8(lChaineDecrypte);
                } catch (e) {
                    lChaineDecrypte = '';
                }
            }
            if (lChaineDecrypte !== '' && lOptions.avecAlea) {
                lChaineDecrypte = this.enleverAlea(lChaineDecrypte);
            }
            if (lOptions.enBytes) {
                var lBuff = new forge.util.ByteBuffer();
                var lArrInt = lChaineDecrypte.split(',');
                for (var i = 0; i < lArrInt.length; i++) {
                    lBuff.putInt(parseInt(lArrInt[i]), 8);
                }
                lChaineDecrypte = lBuff;
            }
            return lChaineDecrypte;
        };
        ObjetCryptage.prototype.ajouterAlea = function(AChaine) {
            var N = AChaine.length;
            var LTableauAvecAlea = [];
            var LListeCaracteres = this.Minuscules + this.Majuscules + this.Nombres;
            var C = LListeCaracteres.length;
            for (var I = 0; I < N; I++) {
                LTableauAvecAlea.push(LListeCaracteres.charAt(Math.floor(C * Math.random())));
                LTableauAvecAlea.push(String(AChaine).charAt(I));
            }
            return LTableauAvecAlea.join('');
        };
        ObjetCryptage.prototype.enleverAlea = function(AChaine) {
            var N = AChaine.length;
            var LTableauSansAlea = new Array(N);
            for (var I = 0; I < N; I += 1) {
                if (I % 2 === 0) {
                    LTableauSansAlea.push(AChaine.charAt(I));
                }
            }
            return LTableauSansAlea.join('');
        };
        ObjetCryptage.prototype.ChiffrementUrl = function(LChemin, LNomFichier, ACle, ANumeroSession) {
            var LUrlChiffree = this.encrypter({
                genreCryptage: EGenreCryptage.AES,
                chaine: LChemin,
                cle: ACle
            });
            return 'cheminsecurise' + LUrlChiffree + '/' + LNomFichier + '?Session=' + ANumeroSession;
        };
        module.exports = GCryptage;
    },
    fn: "objetcryptage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        try {
            window.Document.prototype.loadXML = function(S) {
                var LDocument = (new DOMParser()).parseFromString(S, "text/xml");
                while (this.hasChildNodes()) {
                    this.removeChild(this.lastChild);
                }
                for (var I = 0; I < LDocument.childNodes.length; I++) {
                    this.appendChild(this.importNode(LDocument.childNodes[I], true));
                }
            };
        } catch (e) {}
        try {
            window.Document.prototype.__defineGetter__("xml", function() {
                return (new XMLSerializer()).serializeToString(this);
            });
        } catch (e) {}

        function getXmlHttp() {
            try {
                if (window.XMLHttpRequest) {
                    return new XMLHttpRequest();
                }
                if (window.ActiveXObject) {
                    try {
                        return new ActiveXObject("Msxml2.XMLHTTP");
                    } catch (e) {
                        return new ActiveXObject("Microsoft.XMLHTTP");
                    }
                }
            } catch (e) {
                throw new Error('XmlHttp> ' + e);
            }
        }
        module.exports = getXmlHttp;
    },
    fn: "xmlhttp.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeEtatRequeteAjax = {
            initial: 0,
            preparationEnvoi: 1,
            envoye: 2,
            recu: 3,
            termine: 4
        };
        module.exports = TypeEtatRequeteAjax;
    },
    fn: "typeetatrequeteajax.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GLog = require('IELog.js');
        var EGenreIdsRequeteAjax = require('enumere_idsrequeteajax.js');
        var getXmlHttp = require('XmlHttp.js');
        var TypeEtatRequeteAjax = require('TypeEtatRequeteAjax.js');

        function ObjetRequete(aParametres) {
            this.Parametres = {
                numeroSession: 0,
                asynchrone: true,
                post: true,
                nomRequete: '',
                genreEspace: '',
                sansBlocageInterface: false,
                nomDeFonction: '',
                parametres: '',
                jsonNonSecurise: null,
                fichiers: null,
                callBackReadyStateChange: null,
                pereReponse: null,
                evenementReponse: null,
                messageDetail: '',
                jsonOrigine: null,
                log: {},
                numeroRequete: 0
            };
            $.extend(this.Parametres, aParametres);
            this.estUneRequete = true;
            this.etat = TypeEtatRequeteAjax.initial;
        }
        ObjetRequete.prototype.enAttente = function() {
            return this.etat === TypeEtatRequeteAjax.preparationEnvoi || this.etat === TypeEtatRequeteAjax.envoye || this.etat === TypeEtatRequeteAjax.recu;
        };

        function _getData(aNumeroOrdreChiffre) {
            var lJSON = {};
            lJSON[EGenreIdsRequeteAjax.numeroSession] = parseInt(this.Parametres.numeroSession, 10);
            lJSON[EGenreIdsRequeteAjax.numeroOrdre] = aNumeroOrdreChiffre;
            lJSON[EGenreIdsRequeteAjax.nomFonction] = this.Parametres.nomDeFonction;
            lJSON[EGenreIdsRequeteAjax.donneesSecurisee] = this.Parametres.parametres;
            if (this.Parametres.jsonNonSecurise) {
                lJSON[EGenreIdsRequeteAjax.donneesNonSecurisee] = this.Parametres.jsonNonSecurise;
            }
            return JSON.stringify(lJSON);
        }
        ObjetRequete.prototype.EnvoieRequete = function(aParametres) {
            var lParametres = $.extend({
                numeroOrdre: 0,
                numeroOrdreChiffre: ''
            }, aParametres);
            var lCheminSecurise = this.Parametres.nomRequete + '/' + (this.Parametres.genreEspace || 0).toString() + '/' +
                this.Parametres.numeroSession + '/' +
                lParametres.numeroOrdreChiffre;
            this.Requete = getXmlHttp();
            this.Requete.open(this.Parametres.post ? 'Post' : 'Get', lCheminSecurise, this.Parametres.asynchrone);
            this.Requete.onreadystatechange = _OnReadyStateChange.bind(this);
            this.Requete.setRequestHeader('Content-Type', 'application/json');
            this.Requete.send(this.Parametres.post ? _getData.bind(this)(lParametres.numeroOrdreChiffre) : null);
            this.etat = TypeEtatRequeteAjax.envoye;
            try {
                if (GLog.getActifRequete()) {
                    var lEstAttente = false;
                    GLog.addRequete({
                        nomRequete: this.Parametres.nomDeFonction,
                        numeroRequete: this.Parametres.numeroRequete,
                        numeroOrdre: lParametres.numeroOrdre,
                        chrono: {
                            xml: '',
                            traitement: this.Parametres.log.tempsChiffre
                        },
                        estReponse: false,
                        lgcontenu: this.Parametres.log.tailleDonnees,
                        estPolling: this.Parametres.estPolling,
                        estAttente: lEstAttente
                    });
                }
            } catch (e) {}
        };

        function _OnReadyStateChange() {
            if (this.Requete.readyState === 4) {
                this.etat = TypeEtatRequeteAjax.recu;
                if (this.Parametres.callBackReadyStateChange) {
                    var lRequeteXmlHttp = this.Requete;
                    delete this.Requete;
                    this.Parametres.callBackReadyStateChange(this, lRequeteXmlHttp.responseText, lRequeteXmlHttp.status);
                    lRequeteXmlHttp.onreadystatechange = null;
                }
            }
        }
        ObjetRequete.prototype.toString = function() {
            return this.Parametres.nomDeFonction;
        };
        module.exports = ObjetRequete;
    },
    fn: "objetrequete.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var lHtml = require('_ObjetHtml.js');
        MethodesObjet.heritagePrototype(ObjetHtml_Mobile, lHtml._ObjetHtml);

        function ObjetHtml_Mobile() {
            this.inheritedCreate();
            ObjetHtml_Mobile.prototype.getPositionElement = function(aElement) {
                var x = 0;
                var y = 0;
                while (true) {
                    x += aElement.offsetLeft;
                    y += aElement.offsetTop;
                    if (aElement.offsetParent === null) {
                        break;
                    }
                    aElement = aElement.offsetParent;
                }
                return [x, y];
            };
        }
        var GHtml = new ObjetHtml_Mobile();
        lHtml.GHtml = GHtml;
        Object.assign(module.exports, {
            ObjetHtml_Mobile: ObjetHtml_Mobile,
            GHtml: GHtml
        });
    },
    fn: "objethtml_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (IE.estMobile) {
            module.exports = require('ObjetHtml_Mobile.js').GHtml;
        } else {
            module.exports = require('ObjetHtml_Espace.js').GHtml;
        }
    },
    fn: "ghtml.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('produit/css/Wai.css');
        var GUID = require('GUID.js');
        var GLog = require('IELog.js');
        var GTraductions = require('ObjetTraduction.js');
        var EGenreObjet = {
            Aide: 1,
            Tableau: 2,
            AvecValidation: 3,
            BarreOnglets: 4,
            NavigationHorizontal: 5,
            NavigationVertical: 6,
            NavigationHorizontalAvecValidation: 7,
            NavigationVerticalAvecValidation: 8,
            CalendrierNavigation: 9,
            CalendrierPrecedent: 10,
            CalendrierSuivant: 11,
            DetailEvenement: 12,
            TitreDetailEvenement: 13,
            MenuContextuel: 14,
            NavigationMenuContextuel: 15,
            AvecMenuContextuel: 16,
            ItemDesactiver: 17,
            AvecEdition: 18,
            Tabulation: 19,
            Supprimer: 20,
            Fenetre: 21,
            NouvelElement: 22,
            BarreOngletsPrincipal: 23,
            SousOnglets: 24,
            ValidezEvenement: 25,
            RetourDebutFenetre: 26,
            FenetreChoix: 27,
            ObjetSaisieVide: 28
        };
        var EGenreRole = {
            Application: 1,
            Window: 2,
            Textbox: 3,
            Link: 5,
            Combobox: 6,
            Option: 7,
            Checkbox: 8,
            Radio: 10,
            Radiogroup: 11,
            Button: 12,
            Progressbar: 13,
            Tree: 17,
            Treeitem: 19,
            Presentation: 20,
            Group: 21,
            Grid: 22,
            Tab: 24,
            Tabpanel: 25,
            Tablist: 26,
            Rowheader: 30,
            Columnheader: 31,
            List: 32,
            Listitem: 33,
            Menu: 34,
            Menubar: 35,
            Menuitem: 36,
            Alert: 37,
            Alertdialog: 38,
            Dialog: 39,
            Gridcell: 40,
            Log: 41,
            Marquee: 42,
            Menuitemcheckbox: 43,
            Menuitemradio: 44,
            Scrollbar: 45,
            Slider: 46,
            Spinbutton: 47,
            Status: 48,
            Timer: 49,
            Tooltip: 50,
            Listbox: 51,
            Treegrid: 52,
            Article: 53,
            Definition: 54,
            Directory: 55,
            Document: 56,
            Heading: 57,
            Img: 58,
            Math: 59,
            Note: 60,
            Region: 61,
            Row: 62,
            Separator: 63,
            Toolbar: 64,
            Banner: 65,
            Complementary: 66,
            Contentinfo: 67,
            Form: 68,
            Main: 69,
            Navigation: 70,
            Search: 71,
            Cell: 72
        };
        var EGenreAttribut = {
            activedescendant: 0,
            atomic: 1,
            autocomplete: 2,
            busy: 3,
            checked: 4,
            controls: 5,
            describedby: 6,
            disabled: 7,
            dropeffect: 8,
            expanded: 9,
            flowto: 10,
            grabbed: 11,
            haspopup: 12,
            hidden: 13,
            invalid: 14,
            label: 15,
            labelledby: 16,
            level: 17,
            live: 18,
            multiline: 19,
            multiselectable: 20,
            orientation: 21,
            owns: 22,
            posinset: 23,
            pressed: 24,
            readonly: 25,
            relevant: 26,
            required: 27,
            selected: 28,
            setsize: 29,
            sort: 30,
            valuemax: 31,
            valuemin: 32,
            valuenow: 33,
            valuetext: 34,
            colindex: 35,
            colspan: 36,
            rowindex: 37,
            rowspan: 38
        };

        function ObjetWAI() {
            var i;
            this.idMessagesAide = GUID.getId();
            this.InfoWai = [];
            this.InfoWai[EGenreObjet.Aide] = GTraductions.getValeur('Navigation.Aide');
            this.InfoWai[EGenreObjet.Tableau] = GTraductions.getValeur('Navigation.Tableau');
            this.InfoWai[EGenreObjet.AvecValidation] = GTraductions.getValeur('Navigation.AvecValidation');
            this.InfoWai[EGenreObjet.BarreOnglets] = GTraductions.getValeur('Navigation.BarreOnglets');
            this.InfoWai[EGenreObjet.NavigationHorizontal] = GTraductions.getValeur('Navigation.NavigationHorizontal');
            this.InfoWai[EGenreObjet.NavigationVertical] = GTraductions.getValeur('Navigation.NavigationVertical');
            this.InfoWai[EGenreObjet.NavigationHorizontalAvecValidation] = GTraductions.getValeur('Navigation.NavigationHorizontalAvecValidation');
            this.InfoWai[EGenreObjet.NavigationVerticalAvecValidation] = GTraductions.getValeur('Navigation.NavigationVerticalAvecValidation');
            this.InfoWai[EGenreObjet.CalendrierNavigation] = GTraductions.getValeur('Navigation.CalendrierNavigation');
            this.InfoWai[EGenreObjet.CalendrierPrecedent] = GTraductions.getValeur('Navigation.CalendrierPrecedent');
            this.InfoWai[EGenreObjet.CalendrierSuivant] = GTraductions.getValeur('Navigation.CalendrierSuivant');
            this.InfoWai[EGenreObjet.ValidezEvenement] = GTraductions.getValeur('Navigation.ValidezEvenement');
            this.InfoWai[EGenreObjet.TitreDetailEvenement] = GTraductions.getValeur('Navigation.TitreDetailEvenement');
            this.InfoWai[EGenreObjet.MenuContextuel] = GTraductions.getValeur('Navigation.MenuContextuel');
            this.InfoWai[EGenreObjet.NavigationMenuContextuel] = GTraductions.getValeur('Navigation.NavigationMenuContextuel');
            this.InfoWai[EGenreObjet.ItemDesactiver] = GTraductions.getValeur('Navigation.ItemDesactiver');
            this.InfoWai[EGenreObjet.AvecEdition] = GTraductions.getValeur('Navigation.AvecEdition');
            this.InfoWai[EGenreObjet.Tabulation] = GTraductions.getValeur('Navigation.Tabulation');
            this.InfoWai[EGenreObjet.Supprimer] = GTraductions.getValeur('Navigation.Supprimer');
            this.InfoWai[EGenreObjet.Fenetre] = GTraductions.getValeur('Navigation.Fenetre');
            this.InfoWai[EGenreObjet.NouvelElement] = GTraductions.getValeur('Navigation.NouvelElement');
            this.InfoWai[EGenreObjet.BarreOngletsPrincipal] = GTraductions.getValeur('Navigation.BarreOngletsPrincipal');
            this.InfoWai[EGenreObjet.SousOnglets] = GTraductions.getValeur('Navigation.SousOnglets');
            this.InfoWai[EGenreObjet.RetourDebutFenetre] = GTraductions.getValeur('Navigation.RetourDebutFenetre');
            this.InfoWai[EGenreObjet.FenetreChoix] = GTraductions.getValeur('Navigation.FenetreChoix');
            this.InfoWai[EGenreObjet.ObjetSaisieVide] = GTraductions.getValeur('Navigation.ObjetSaisieVide');
            this.idInfoWai = [];
            var lThis = this;
            $(window).one('load', function() {
                $('body').append('<div id="' + lThis.idMessagesAide + '" role="presentation" aria-hidden="true" style="display:none;"></div>');
                for (i in EGenreObjet) {
                    lThis.idInfoWai[EGenreObjet[i]] = GUID.getId();
                    $('#' + lThis.idMessagesAide.escapeJQ()).append('<span id="' + lThis.idInfoWai[EGenreObjet[i]] + '" class="wai_hidden" role="tooltip" aria-hidden="true">' + lThis.InfoWai[EGenreObjet[i]] + '</span>');
                }
            });
            this.WaiRole = [];
            this.WaiRole[EGenreRole.Window] = 'window';
            this.WaiRole[EGenreRole.Alert] = 'alert';
            this.WaiRole[EGenreRole.Alertdialog] = 'alertdialog';
            this.WaiRole[EGenreRole.Button] = 'button';
            this.WaiRole[EGenreRole.Checkbox] = 'checkbox';
            this.WaiRole[EGenreRole.Cell] = 'cell';
            this.WaiRole[EGenreRole.Dialog] = 'dialog';
            this.WaiRole[EGenreRole.Gridcell] = 'gridcell';
            this.WaiRole[EGenreRole.Link] = 'link';
            this.WaiRole[EGenreRole.Log] = 'log';
            this.WaiRole[EGenreRole.Marquee] = 'marquee';
            this.WaiRole[EGenreRole.Menuitem] = 'menuitem';
            this.WaiRole[EGenreRole.Menuitemcheckbox] = 'menuitemcheckbox';
            this.WaiRole[EGenreRole.Menuitemradio] = 'menuitemradio';
            this.WaiRole[EGenreRole.Option] = 'option';
            this.WaiRole[EGenreRole.Progressbar] = 'progressbar';
            this.WaiRole[EGenreRole.Radio] = 'radio';
            this.WaiRole[EGenreRole.Scrollbar] = 'scrollbar';
            this.WaiRole[EGenreRole.Slider] = 'slider';
            this.WaiRole[EGenreRole.Spinbutton] = 'spinbutton';
            this.WaiRole[EGenreRole.Status] = 'status';
            this.WaiRole[EGenreRole.Tab] = 'tab';
            this.WaiRole[EGenreRole.Tabpanel] = 'tabpanel';
            this.WaiRole[EGenreRole.Textbox] = 'textbox';
            this.WaiRole[EGenreRole.Timer] = 'timer';
            this.WaiRole[EGenreRole.Tooltip] = 'tooltip';
            this.WaiRole[EGenreRole.Treeitem] = 'treeitem';
            this.WaiRole[EGenreRole.Combobox] = 'combobox';
            this.WaiRole[EGenreRole.Grid] = 'grid';
            this.WaiRole[EGenreRole.Listbox] = 'listbox';
            this.WaiRole[EGenreRole.Menu] = 'menu';
            this.WaiRole[EGenreRole.Menubar] = 'menubar';
            this.WaiRole[EGenreRole.Radiogroup] = 'radiogroup';
            this.WaiRole[EGenreRole.Tablist] = 'tablist';
            this.WaiRole[EGenreRole.Tree] = 'tree';
            this.WaiRole[EGenreRole.Treegrid] = 'treegrid';
            this.WaiRole[EGenreRole.Article] = 'article';
            this.WaiRole[EGenreRole.Columnheader] = 'columnheader';
            this.WaiRole[EGenreRole.Definition] = 'definition';
            this.WaiRole[EGenreRole.Directory] = 'directory';
            this.WaiRole[EGenreRole.Document] = 'document';
            this.WaiRole[EGenreRole.Group] = 'group';
            this.WaiRole[EGenreRole.Heading] = 'heading';
            this.WaiRole[EGenreRole.Img] = 'img';
            this.WaiRole[EGenreRole.List] = 'list';
            this.WaiRole[EGenreRole.Listitem] = 'listitem';
            this.WaiRole[EGenreRole.Math] = 'math';
            this.WaiRole[EGenreRole.Note] = 'note';
            this.WaiRole[EGenreRole.Presentation] = 'presentation';
            this.WaiRole[EGenreRole.Region] = 'region';
            this.WaiRole[EGenreRole.Row] = 'row';
            this.WaiRole[EGenreRole.Rowheader] = 'rowheader';
            this.WaiRole[EGenreRole.Separator] = 'separator';
            this.WaiRole[EGenreRole.Toolbar] = 'toolbar';
            this.WaiRole[EGenreRole.Application] = 'application';
            this.WaiRole[EGenreRole.Banner] = 'banner';
            this.WaiRole[EGenreRole.Complementary] = 'complementary';
            this.WaiRole[EGenreRole.Contentinfo] = 'contentinfo';
            this.WaiRole[EGenreRole.Form] = 'form';
            this.WaiRole[EGenreRole.Main] = 'main';
            this.WaiRole[EGenreRole.Navigation] = 'navigation';
            this.WaiRole[EGenreRole.Search] = 'search';
            this.WaiAttribut = [];
            this.WaiAttribut[EGenreAttribut.activedescendant] = 'aria-activedescendant';
            this.WaiAttribut[EGenreAttribut.atomic] = 'aria-atomic';
            this.WaiAttribut[EGenreAttribut.autocomplete] = 'aria-autocomplete';
            this.WaiAttribut[EGenreAttribut.busy] = 'aria-busy';
            this.WaiAttribut[EGenreAttribut.checked] = 'aria-checked';
            this.WaiAttribut[EGenreAttribut.controls] = 'aria-controls';
            this.WaiAttribut[EGenreAttribut.describedby] = 'aria-describedby';
            this.WaiAttribut[EGenreAttribut.disabled] = 'aria-disabled';
            this.WaiAttribut[EGenreAttribut.dropeffect] = 'aria-dropeffect';
            this.WaiAttribut[EGenreAttribut.expanded] = 'aria-expanded';
            this.WaiAttribut[EGenreAttribut.flowto] = 'aria-flowto';
            this.WaiAttribut[EGenreAttribut.grabbed] = 'aria-grabbed';
            this.WaiAttribut[EGenreAttribut.haspopup] = 'aria-haspopup';
            this.WaiAttribut[EGenreAttribut.hidden] = 'aria-hidden';
            this.WaiAttribut[EGenreAttribut.invalid] = 'aria-invalid';
            this.WaiAttribut[EGenreAttribut.label] = 'aria-label';
            this.WaiAttribut[EGenreAttribut.labelledby] = 'aria-labelledby';
            this.WaiAttribut[EGenreAttribut.level] = '	aria-level';
            this.WaiAttribut[EGenreAttribut.live] = 'aria-live';
            this.WaiAttribut[EGenreAttribut.multiline] = 'aria-multiline';
            this.WaiAttribut[EGenreAttribut.multiselectable] = 'aria-multiselectable';
            this.WaiAttribut[EGenreAttribut.orientation] = 'aria-orientation';
            this.WaiAttribut[EGenreAttribut.owns] = 'aria-owns';
            this.WaiAttribut[EGenreAttribut.posinset] = 'aria-posinset';
            this.WaiAttribut[EGenreAttribut.pressed] = 'aria-pressed';
            this.WaiAttribut[EGenreAttribut.readonly] = 'aria-readonly';
            this.WaiAttribut[EGenreAttribut.relevant] = 'aria-relevant';
            this.WaiAttribut[EGenreAttribut.required] = 'aria-required';
            this.WaiAttribut[EGenreAttribut.selected] = 'aria-selected';
            this.WaiAttribut[EGenreAttribut.setsize] = 'aria-setsize';
            this.WaiAttribut[EGenreAttribut.sort] = 'aria-sort';
            this.WaiAttribut[EGenreAttribut.valuemax] = 'aria-valuemax';
            this.WaiAttribut[EGenreAttribut.valuemin] = 'aria-valuemin';
            this.WaiAttribut[EGenreAttribut.valuenow] = 'aria-valuenow';
            this.WaiAttribut[EGenreAttribut.valuetext] = 'aria-valuetext';
            this.WaiAttribut[EGenreAttribut.colindex] = 'aria-colindex';
            this.WaiAttribut[EGenreAttribut.colspan] = 'aria-colspan';
            this.WaiAttribut[EGenreAttribut.rowindex] = 'aria-rowindex';
            this.WaiAttribut[EGenreAttribut.rowspan] = 'aria-rowspan';
        }
        ObjetWAI.prototype.getInfo = function(AEnum) {
            return this.InfoWai[AEnum];
        };
        ObjetWAI.prototype.getRole = function(AEnum) {
            return 'role="' + this.WaiRole[AEnum] + '"';
        };
        ObjetWAI.prototype.getAttribut = function(aEnum) {
            return this.WaiAttribut[aEnum];
        };
        ObjetWAI.prototype.composeSpanRetour = function(aId) {
            return '<span tabindex="0" class="wai_hidden" onfocus="' + aId + '.FocusSurPremierElement ()">' + this.getInfo(EGenreObjet.RetourDebutFenetre) + '</span>';
        };
        ObjetWAI.prototype.composeSpan = function(AParametre, AId) {
            var LId = AId ? 'id="' + AId + '" tabIndex="-1" ' : '';
            return typeof(AParametre) === 'string' ? '<span ' + LId + 'class="wai_hidden">' + AParametre + '</span>' : '<span ' + LId + 'class="wai_hidden">' + this.getInfo(AParametre) + '</span>';
        };
        ObjetWAI.prototype.composeRole = function(AParametre) {
            return typeof(AParametre) === 'string' ? '' : this.getRole(AParametre);
        };
        ObjetWAI.prototype.composeAttribut = function(aParametre) {
            if (aParametre.valeur && typeof(aParametre.valeur) !== 'string') {
                GLog.addLog('ObjetWAI.prototype.composeAttribut: mauvais type de parametre ' + aParametre.genre + ' => ' + aParametre.valeur);
            }
            if (!aParametre.valeur || typeof(aParametre.valeur) !== 'string') {
                return '';
            }
            var lValeur = aParametre.valeur.split("'").join("");
            lValeur = lValeur.split('"').join("");
            return typeof(aParametre.genre) === 'string' ? '' : ' ' + this.getAttribut(aParametre.genre) + '="' + lValeur + '"';
        };
        ObjetWAI.prototype.remplace = function(AChaine, ACherche, ARemplace) {
            return AChaine.replace(ACherche, ARemplace);
        };
        ObjetWAI.prototype.ajoutePoint = function(AChaine) {
            return AChaine.trim().substring(AChaine.length - 1, AChaine.length) === '.' ? AChaine : AChaine + '. ';
        };
        ObjetWAI.prototype.formatHeure = function(AChaine) {
            var result = AChaine;
            if (typeof(AChaine) === 'string') {
                var LTemp = AChaine.split(GTraductions.getValeur('date.separateurHeure'));
                var LHeure = parseInt(LTemp[0]);
                var LMin = LTemp[1] ? parseInt(LTemp[1]) : 0;
                result = LHeure + ' ' + ((LHeure === 1) ? GTraductions.getValeur('WAI.heure') : GTraductions.getValeur('WAI.heures'));
                if (LMin !== 0) {
                    result += ' ' + (LMin + ' ' + (LMin === 1) ? GTraductions.getValeur('WAI.minute') : GTraductions.getValeur('WAI.minutes'));
                }
            }
            return result;
        };
        var GObjetWAI = new ObjetWAI();
        module.exports = {
            GObjetWAI: GObjetWAI,
            ObjetWAI: ObjetWAI,
            EGenreObjet: EGenreObjet,
            EGenreRole: EGenreRole,
            EGenreAttribut: EGenreAttribut
        };
    },
    fn: "objetwai.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeThemeBouton = {
            primaire: 'themeBoutonPrimaire',
            secondaire: 'themeBoutonSecondaire',
            neutre: 'themeBoutonNeutre'
        };
        module.exports = TypeThemeBouton;
    },
    fn: "type_themebouton.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Espace/Css/IEHtml.Bouton_Espace.css');
        require('Mobile/Css/IEHtml.Bouton_Mobile.css');
        var IEHtml = require('IEHtml.js');
        var GLog = require('IELog.js');
        var GHtml = require('GHtml.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        var ToucheClavier = require('ToucheClavier.js');
        var TypeThemeBouton = require('Type_ThemeBouton.js');
        var MethodesObjet = require('MethodesObjet.js');
        IEHtml.addBalise('ie-bouton', function(aContexteCourant, aOutils) {
            function _getCss(aSurvol) {
                var lStyle = {};
                var lColor = (lOptions.disabled ? lOptions.couleurTexteInactif : aSurvol ? lOptions.couleurTexteSurvol : lOptions.couleurTexte) || '';
                if (lColor) {
                    lStyle.color = lColor;
                }
                lColor = (lOptions.disabled ? lOptions.couleurFondInactif : aSurvol ? lOptions.couleurFondSurvol : lOptions.couleurFond) || '';
                if (lColor) {
                    lStyle.backgroundColor = lColor;
                }
                if (lOptions.tailleBordure >= 0 && MethodesObjet.isNumber(lOptions.tailleBordure)) {
                    lStyle.borderWidth = lOptions.tailleBordure + 'px';
                }
                lColor = (lOptions.disabled ? lOptions.couleurBordureInactif : aSurvol ? lOptions.couleurBordureSurvol : lOptions.couleurBordure) || '';
                if (lColor) {
                    lStyle.borderColor = lColor;
                }
                return lStyle;
            }

            function _estToucheValider(aNumeroTouche) {
                return aNumeroTouche === ToucheClavier.Espace || aNumeroTouche === ToucheClavier.RetourChariot;
            }
            var lInnerHtml = aContexteCourant.node.innerHTML;
            var lBouton = GHtml.htmlToDOM('<button ' + GObjetWAI.composeRole(EGenreRole.Button) + '>' + '</button>');
            var lJBouton = $(lBouton);
            var lOptions = {
                disabled: false,
                theme: TypeThemeBouton.secondaire,
                tailleBordure: null,
                fontWeight: ''
            };
            if (lInnerHtml === '...') {
                lOptions.theme = TypeThemeBouton.neutre;
            }
            if ($(aContexteCourant.node).hasClass(TypeThemeBouton.primaire)) {
                lOptions.theme = TypeThemeBouton.primaire;
            }
            var lImage = aContexteCourant.node.getAttribute('ie-image') || '';
            if (lImage) {
                aContexteCourant.node.removeAttribute('ie-image');
            }
            var lImageIcon = aContexteCourant.node.getAttribute('ie-icon') || '';
            if (lImageIcon) {
                aContexteCourant.node.removeAttribute('ie-icon');
            }
            var lIconSize = aContexteCourant.node.getAttribute('ie-iconsize') || '';
            if (lIconSize) {
                aContexteCourant.node.removeAttribute('ie-iconsize');
            }
            if (lImage || lImageIcon) {
                var lWidthDefaut = 70;
                if (aContexteCourant.node.style.width) {
                    var lWidth = Math.round($(aContexteCourant.node).innerWidth());
                    if (lWidth > 0) {
                        lWidthDefaut = Math.max(10, lWidth - 2 - 2);
                    }
                }
                lOptions = Object.assign(lOptions, {
                    theme: TypeThemeBouton.neutre,
                    widthBoutonImage: lWidthDefaut,
                    heightTexteBoutonImage: 25,
                    heightImageBoutonImage: 35
                });
            }
            var lDisabled = false,
                lModele = aOutils.getModel(aContexteCourant);
            if (lModele && aContexteCourant.data.$modeleParsed) {
                var lInfosEvent = aOutils.getAccesParametresModel('event', aContexteCourant),
                    lInfosGetDisabled = aOutils.getAccesParametresModel('getDisabled', aContexteCourant),
                    lInfosGetOptions = aOutils.getAccesParametresModel('getOptions', aContexteCourant),
                    lAvecControleSaisie = aOutils.getControleSaisieEvent(aContexteCourant),
                    lKeyUpValiderAIgnorer = false;
                if (lInfosEvent.estFonction) {
                    var lRefresh = aContexteCourant.contexte.refresh;
                    lJBouton.eventValidation(function(aEvent) {
                        if (lOptions.disabled) {
                            return;
                        }
                        if (aEvent.type === 'keyup') {
                            if (lKeyUpValiderAIgnorer) {
                                lKeyUpValiderAIgnorer = false;
                                return;
                            }
                        }
                        var lAction = function() {
                            var lResult = lInfosEvent.callback([aEvent, this, aContexteCourant.data]);
                            lRefresh();
                            return lResult;
                        };
                        if (lAvecControleSaisie) {
                            ControleSaisieEvenement(lAction);
                        } else {
                            return lAction();
                        }
                    }).on({
                        'focusin': function() {
                            if (window.GNavigateur &&
                                window.GNavigateur.ShiftTouche !== null) {
                                lKeyUpValiderAIgnorer = _estToucheValider(window.GNavigateur.CodeTouche);
                                if (lKeyUpValiderAIgnorer) {
                                    $(window).off('keydown.IEHTMLBoutonKeyupAIgnorer').one('keydown.IEHTMLBoutonKeyupAIgnorer', function() {
                                        lKeyUpValiderAIgnorer = false;
                                    });
                                }
                            }
                        },
                        'focusout': function() {
                            lKeyUpValiderAIgnorer = false;
                        }
                    });
                }
                if (lInfosGetDisabled.valide) {
                    var lGetter = function() {
                        return !!lInfosGetDisabled.callback([lBouton, aContexteCourant.data]);
                    };
                    if (lInfosGetDisabled.estFonction || !lGetter() || lGetter() === true) {
                        lDisabled = !!lGetter();
                        aOutils.abonnerRefresh(function() {
                            var lDisabled = !!lGetter();
                            if (lDisabled !== lOptions.disabled) {
                                lOptions.disabled = lDisabled;
                                $(lBouton).inputDisabled(lDisabled);
                            }
                        }, lBouton, aContexteCourant);
                    } else {
                        GLog.addLog('echec getDisabled de ie-bouton, propriété incorrecte du model "' + lModele + '"');
                    }
                }
                if (lInfosGetOptions.estFonction) {
                    var lOptionsPerso = lInfosGetOptions.callback([lBouton, aContexteCourant.data]);
                    if (lOptionsPerso) {
                        Object.assign(lOptions, lOptionsPerso);
                    }
                }
                aOutils.surNodeEtNodeAfter(aContexteCourant);
            }
            aOutils.copyAttributs(aContexteCourant.node, lBouton, function(aName) {
                switch (aName) {
                    case 'disabled':
                        lDisabled = true;
                        break;
                }
            });
            var lClassDefaut = '';
            if (!lBouton.style.height && !lImage && !lImageIcon) {
                lClassDefaut = ' ieBoutonDefautSansImage';
            }
            switch (lOptions.theme) {
                case TypeThemeBouton.primaire:
                    if (!lJBouton.hasClass(TypeThemeBouton.secondaire) && !lJBouton.hasClass(TypeThemeBouton.neutre)) {
                        lJBouton.addClass(TypeThemeBouton.primaire);
                    }
                    break;
                case TypeThemeBouton.neutre:
                    if (!lJBouton.hasClass(TypeThemeBouton.secondaire) && !lJBouton.hasClass(TypeThemeBouton.primaire)) {
                        lJBouton.addClass(TypeThemeBouton.neutre);
                    }
                    break;
            }
            if (!lDisabled && lOptions.disabled) {
                lJBouton.attr('disabled', '');
            } else if (lDisabled) {
                $(lBouton).inputDisabled(true);
            }
            lOptions.disabled = lDisabled;
            var lCss = {
                'font-weight': lOptions.fontWeight
            };
            if (lImage || lImageIcon) {
                lInnerHtml = ['<div class="ieBoutonContenuAvecImage" style="min-height:', lOptions.heightImageBoutonImage, 'px;height:', lOptions.heightImageBoutonImage, 'px;">', (lImage ? '<div class="' + lImage + '"' + (lOptions.disabled ? ' disabled="disabled"' : '') + '></div>' : '<i class="ieBoutonIcon ' + lImageIcon + '"' + (lOptions.disabled ? ' disabled="disabled"' : '') + (lIconSize ? ' style="font-size:' + lIconSize + '"' : '') + '></i>'), '</div>', '<div class="ieBoutonContenuAvecImage" style="height:', lOptions.heightTexteBoutonImage, 'px; width:', lOptions.widthBoutonImage, 'px;overflow:hidden;">', '<div ie-ellipsis-multiline>', lInnerHtml, '</div>', '</div>'].join('');
                lCss.padding = 1;
            }
            if (lOptions.minWidth > 0) {
                lCss['min-width'] = lOptions.minWidth + 'px';
            }
            var lClasse = 'ieBouton ';
            if (IE.estMobile) {
                lClasse += (lOptions.theme === TypeThemeBouton.primaire || $(aContexteCourant.node).hasClass('themeBoutonConnexion') ? 'btn' : 'btn-flat') + ' waves-effect waves-light';
            } else {
                lClasse += 'Texte10 OmbreFocus';
            }
            lJBouton.css(Object.assign(lCss, _getCss())).addClass(lClasse + ' NoWrap' + lClassDefaut).on({
                mouseout: function() {
                    if (window.GNavigateur && window.GNavigateur.isTactile) {
                        return;
                    }
                    if (lOptions.disabled) {
                        return;
                    }
                    $(this).css(_getCss(false));
                },
                mouseover: function() {
                    if (window.GNavigateur && window.GNavigateur.isTactile) {
                        return;
                    }
                    if (lOptions.disabled) {
                        return;
                    }
                    $(this).css(_getCss(true));
                },
                IEDisabled: function() {
                    var lJThis = $(this);
                    lOptions.disabled = lJThis.is(':disabled');
                    if (lOptions.disabled) {
                        lJThis.removeClass('AvecMain');
                    } else {
                        lJThis.addClass('AvecMain');
                    }
                    lJThis.css(_getCss());
                }
            });
            var lRacine = lJBouton.get(0);
            aOutils.replaceNode(aContexteCourant.node, lRacine);
            aContexteCourant.node = lJBouton.get(0);
            if (lInnerHtml) {
                aOutils.injectHTML({
                    element: lRacine,
                    html: lInnerHtml,
                    controleur: aContexteCourant.controleur,
                    ignorerScroll: true,
                    contexte: aContexteCourant.contexte
                });
            }
            aOutils.addCommentaireDebug(lRacine, 'ie-bouton' + (lImage ? ' ie-image="' + lImage + '"' : '') + (lImageIcon ? ' ie-icon="' + lImageIcon + '"' : '') + (lIconSize ? ' ie-iconsize="' + lIconSize + '"' : ''));
            return {
                node: aContexteCourant.node,
                avecCompileFils: false
            };
        });
        module.exports = IEHtml;
    },
    fn: "iehtml.bouton.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GLog = require('IELog.js');
        var GHtml = require('_ObjetHtml.js').GHtml;
        var Invocateur = require('Invocateur.js').Invocateur;
        var ZoneFenetre = {
            idZoneFenetre: "zone_fenetre"
        };
        ZoneFenetre.getElementZoneFenetre = function() {
            var lId = ZoneFenetre.idZoneFenetre;
            var lElement = GHtml.getElement(lId);
            if (!GHtml.estElement(lElement)) {
                lElement = GHtml.htmlToDOM('<div id="' + lId + '" class="NePasImprimer"></div>');
                var lDivFrere = window.GApplication && window.GApplication.getIdConteneur ? GHtml.getElement(GApplication.getIdConteneur()) : null;
                if (lDivFrere && lDivFrere.parentNode) {
                    lDivFrere.parentNode.insertBefore(lElement, lDivFrere);
                } else {
                    document.body.appendChild(lElement);
                }
                Invocateur.evenement('creationZoneFenetre', lElement);
                if ($.fn.jIEDesactiverMenuContextuel) {
                    $(lElement).jIEDesactiverMenuContextuel();
                }
            }
            return lElement;
        };
        ZoneFenetre.ajouterFenetre = function(aId, aZIndex) {
            if (GHtml.elementExiste(aId)) {
                ZoneFenetre.enleverFenetre(aId);
                GLog.addLog('ZoneFenetre.prototype.ajouterFenetre : la fenetre ' + aId + ' existe déjà!');
            }
            var lZIndex = aZIndex === 0 ? 0 : (aZIndex || 1100);
            GHtml.addHtml(ZoneFenetre.getElementZoneFenetre(), '<div id="' + aId + '" style="position:absolute; display:none;' + (lZIndex ? 'z-index:' + lZIndex : '') + '"></div>');
            if ($.fn.jIEInterdireSelectionTexte) {
                $('#' + aId.escapeJQ()).jIEInterdireSelectionTexte();
            }
        };
        ZoneFenetre.enleverFenetre = function(aId) {
            var lElement = GHtml.getElement(aId);
            if (GHtml.estElement(lElement) && lElement.parentNode && (lElement.parentNode.id === ZoneFenetre.idZoneFenetre)) {
                $(lElement).remove();
            } else {
                GLog.addLog('erreur enleverFenetre de ' + aId);
            }
        };
        ZoneFenetre.etendreEnFenetre = function(aClass, aParam) {
            if (!aClass || !aClass.prototype) {
                return;
            }
            var lParam = Object.assign({
                zIndex: 1000
            }, aParam);
            aClass.prototype.__estFenetreVolante = true;
            aClass.prototype.getZIndex = function() {
                return lParam.zIndex;
            };
            aClass.prototype.avecEventResizeNavigateur = function() {
                return false;
            };
        };
        module.exports = ZoneFenetre;
    },
    fn: "iezonefenetre.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeEtatUpload = {
            TEU_Inconnu: 0,
            TEU_Reussi: 1,
            TEU_Erreur: 2,
            TEU_EnCours: 3
        };
        module.exports.TypeEtatUpload = TypeEtatUpload;
    },
    fn: "typeetatupload.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJQueryFileUpload.js');
        var IEHtml = require('IEHtml.js');
        var GUID = require('GUID.js');
        var GLog = require('IELog.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        require('IEHtml.Bouton.js');
        var ZoneFenetre = require('IEZoneFenetre.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var GTraductions = require('ObjetTraduction.js');
        var TypeEtatUpload = require('TypeEtatUpload.js').TypeEtatUpload;
        var TypeEtatRequeteAjax = require('TypeEtatRequeteAjax.js');

        function ObjetRequeteUploadFile(aParametres) {
            this.estUneRequete = false;
            this.estUploadFile = true;
            this.etat = TypeEtatRequeteAjax.initial;
            this.donnees = Object.assign({
                listeFichiers: null,
                maxChunkSize: 100 * 1024,
                messageEchec: GTraductions.getValeur('inputFile.echecEnvoi'),
                callbackDone: null,
                callback: null,
                callbackEach: null,
                getFormData: null,
                getUrl: null,
                callbackInterrupt: null,
                moduleMD5: null
            }, aParametres);
            this.progression = {
                requete: this,
                listeFichiersEnAttente: this.donnees.listeFichiers.getListeElements(),
                nbReussi: 0,
                error: null
            };
        }
        var uIdInputFile = GUID.getId(),
            uIdFichier = 0;
        ObjetRequeteUploadFile.prototype.estVide = function() {
            return !this.donnees || !this.donnees.listeFichiers || !this.donnees.listeFichiers.GetNbrElements || this.donnees.listeFichiers.GetNbrElements() === 0;
        };

        function _eventAjaxIOProgression(aParams) {
            Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                emission: true,
                upload: true,
                message: aParams.message || GTraductions.getValeur('requete.transfertPJ'),
                nombreFichiers: this.donnees.listeFichiers.GetNbrElementsExistes(),
                ignorerBlocageClavier: true,
                progress: {
                    personnalise: true,
                    actualFile: this.progression.nbReussi + 1,
                    percent: aParams.pourcent || 0,
                    md5: aParams.md5 || false
                }
            });
        }

        function _send(aFichier, aMD5) {
            return new Promise(function(aResolve) {
                _eventAjaxIOProgression.call(this, {});
                if (!aFichier.idFichier) {
                    uIdFichier += 1;
                    aFichier.idFichier = 'reqUpl_' + uIdFichier + '_' + Date.now();
                }
                this.progression.json = null;
                var lJFile = $('#' + uIdInputFile);
                var lFormData = this.donnees.getFormData(aFichier) || {};
                if (aMD5) {
                    lFormData.MD5 = aMD5;
                }
                lJFile.append('<input type="file" style="position:absolute;top:-100px;left:-100px;width:0px;height:0px;opacity:0;" />').fileupload({
                    url: this.donnees.getUrl(),
                    dataType: 'json',
                    formData: lFormData,
                    autoUpload: true,
                    maxChunkSize: this.donnees.maxChunkSize,
                    done: function(aEvent, aData) {
                        if (aData.result && $.isNumeric(aData.result.etat)) {
                            this.progression.json = aData.result;
                            if (aData.result.etat === TypeEtatUpload.TEU_Reussi) {
                                aData.reussite = true;
                                this.progression.nbReussi += 1;
                            } else {
                                this.progression.error = {
                                    message: aData.result.message
                                };
                            }
                        } else {
                            this.progression.error = {};
                        }
                    }.bind(this),
                    fail: function(aEvent, aData) {
                        if (aData.jqXHR && aData.jqXHR.statusText === 'abort' && aData.jqXHR.status === 0) {
                            this.progression.error = {
                                abort: true,
                                message: GTraductions.getValeur('inputFile.msgEnvoiFichierAnnule')
                            };
                        } else {
                            this.progression.error = {
                                fail: true
                            };
                        }
                        var lResponse = aData.response();
                        if (lResponse && lResponse.jqXHR && lResponse.jqXHR.responseJSON) {
                            this.progression.json = lResponse.jqXHR.responseJSON;
                            if (this.progression.json && this.progression.json.message) {
                                this.progression.error.message = this.progression.json.message;
                            }
                        }
                    }.bind(this),
                    always: function() {
                        aResolve(aFichier);
                    }.bind(this),
                    progressall: function(e, aData) {
                        var lProgressBar = Math.round(aData.loaded / aData.total * 100);
                        _eventAjaxIOProgression.call(this, {
                            pourcent: lProgressBar
                        });
                    }.bind(this)
                });
                this.progression.jqXHR = lJFile.fileupload('send', {
                    files: aFichier.file
                });
                IEHtml.refresh();
            }.bind(this));
        }

        function _debloquerPatience() {
            Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                emission: false,
                upload: true,
                debloquerForcer: true
            });
        }

        function _doneFile(aFichier) {
            this.progression.jqXHR = null;
            IEHtml.refresh();
            var lErreurSession = null,
                lSurAnnulationUpload = this.progression.error && this.progression.error.abort;
            if (!lSurAnnulationUpload && this.donnees.callbackEach) {
                lErreurSession = this.donnees.callbackEach(this.progression.json);
            }
            if (lErreurSession) {
                this.progression.error = {};
            }
            if (this.progression.error) {
                this.progression.listeFichiersEnAttente = new ObjetListeElements();
                _debloquerPatience();
                if (lSurAnnulationUpload && !lErreurSession && this.donnees.callbackInterrupt) {
                    this.donnees.callbackInterrupt();
                }
                Promise.resolve().then(function() {
                    if (!lErreurSession) {
                        return GApplication.getMessage().afficher({
                            titre: this.progression.error.titre || '',
                            message: this.progression.error.message || this.donnees.messageEchec
                        });
                    }
                }.bind(this)).then(function() {
                    _doneAll.call(this, lErreurSession);
                }.bind(this));
            } else {
                _sendNextFile.call(this);
            }
        }

        function _doneAll(aErreurSession) {
            ZoneFenetre.enleverFenetre(uIdInputFile);
            this.etat = TypeEtatRequeteAjax.recu;
            _debloquerPatience();
            var lErreurSession = aErreurSession;
            if (this.progression &&
                this.progression.error &&
                this.progression.json &&
                this.progression.json.Erreur) {
                lErreurSession = this.progression.json.Erreur;
            }
            if (this.donnees.callbackDone) {
                this.donnees.callbackDone({
                    requete: this,
                    progression: this.progression,
                    erreurSession: lErreurSession,
                    callback: this.donnees.callback
                });
            }
            if (this.donnees.callback) {
                this.donnees.callback(this.progression);
            }
            IEHtml.refresh();
        }

        function _sendNextFile() {
            if (this.progression.listeFichiersEnAttente.GetNbrElements() > 0) {
                var lFichier = this.progression.listeFichiersEnAttente.GetElement(0);
                this.progression.listeFichiersEnAttente.remove(0);
                var lPromise = null;
                if (this.donnees.moduleMD5 && this.donnees.moduleMD5.calculMD5) {
                    lPromise = this.donnees.moduleMD5.calculMD5({
                        instance: this,
                        fichier: lFichier,
                        eventAjaxIOProgression: _eventAjaxIOProgression
                    });
                }
                return Promise.resolve(lPromise).then(function(aMD5) {
                    return _send.call(this, lFichier, aMD5);
                }.bind(this), function() {
                    GLog.addLog('Echec calcul md5 (erreur ou fichier trop gros)');
                    return _send.call(this, lFichier, '');
                }.bind(this)).catch(function(aErreur) {
                    this.progression.error = {
                        abort: true,
                        message: GTraductions.getValeur('inputFile.msgEnvoiFichierAnnule')
                    };
                }.bind(this)).then(function() {
                    return _doneFile.call(this, lFichier);
                }.bind(this));
            } else {
                _doneAll.call(this);
            }
        }
        ObjetRequeteUploadFile.prototype.envoiRequete = function(aParams) {
            this.etat = TypeEtatRequeteAjax.envoye;
            Object.assign(this.donnees, aParams);
            ZoneFenetre.ajouterFenetre(uIdInputFile, -1);
            var lSelf = this;
            var lParams = null;
            if (this.donnees.callbackInterrupt) {
                lParams = {
                    htmlPied: '<ie-bouton ie-model="btnInterrupt">' + GTraductions.getValeur('inputFile.AnnulerLEnvoi') + '</ie-bouton>',
                    controleur: {
                        btnInterrupt: {
                            event: function() {
                                if (lSelf.progression.jqXHR) {
                                    lSelf.progression.jqXHR.abort();
                                }
                            },
                            getDisabled: function() {
                                return !(lSelf.progression && lSelf.progression.jqXHR);
                            }
                        }
                    }
                };
            }
            Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                emission: true,
                upload: true,
                nombreFichiers: this.donnees.listeFichiers.GetNbrElementsExistes(),
                init: true,
                params: lParams
            });
            _sendNextFile.call(this);
        };
        ObjetRequeteUploadFile.prototype.enAttente = function() {
            return this.etat === TypeEtatRequeteAjax.preparationEnvoi || this.etat === TypeEtatRequeteAjax.envoye || this.etat === TypeEtatRequeteAjax.recu;
        };
        module.exports = ObjetRequeteUploadFile;
    },
    fn: "objetrequeteuploadfile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeGenreUploadFile = {
            tgufStandard: 0,
            tgufImageQCM: 1,
            tgufSonQCM: 2
        };
        module.exports.TypeGenreUploadFile = TypeGenreUploadFile;
    },
    fn: "typegenreuploadfile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationForge.js');
        var GLog = require('IELog.js');
        var GTraductions = require('ObjetTraduction.js');

        function _toBinaryString(aParams) {
            return new Promise(function(aResolve) {
                var lChunk = 100 * 1024;
                if (aParams.start >= aParams.bytes.length) {
                    aParams.done = true;
                } else {
                    aParams.tabResult.push(String.fromCharCode.apply(null, aParams.bytes.slice(aParams.start, aParams.start + lChunk)));
                }
                aParams.eventAjaxIOProgression.call(aParams.instance, {
                    message: GTraductions.getValeur('inputFile.msgPreparationFichier'),
                    pourcent: Math.round((aParams.compteur * lChunk) / (aParams.bytes.length * 100 * 1024)),
                    md5: true
                });
                aParams.start += lChunk;
                aParams.compteur += 1;
                setTimeout(function() {
                    aResolve(aParams);
                }, 0);
            });
        }

        function _toBinaryStringPromise(aParams) {
            return _toBinaryString(aParams).then(function() {
                if (!aParams.done) {
                    return _toBinaryStringPromise(aParams);
                }
            });
        }
        module.exports = {
            calculMD5: function(aParams) {
                var lParams = Object.assign({
                    instance: null,
                    fichier: null,
                    eventAjaxIOProgression: null,
                    maxSizePourMD5: 30 * 1024 * 1024
                }, aParams);
                return new Promise(function(aResolve, aReject) {
                    if (!window.FileReader || !window.Uint8Array) {
                        GLog.addLog('FileReader ou Uint8Array non supporté => pas de controle de MD5');
                        aReject();
                        return;
                    }
                    if (lParams.fichier.file.size > lParams.maxSizePourMD5) {
                        GLog.addLog('Fichier trop gros pur calculer le MD5');
                        aReject();
                        return;
                    }
                    try {
                        lParams.eventAjaxIOProgression.call(lParams.instance, {
                            message: GTraductions.getValeur('inputFile.msgPreparationFichier')
                        });
                        var lReader = new FileReader();
                        lReader.onload = function() {
                            try {
                                var lParamsReader = Object.assign({
                                    bytes: new Uint8Array(lReader.result),
                                    tabResult: [],
                                    start: 0,
                                    compteur: 0
                                }, lParams);
                                if (!lParamsReader.bytes.slice) {
                                    lParamsReader.bytes = Array.from(lParamsReader.bytes);
                                }
                                _toBinaryStringPromise(lParamsReader).then(function() {
                                    var lMd5 = '';
                                    if (lParamsReader.done) {
                                        lMd5 = forge.md.md5.create().update(lParamsReader.tabResult.join('')).digest().toHex();
                                    }
                                    aResolve(lMd5);
                                }, function() {
                                    aReject();
                                });
                            } catch (e) {}
                        }.bind(lParams.instance);
                        lReader.onError = function() {
                            aReject();
                        }.bind(lParams.instance);
                        lReader.readAsArrayBuffer(lParams.fichier.file);
                    } catch (e) {
                        aReject();
                    }
                }.bind(lParams.instance));
            }
        };
    },
    fn: "modulemd5_requeteuploadfile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('divers.js');
        require('DeclarationForge.js');
        var GLog = require('IELog.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var GChaine = require('GChaine.js');
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var EGenreCryptage = require('Enumere_Cryptage.js');
        var EGenreIdsRequeteAjax = require('enumere_idsrequeteajax.js');
        var GCryptage = require('ObjetCryptage.js');
        var ObjetRequete = require('ObjetRequete.js');
        var GTraductions = require('ObjetTraduction.js');
        var ObjetJSON = require('ObjetJSON.js');
        var Requetes = require('CollectionRequetes.js');
        var ObjetRequeteUploadFile = require('ObjetRequeteUploadFile.js');
        var EGenreEtat = require('Enumere_Etat.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var TypeGenreUploadFile = require('TypeGenreUploadFile.js').TypeGenreUploadFile;
        var TypeEtatRequeteAjax = require('TypeEtatRequeteAjax.js');
        var ModuleMD5_RequeteUploadFile = require('ModuleMD5_RequeteUploadFile.js');
        Requetes.inscrire('annulation', ObjetRequeteConsultation);

        function _ObjetCommunication(AGenreEspace, aNumeroSession) {
            this._attenteEnCours = false;
            this.nbrMaxTraitements = 30;
            this.nbrMaxTentatives = 0;
            this.FDureeEnCours = 1000 * 0.5;
            this._dureeTimerPresence = _ObjetCommunication.cDureeTimerPresence;
            this.GenreEspace = AGenreEspace;
            this.NomRequete = 'appelfonction';
            this.pileRequetes = [];
            this.compteurRequete = 0;
            this.NumeroDeSession = aNumeroSession ? aNumeroSession : 0;
            this.NumeroOrdreCommunication = 1;
            this.cleAES = new forge.util.ByteBuffer();
            this.ivAES = new forge.util.ByteBuffer();
            this.ivAESTemp = new forge.util.ByteBuffer(forge.random.generate(16));
            var lNom = 'GCommunication';
            this.getNom = function() {
                return lNom;
            };
            this.setNom = function(aNom) {
                lNom = aNom;
            };
            this.polling = {
                nbRequetes: 0,
                numeroOrdre: 1,
                delaiEchecReseau: 3000,
                delaiTimeoutEchecReseau: 5 * 60 * 1000,
                delaiTimeoutRequete: 10 * 60 * 1000
            };
            Invocateur.abonner(ObjetInvocateur.events.modificationPresenceUtilisateur, _modificationPresenceUtilisateur, this);
            Invocateur.abonner(ObjetInvocateur.events.interruption_Requete, _eventInterruptionRequete, this);
            Invocateur.abonner(ObjetInvocateur.events.modification_RequeteAttente, _eventModificationRequeteAttente, this);
            if (navigator && navigator.sendBeacon) {
                window.addEventListener('unload', function() {
                    if (!this.estArrete && this.NumeroOrdreCommunication > 0) {
                        var lNumeroOrdre = this.getChaineChiffreeAES(this.NumeroOrdreCommunication);
                        if (lNumeroOrdre) {
                            try {
                                navigator.sendBeacon('appeldeconnexion/' + lNumeroOrdre + '/' + new Date().getTime(), ObjetJSON.toJSON({
                                    ns: parseInt(this.NumeroDeSession, 10),
                                    no: lNumeroOrdre
                                }));
                            } catch (e) {}
                        }
                    }
                }.bind(this));
            }
        }
        Invocateur.abonner(ObjetInvocateur.events.initChiffrement, function(aParam) {
            var lOptionsSecurite = {};
            if (aParam.sCrA) {
                lOptionsSecurite.sansCryptageAES = true;
            }
            if (aParam.sCoA) {
                lOptionsSecurite.sansCompressionAES = true;
            }
            if (aParam.poll) {
                lOptionsSecurite.avecPollingActif = true;
            }
            _ObjetCommunication.optionsSecurite = lOptionsSecurite;
        });
        _ObjetCommunication.optionsSecurite = {};
        _ObjetCommunication.cDureeTimerPresence = 2 * 60 * 1000;
        _ObjetCommunication.cDureeTimerPresenceMAJServeurEnCours = 20 * 1000;
        var _pileTimerEnAttente = {};
        _ObjetCommunication.prototype.arreter = function() {
            this.estArrete = true;
            Invocateur.desabonner(this);
            this.desactiverPresence();
            delete this.ivAES;
            delete this.cleAES;
            delete this.NumeroOrdreCommunication;
            this.polling = {};
        };
        _ObjetCommunication.prototype.setIvAES = function() {
            this.ivAES = this.ivAESTemp;
            delete(this.ivAESTemp);
        };
        _ObjetCommunication.prototype.envoiRequeteUploadFile = function(aParams) {
            return new Promise(function(aResolve) {
                var lRequeteUpload = _factoryRequeteUploadFile.call(this, Object.assign({
                    nomRequete: '',
                    callback: function(aProgression) {
                        aResolve(aProgression);
                    }
                }, aParams));
                if (lRequeteUpload && !lRequeteUpload.estVide()) {
                    this.pileRequetes.push(lRequeteUpload);
                    _envoieRequete.call(this);
                } else {
                    aResolve({
                        empty: true
                    });
                }
            }.bind(this));
        };
        _ObjetCommunication.prototype.appel_fonction_asynchrone_xml = function(aParametres) {
            var lParametresAppel = {
                nom: '',
                json: {},
                callbackPere: null,
                callbackEvenement: null,
                requetePrioritaire: false,
                sansBlocageInterface: false,
                messageDetail: ''
            };
            $.extend(lParametresAppel, aParametres);
            var lJSONCollection = {};
            lParametresAppel.json = ObjetJSON.preparerJSON(lParametresAppel.json, {
                JSONCollection: lJSONCollection
            });
            var lRequeteUpload = null;
            if (lParametresAppel.paramsUpload && lParametresAppel.paramsUpload.listeFichiers) {
                lRequeteUpload = _factoryRequeteUploadFile.call(this, Object.assign({
                    nomRequete: lParametresAppel.nom
                }, lParametresAppel.paramsUpload));
                if (!lRequeteUpload.estVide()) {
                    this.pileRequetes.push(lRequeteUpload);
                    _envoieRequete.call(this);
                } else {
                    lRequeteUpload = null;
                }
            }
            var lResultJSON = _traiterJSONEnvoi.call(this, lParametresAppel.json);
            var lRequete = new ObjetRequete({
                numeroSession: this.NumeroDeSession,
                numeroRequete: this.compteurRequete,
                nomRequete: this.NomRequete,
                genreEspace: this.GenreEspace,
                sansBlocageInterface: lParametresAppel.sansBlocageInterface === true,
                nomDeFonction: lParametresAppel.nom,
                parametres: lResultJSON.JSON,
                jsonNonSecurise: $.isEmptyObject(lJSONCollection) ? null : lJSONCollection,
                callBackReadyStateChange: _evenementSurReponseRequete.bind(this),
                pereReponse: lParametresAppel.callbackPere,
                evenementReponse: lParametresAppel.callbackEvenement,
                messageDetail: lParametresAppel.messageDetail,
                jsonOrigine: lParametresAppel.json,
                log: {
                    tailleDonnees: lResultJSON.JSONStr_clair.length,
                    tempsChiffre: lResultJSON.chronoStr
                }
            });
            if (lParametresAppel.requetePrioritaire && !lRequeteUpload) {
                this.pileRequetes.splice(1, 0, lRequete);
            } else {
                this.pileRequetes.push(lRequete);
            }
            this.compteurRequete += 1;
            if (lRequeteUpload) {
                lRequeteUpload.requeteSaisieApresUpload = lRequete;
            }
            _envoieRequete.call(this);
            return lRequete;
        };

        function _traiterJSONEnvoi(aJSON) {
            var lResult = {
                JSON: aJSON,
                JSONStr_clair: '',
                chronoStr: ''
            };
            if (!aJSON) {
                return lResult;
            }
            var lSecurise = !_ObjetCommunication.optionsSecurite.sansCryptageAES,
                lChrono;
            if (lSecurise) {
                if (GLog && GLog.getActifRequete && GLog.getActifRequete()) {
                    lChrono = new(require('Chronometre.js'))();
                }
                lResult.JSONStr_clair = JSON.stringify(lResult.JSON) || '';
                lResult.JSON = GCryptage.encrypter({
                    genreCryptage: lSecurise ? EGenreCryptage.AES : EGenreCryptage.Unicode,
                    chaine: lResult.JSONStr_clair,
                    cle: this.cleAES,
                    iv: lSecurise ? this.ivAES : null,
                    avecCompression: lSecurise && !_ObjetCommunication.optionsSecurite.sansCompressionAES
                });
                if (lChrono) {
                    lResult.chronoStr = lChrono.toString();
                }
            }
            return lResult;
        }

        function _factoryRequeteUploadFile(aDonnees) {
            var lDonnees = Object.assign({
                listeFichiers: null,
                genreUpload: TypeGenreUploadFile.tgufStandard,
                moduleMD5: ModuleMD5_RequeteUploadFile,
                filtreFichiers: function(D) {
                    return !!D && ((D.Etat === EGenreEtat.Creation) || (D.Etat === EGenreEtat.Modification)) && D.Existe() && D.idFichier !== -1 && D.idFichier !== undefined && D.file;
                },
                getFormData: function(aFichier) {
                    return {
                        'numeroOrdre': this.getChaineChiffreeAES(this.NumeroOrdreCommunication),
                        'numeroSession': this.NumeroDeSession,
                        'nomRequete': lDonnees.nomRequete,
                        'idFichier': aFichier.idFichier,
                        'genreUpload': lDonnees.genreUpload
                    };
                }.bind(this),
                getUrl: function() {
                    return GChaine.Format('%s/%s/%s', ['uploadfilesession', this.GenreEspace, this.NumeroDeSession]);
                }.bind(this),
                callbackInterrupt: function() {
                    Requetes('annulation', {}).setOptions({
                        requetePrioritaire: true
                    }).lancerRequete({
                        annulationUpload: true
                    });
                },
                callbackEach: function(aJSON) {
                    var lNumeroOrdre = null;
                    try {
                        if (aJSON && aJSON.numeroOrdre) {
                            lNumeroOrdre = parseInt(GCryptage.decrypter({
                                genreCryptage: EGenreCryptage.AES,
                                chaine: aJSON.numeroOrdre,
                                cle: this.cleAES,
                                iv: this.ivAES
                            }), 10);
                        }
                    } catch (e) {}
                    if (lNumeroOrdre !== this.NumeroOrdreCommunication + 1) {
                        return _getErreurConnexionInterrompue();
                    } else {
                        this.NumeroOrdreCommunication += 2;
                    }
                    return null;
                }.bind(this),
                callbackDone: function(aParams) {
                    if (aParams.erreurSession) {
                        _composePageErreur.call(this, aParams.erreurSession);
                        return;
                    }
                    if (aParams.requete && aParams.requete.requeteSaisieApresUpload && aParams.requete.requeteSaisieApresUpload.etat === TypeEtatRequeteAjax.initial && aParams.progression.error && (aParams.requete.donnees.annulerSurErreurUpload || (aParams.progression.error.abort && aParams.requete.donnees.annulerSurAbortUpload))) {
                        aParams.requete.requeteSaisieApresUpload.estRequeteAnnulee = true;
                    }
                    if (aParams.requete.estUploadFile && aParams.requete.enAttente()) {
                        _setRequeteEtatTermine.call(this, aParams.requete);
                    } else {}
                    if (!_ObjetCommunication.optionsSecurite.avecPollingActif) {
                        this.activerPresence();
                    }
                    _envoieRequete.call(this);
                }.bind(this)
            }, aDonnees);
            var lListe = new ObjetListeElements();
            if (lDonnees.listeFichiers && lDonnees.listeFichiers.parcourir) {
                lDonnees.listeFichiers.parcourir(function(D) {
                    if (lDonnees.filtreFichiers && lDonnees.filtreFichiers(D)) {
                        var lElement = MethodesObjet.dupliquer(D);
                        lElement.file = D.file;
                        lListe.AddElement(lElement);
                        D.idFichier = -1;
                    }
                }.bind(this));
            }
            lDonnees.listeFichiers = lListe;
            return new ObjetRequeteUploadFile(lDonnees);
        }

        function _envoieRequete() {
            var lRequete = this.pileRequetes[0];
            if (!lRequete) {
                return;
            }
            if (lRequete.estRequeteAnnulee && !lRequete.enAttente()) {
                _surReception.call(this, lRequete, null, true);
                return;
            }
            if (!lRequete.enAttente()) {
                lRequete.etat = TypeEtatRequeteAjax.preparationEnvoi;
                if (!this._attenteEnCours && (!lRequete.Parametres || !lRequete.Parametres.sansBlocageInterface)) {
                    Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                        emission: true,
                        upload: !lRequete.estUneRequete,
                        message: lRequete.estUneRequete ? lRequete.Parametres.messageDetail : null,
                        delai: this.pileRequetes.length > 1 ? 0 : null
                    });
                }
                if (lRequete.estUneRequete) {
                    lRequete.EnvoieRequete({
                        numeroOrdre: this.NumeroOrdreCommunication,
                        numeroOrdreChiffre: this.getChaineChiffreeAES(this.NumeroOrdreCommunication)
                    });
                } else if (lRequete.estUploadFile) {
                    if (!_ObjetCommunication.optionsSecurite.avecPollingActif) {
                        this.desactiverPresence();
                    }
                    lRequete.envoiRequete();
                } else {}
            } else {
                if (lRequete && lRequete.etat === TypeEtatRequeteAjax.envoye && !this._attenteEnCours && lRequete.Parametres && lRequete.Parametres.sansBlocageInterface) {
                    var lAvecBlocageEnAttente = false;
                    this.pileRequetes.every(function(aRequete, aIndex) {
                        if (aRequete && (!aRequete.Parametres || !aRequete.Parametres.sansBlocageInterface)) {
                            lAvecBlocageEnAttente = true;
                            this.pileRequetes.every(function(aRequete, aIndex2) {
                                if (aRequete && aRequete.Parametres && aRequete.Parametres.sansBlocageInterface) {
                                    aRequete.Parametres.sansBlocageInterface = false;
                                }
                                return aIndex2 < aIndex;
                            });
                            return false;
                        }
                        return true;
                    }.bind(this));
                    if (lAvecBlocageEnAttente) {
                        Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                            emission: true,
                            upload: lRequete.estUploadFile,
                            delai: 0
                        });
                    }
                }
            }
        }

        function _getErreurConnexionInterrompue() {
            return {
                Titre: '',
                Message: GTraductions.getValeur('connexion.ErreurConnexionInterrompue')
            };
        }

        function _getXmlReponseStatut200(ARequete, AReponse, aJSON, aSurPolling) {
            var lNumeroSession = aJSON[EGenreIdsRequeteAjax.numeroSession],
                lNumeroOrdre = aJSON[EGenreIdsRequeteAjax.numeroOrdre],
                lDonneesSecurisees = aJSON[EGenreIdsRequeteAjax.donneesSecurisee],
                lSecurise = !_ObjetCommunication.optionsSecurite.sansCryptageAES,
                lNomRequete = aJSON[EGenreIdsRequeteAjax.nomFonction] + 'Reponse',
                lErreur = _getErreurConnexionInterrompue();
            if (aSurPolling) {
                lNomRequete = 'pollingReponse';
            }
            if (parseInt(this.NumeroDeSession, 10) !== lNumeroSession && lNumeroSession !== 0) {
                if (!aJSON.Erreur) {
                    aJSON.Erreur = lErreur;
                }
                return null;
            }
            var lNumOrdreServeur = parseInt(GCryptage.decrypter({
                genreCryptage: EGenreCryptage.AES,
                chaine: lNumeroOrdre,
                cle: this.cleAES,
                iv: this.ivAES
            }), 10);
            var lEstErreurNumeroOrdre = false;
            if (aSurPolling) {
                lEstErreurNumeroOrdre = lNumOrdreServeur !== this.polling.numeroOrdre - 1;
            } else {
                lEstErreurNumeroOrdre = lNumOrdreServeur !== this.NumeroOrdreCommunication + 1;
            }
            if (lEstErreurNumeroOrdre) {
                if (!aJSON.Erreur) {
                    aJSON.Erreur = lErreur;
                }
                return null;
            }
            if (!aSurPolling) {
                this.NumeroOrdreCommunication += 2;
            }
            var lChrono, lChronoTrait = '';
            if (lSecurise) {
                if (GLog && GLog.getActifRequete && GLog.getActifRequete()) {
                    lChrono = new(require('Chronometre.js'))();
                }
                var lReponse = GCryptage.decrypter({
                    genreCryptage: _ObjetCommunication.optionsSecurite.sansCryptageAES ? EGenreCryptage.Unicode : EGenreCryptage.AES,
                    chaine: lDonneesSecurisees,
                    cle: this.cleAES,
                    iv: this.ivAES,
                    avecCompression: !_ObjetCommunication.optionsSecurite.sansCompressionAES
                });
                aJSON.donnees = ObjetJSON.parseJSON(lReponse);
                if (lChrono && GLog.getActifRequete()) {
                    lChronoTrait = lChrono.toString();
                }
            } else {
                aJSON.donnees = lDonneesSecurisees;
            }
            delete aJSON[EGenreIdsRequeteAjax.donneesSecurisee];
            if (!aJSON.donnees) {
                aJSON.Erreur = lErreur;
                return null;
            }
            aJSON.donnees = ObjetJSON.parseVariables(aJSON.donnees, {
                JSONCollection: aJSON[EGenreIdsRequeteAjax.donneesNonSecurisee]
            });
            try {
                if (GLog.getActifRequete()) {
                    var lChronoServeur, lChronoSaisieMs, lEstAttente = false;
                    GLog.addRequete({
                        nomRequete: lNomRequete,
                        numeroRequete: ARequete.Parametres.numeroRequete,
                        numeroOrdre: aSurPolling ? this.polling.numeroOrdre : this.NumeroOrdreCommunication - 1,
                        chrono: {
                            requeteServeurtickMs: lChronoServeur,
                            traitement: lChronoTrait,
                            saisieMS: lChronoSaisieMs
                        },
                        estReponse: true,
                        lgcontenu: AReponse.length,
                        estPolling: ARequete.Parametres.estPolling,
                        estAttente: lEstAttente
                    });
                }
            } catch (e) {}
        }

        function _evenementSurReponseRequete(ARequete, AReponse, AStatut) {
            _traiterPileAttenteSurReponseRequete(ARequete);
            switch (parseInt(AStatut, 10)) {
                case 200:
                    var lJSONReseau = ObjetJSON.parseJSON(AReponse);
                    if (!lJSONReseau) {
                        _composePageErreur.call(this, _getErreurConnexionInterrompue());
                        return;
                    } else {
                        _getXmlReponseStatut200.call(this, ARequete, AReponse, lJSONReseau);
                    }
                    if (lJSONReseau.Erreur || (lJSONReseau.donnees && lJSONReseau.donnees.Erreur)) {
                        _composePageErreur.call(this, lJSONReseau.Erreur ? lJSONReseau.Erreur : lJSONReseau.donnees.Erreur);
                    } else {
                        var lJSONAttente = lJSONReseau.donnees[EGenreIdsRequeteAjax.SignatureAttente];
                        var lParametresAttente = lJSONAttente ? _recupererParametresAttente.bind(this)(lJSONAttente.Parametres) : {};
                        if (lJSONAttente) {
                            if (!lParametresAttente.sansBlocageInterface) {
                                this._attenteEnCours = lJSONAttente ? true : false;
                            }
                        } else {
                            this._attenteEnCours = false;
                        }
                        if (this._attenteEnCours) {
                            if (ARequete.Parametres.sansBlocageInterface) {
                                Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                                    emission: true,
                                    upload: false,
                                    message: ARequete.Parametres.messageDetail
                                });
                                delete ARequete.Parametres.sansBlocageInterface;
                            }
                            _declencherAttente.bind(this)({
                                JSONAttente: lJSONAttente,
                                requeteModele: ARequete,
                                parametresAttente: lParametresAttente
                            });
                        } else {
                            if (!ARequete.Parametres.sansBlocageInterface) {
                                Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                                    emission: false
                                });
                            }
                            if (lJSONAttente && lParametresAttente.sansBlocageInterface) {
                                _declencherAttente.bind(this)({
                                    JSONAttente: lJSONAttente,
                                    requeteModele: ARequete,
                                    parametresAttente: lParametresAttente
                                });
                                if (lParametresAttente.deserialisation) {
                                    _surReception.call(this, ARequete, lJSONReseau);
                                } else {
                                    _setRequeteEtatTermine.call(this, ARequete);
                                    _envoieRequete.call(this);
                                }
                            } else {
                                _surReception.call(this, ARequete, lJSONReseau);
                            }
                        }
                    }
                    break;
                case 500:
                    if (!window.GApplication || !GApplication._unloadEnCours) {
                        $.get("erreurRequete/" + ARequete + '/' + AStatut);
                    }
                    _composePageErreur.call(this, null, AStatut);
                    break;
                default:
                    if (!window.GApplication || !GApplication._unloadEnCours) {
                        $.get("erreurRequete/" + ARequete + '/' + AStatut);
                    }
                    GLog.addLog('échec requête ajax. requête = ' + ARequete + '. statut = ' + AStatut);
                    _composePageErreur.call(this, null, AStatut);
                    break;
            }
        }

        function _declencherAttente(aParametres) {
            var lParametres = {
                JSONAttente: null,
                requeteModele: null,
                parametresAttente: {}
            };
            $.extend(lParametres, aParametres);
            if (!lParametres.parametresAttente.sansBlocageInterface) {
                window.clearTimeout(this.Timer);
                this.Timer = setTimeout(_repeterRequeteAttente.bind(this, lParametres), lParametres.parametresAttente.delai);
            } else {
                var lNomFunction = lParametres.requeteModele.Parametres.nomDeFonction;
                if (_pileTimerEnAttente[lNomFunction]) {
                    if (_pileTimerEnAttente[lNomFunction].timer) {
                        clearTimeout(_pileTimerEnAttente[lNomFunction].timer);
                    }
                    delete _pileTimerEnAttente[lNomFunction];
                }
                if (lParametres.requeteModele.__interruptionReponse) {
                    delete lParametres.requeteModele.__interruptionReponse;
                    return;
                }
                var lTimer = setTimeout(_repeterRequeteAttente.bind(this, lParametres), lParametres.parametresAttente.delai);
                _pileTimerEnAttente[lNomFunction] = {
                    timer: lTimer
                };
            }
        }

        function _repeterRequeteAttente(aParametres) {
            var lJSON, lNomRequete = aParametres.requeteModele.Parametres.nomDeFonction;
            if (aParametres.parametresAttente.repeterRequete) {
                lJSON = aParametres.requeteModele.Parametres.jsonOrigine;
                if (!(lJSON && lJSON[EGenreIdsRequeteAjax.SignatureAttente]) && aParametres.JSONAttente) {
                    lJSON[EGenreIdsRequeteAjax.SignatureAttente] = MethodesObjet.dupliquer(aParametres.JSONAttente);
                }
            } else {
                lJSON = {};
                if (aParametres.JSONAttente) {
                    lJSON[EGenreIdsRequeteAjax.SignatureAttente] = MethodesObjet.dupliquer(aParametres.JSONAttente);
                }
            };
            _setRequeteEtatTermine.call(this, aParametres.requeteModele);
            var lRequete = this.appel_fonction_asynchrone_xml({
                nom: lNomRequete,
                json: lJSON,
                callbackPere: aParametres.requeteModele.Parametres.pereReponse,
                callbackEvenement: aParametres.requeteModele.Parametres.evenementReponse,
                requetePrioritaire: !aParametres.parametresAttente.sansBlocageInterface,
                sansBlocageInterface: aParametres.parametresAttente.sansBlocageInterface
            });
            if (aParametres.parametresAttente.sansBlocageInterface) {
                lRequete.__estUneAttenteNonBloquante = true;
                _pileTimerEnAttente[lRequete.Parametres.nomDeFonction].requete = lRequete;
            }
        }

        function _traiterPileAttenteSurReponseRequete(aRequete) {
            if (aRequete && aRequete.__estUneAttenteNonBloquante) {
                var lNomRequete = aRequete.Parametres.nomDeFonction;
                if (_pileTimerEnAttente[lNomRequete]) {
                    if (_pileTimerEnAttente[lNomRequete].timer) {
                        clearTimeout(_pileTimerEnAttente[lNomRequete].timer);
                    }
                    delete _pileTimerEnAttente[lNomRequete];
                }
                delete aRequete.__estUneAttenteNonBloquante;
            }
        }

        function _eventInterruptionRequete(aParametres) {
            var lParametres = {
                nomRequete: ''
            };
            $.extend(lParametres, aParametres);
            if (lParametres.nomRequete && _pileTimerEnAttente[lParametres.nomRequete]) {
                if (_pileTimerEnAttente[lParametres.nomRequete].timer) {
                    clearTimeout(_pileTimerEnAttente[lParametres.nomRequete].timer);
                    delete _pileTimerEnAttente[lParametres.nomRequete].timer;
                }
                if (_pileTimerEnAttente[lParametres.nomRequete].requete) {
                    _pileTimerEnAttente[lParametres.nomRequete].requete.__interruptionReponse = true;
                } else {
                    delete _pileTimerEnAttente[lParametres.nomRequete];
                }
                GLog.addLog('requete en attente : [' + lParametres.nomRequete + '] interrompu');
            }
        }

        function _eventModificationRequeteAttente(aParametres) {
            var lParametres = {
                nomRequete: ''
            };
            $.extend(lParametres, aParametres);
            var lRequeteExiste = false;
            if (lParametres.nomRequete && lParametres.donnees) {
                for (var i = 0, nb = this.pileRequetes.length; i < nb; i++) {
                    if (this.pileRequetes[i] && this.pileRequetes[i].Parametres.nomDeFonction) {
                        lRequeteExiste = i;
                        break;
                    }
                }
                if (lRequeteExiste !== false) {
                    $.extend(this.pileRequetes[lRequeteExiste].Parametres.jsonOrigine.donnees, lParametres.donnees);
                }
            }
        }

        function _recupererParametresAttente(aParametres) {
            var lParametres = {
                sansBlocageInterface: false,
                delai: this.FDureeEnCours,
                repeterRequete: false,
                deserialisation: false
            };
            if (aParametres) {
                if (aParametres.sansBlocageInterface) {
                    lParametres.sansBlocageInterface = true;
                }
                if (aParametres.delai && aParametres.delai > 0) {
                    lParametres.delai = aParametres.delai * 1000;
                }
                if (aParametres.repeterRequete) {
                    lParametres.repeterRequete = true;
                }
                if (aParametres.date) {
                    lParametres.date = aParametres.date;
                }
                if (aParametres.deserialisation) {
                    lParametres.deserialisation = aParametres.deserialisation;
                }
            }
            return lParametres;
        }

        function _setRequeteEtatTermine(aRequete) {
            if (aRequete) {
                aRequete.etat = TypeEtatRequeteAjax.termine;
                this.pileRequetes = this.pileRequetes.filter(function(aRequete, aIndex) {
                    return !!aRequete && aRequete.etat !== TypeEtatRequeteAjax.termine;
                });
            }
            _requetePresenceDelai.call(this);
        }

        function _surReception(aRequete, aJSON, aEnEchec) {
            _setRequeteEtatTermine.call(this, aRequete);
            _envoieRequete.call(this);
            if (aRequete.Parametres.pereReponse && aRequete.Parametres.evenementReponse) {
                aRequete.Parametres.evenementReponse.call(aRequete.Parametres.pereReponse, aJSON ? aJSON.donnees : {}, aEnEchec);
            }
        }

        function _composePageErreur(aJSONErreur, aStatut) {
            var lParametres = {
                constructionPage: true,
                statut: aStatut,
                jsonErreur: aJSONErreur
            };
            Invocateur.evenement(ObjetInvocateur.events.erreurCommunication, lParametres);
            Invocateur.evenement(ObjetInvocateur.events.fermerFenetres, true);
        }

        function _requetePresenceDelai() {
            window.clearTimeout(this.timerPresence);
            this.timerPresence = setTimeout(_requeteDePresence.bind(this), _getDureeTimerPresence.call(this));
        }
        _ObjetCommunication.prototype.setMAJServeurEnCours = function(aMAJEnCours) {
            this._MAJServeurEnCours = aMAJEnCours;
            if (this._requetePresenceActive) {
                _requetePresenceDelai.call(this);
            }
        };

        function _getDureeTimerPresence() {
            return this._MAJServeurEnCours ? Math.min(_ObjetCommunication.cDureeTimerPresenceMAJServeurEnCours, this._dureeTimerPresence) : this._dureeTimerPresence;
        }
        _ObjetCommunication.prototype.activerPresence = function() {
            this._requetePresenceActive = true;
            _requetePresenceDelai.bind(this)();
            _envoiRequetePolling.call(this);
        };
        _ObjetCommunication.prototype.desactiverPresence = function() {
            this._requetePresenceActive = false;
            window.clearTimeout(this.timerPresence);
        };
        _ObjetCommunication.prototype.setDureeTimerPresence = function(aDureeMs) {
            this._dureeTimerPresence = aDureeMs;
            if (this._requetePresenceActive) {
                _requetePresenceDelai.call(this);
            }
        };
        _ObjetCommunication.prototype.requeteEnCours = function() {
            return (this.pileRequetes[0] && this.pileRequetes[0].enAttente()) || this._attenteEnCours;
        };

        function _requeteDePresence() {
            if (_ObjetCommunication.optionsSecurite.avecPollingActif) {
                return;
            }
            if (!this.requeteEnCours() && this._requetePresenceActive && this._requetePresenceEnPause !== true) {
                Requetes('Presence').lancerRequete();
            }
            _requetePresenceDelai.bind(this)();
        }

        function _modificationPresenceUtilisateur(aPresenceUtilisateur) {
            var lNomRequete;
            if (aPresenceUtilisateur) {
                delete this._requetePresenceEnPause;
                _requeteDePresence.bind(this)();
                _envoiRequetePolling.call(this, {
                    presence: true
                });
            } else {
                this._requetePresenceEnPause = true;
                window.clearTimeout(this.timerPresence);
                for (lNomRequete in _pileTimerEnAttente) {
                    if (_pileTimerEnAttente[lNomRequete]) {
                        _eventInterruptionRequete.call(this, {
                            nomrequete: lNomRequete
                        });
                    }
                }
            }
        }
        _ObjetCommunication.prototype.composeUrlFichier = function(aPrefix, aNomFichier, aParam) {
            var lResult = '';
            if (aPrefix !== '') {
                lResult += aPrefix + '/';
            }
            lResult += this.getChaineChiffreeAES(JSON.stringify(aParam && aParam.toJSONAll ? aParam.toJSONAll() : aParam));
            lResult += '/' + aNomFichier;
            lResult += '?Session=' + this.NumeroDeSession;
            return lResult;
        };
        _ObjetCommunication.prototype.composeUrlFichierExterne = function(aNomFichier, aParam) {
            return this.composeUrlFichier('FichiersExternes', GChaine.enleverEntites(aNomFichier), aParam);
        };
        _ObjetCommunication.prototype.composeUrlIManuel = function(aNomFichier, aParam) {
            return this.composeUrlFichier('IManuel', aNomFichier, aParam);
        };
        _ObjetCommunication.prototype.getChaineChiffreeAES = function(aChaine) {
            return GCryptage.encrypter({
                genreCryptage: EGenreCryptage.AES,
                chaine: aChaine,
                cle: this.cleAES,
                iv: this.ivAES
            });
        };
        _ObjetCommunication.prototype.startPolling = function() {
            _envoiRequetePolling.call(this);
        };

        function _envoiRequetePolling(aParams) {
            if (!_ObjetCommunication.optionsSecurite.avecPollingActif) {
                return;
            }
            var lParams = Object.assign({
                echecReseau: null,
                presence: false
            }, aParams);
            if (this.polling.timeoutEchec) {
                clearTimeout(this.polling.timeoutEchec);
                this.polling.timeoutEchec = null;
            }
            if (this.polling.requeteEnCours) {
                if (!lParams.presence) {
                    GLog.addLog('Double envoi Polling');
                }
                return;
            }
            if (this._requetePresenceEnPause || !this._requetePresenceActive) {
                if (this.polling.messageDecoEnCours) {
                    this.polling.messageDecoEnCours = false;
                    Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                        blocageDeconnexion: false
                    });
                }
                return;
            }
            var lJSONEnvoi = {};
            if (lParams.echecReseau) {
                Object.assign(lJSONEnvoi, {
                    echecReseau: true,
                    nbEchecs: lParams.echecReseau.nb,
                    strEchec: lParams.echecReseau.log
                });
            }
            lJSONEnvoi = ObjetJSON.preparerJSON(lJSONEnvoi, {
                JSONCollection: {}
            });
            var lResultJSON = _traiterJSONEnvoi.call(this, lJSONEnvoi);
            this.polling.requeteEnCours = new ObjetRequete({
                numeroSession: this.NumeroDeSession,
                numeroRequete: this.polling.nbRequetes,
                nomRequete: 'appelpolling',
                genreEspace: this.GenreEspace,
                nomDeFonction: 'polling',
                estPolling: true,
                parametres: lResultJSON.JSON,
                callBackReadyStateChange: function(aRequete, aReponse, aStatut) {
                    this.polling.requeteEnCours = null;
                    if (this.polling.timeoutExpirationRequete) {
                        clearTimeout(this.polling.timeoutExpirationRequete);
                        this.polling.timeoutExpirationRequete = null;
                    }
                    if (!this._requetePresenceActive) {
                        return;
                    }
                    this.polling.nbRequetes += 1;
                    var lStatut = parseInt(aStatut, 10);
                    switch (lStatut) {
                        case 200:
                            this.polling.numeroOrdre += 1;
                            lParams.echecReseau = null;
                            if (this.polling.messageDecoEnCours) {
                                this.polling.messageDecoEnCours = false;
                                Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                                    blocageDeconnexion: false
                                });
                            }
                            var lJSONReseau = aReponse ? ObjetJSON.parseJSON(aReponse) : null;
                            if (lJSONReseau) {
                                _getXmlReponseStatut200.call(this, aRequete, aReponse, lJSONReseau, true);
                                if (lJSONReseau.Erreur || (lJSONReseau.donnees && lJSONReseau.donnees.Erreur)) {
                                    _composePageErreur.call(this, lJSONReseau.Erreur ? lJSONReseau.Erreur : lJSONReseau.donnees.Erreur);
                                    return;
                                }
                                if (lJSONReseau.donnees) {
                                    Invocateur.evenement('notifPolling', lJSONReseau.donnees);
                                }
                            }
                            _envoiRequetePolling.call(this);
                            break;
                        default:
                            if (!lParams.echecReseau) {
                                lParams.echecReseau = {
                                    nb: 0,
                                    dateDebut: new Date(),
                                    log: ''
                                };
                            }
                            lParams.echecReseau.nb += 1;
                            var lDateEchec = new Date();
                            lParams.echecReseau.log += (lParams.echecReseau.log ? ' / ' : '') + lDateEchec.getHours() + ':' + lDateEchec.getMinutes() + ':' + lDateEchec.getSeconds() + ':' + lDateEchec.getMilliseconds() + ' -statut:' + aStatut;
                            if (lParams.echecReseau.nb === 3) {
                                this.polling.messageDecoEnCours = true;
                                Invocateur.evenement(ObjetInvocateur.events.eventIOAjax, {
                                    blocageDeconnexion: true,
                                    message: GTraductions.getValeur('requete.ConnexionPerdue')
                                });
                            }
                            if (lParams.echecReseau.nb >= (2 * 60 * 1000 / this.polling.delaiEchecReseau) || (lParams.echecReseau.dateDebut && lParams.echecReseau.dateDebut.getTime && (new Date().getTime() - lParams.echecReseau.dateDebut.getTime() > this.polling.delaiTimeoutEchecReseau))) {
                                if (!window.GApplication || !GApplication._unloadEnCours) {
                                    $.get("erreurRequete/" + aRequete + '/' + aStatut);
                                }
                                GLog.addLog('FIN SESSION : Echec requête polling. statut = ' + aStatut);
                                _composePageErreur.call(this, null, aStatut);
                                return;
                            }
                            GLog.addLog('Echec polling => rejeu requête polling. Statut = ' + aStatut);
                            this.polling.timeoutEchec = setTimeout(function() {
                                _envoiRequetePolling.call(this, lParams);
                            }.bind(this), this.polling.delaiEchecReseau);
                    }
                }.bind(this),
                log: {
                    tailleDonnees: lResultJSON.JSONStr_clair.length,
                    tempsChiffre: ''
                }
            });
            this.polling.requeteEnCours.EnvoieRequete({
                numeroOrdre: this.polling.numeroOrdre,
                numeroOrdreChiffre: this.getChaineChiffreeAES(this.polling.numeroOrdre)
            });
            this.polling.timeoutExpirationRequete = setTimeout(function() {
                this.polling.timeoutExpirationRequete = null;
                GLog.addLog('Timeout Polling');
                if (this.polling.requeteEnCours) {
                    if (this.polling.requeteEnCours.Requete && this.polling.requeteEnCours.Requete.abort) {
                        return this.polling.requeteEnCours.Requete.abort();
                    }
                }
                _envoiRequetePolling.call(this);
            }.bind(this), this.polling.delaiTimeoutRequete);
        }
        module.exports = _ObjetCommunication;
    },
    fn: "_objetcommunication.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreBoiteMessage = {
            Information: 0,
            Confirmation: 1,
            MrFiche: 2
        };
        module.exports = EGenreBoiteMessage;
    },
    fn: "enumere_boitemessage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeHttpAcces = {
            HttpAcces_Espace: 0,
            HttpAcces_ConnexionEspace: 1,
            HttpAcces_ConnexionDirect: 2,
            HttpAcces_ConnexionJetonEspace: 3,
            HttpAcces_ConnexionJetonDirect: 4,
            HttpAcces_ConnexionCookie: 5
        };
        module.exports.TypeHttpAcces = TypeHttpAcces;
    },
    fn: "enumere_acces.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeHttpAcces = require('Enumere_Acces.js').TypeHttpAcces;

        function ObjetAcces(aGenreAcces, aGenreEspace, aGenreOnglet, aGenreSousOnglet, aNumeroRessource, aNumeroRessourceSecondaire) {
            this.genre = aGenreAcces;
            this.genreEspace = aGenreEspace;
            this.genreOnglet = aGenreOnglet;
            this.genreSousOnglet = aGenreSousOnglet;
            this.numeroRessource = aNumeroRessource;
            this.numeroRessourceSecondaire = aNumeroRessourceSecondaire;
            this.avecRecherche = false;
            this.initialisation();
        }
        ObjetAcces.prototype.initialisation = function() {
            this.utilisateur = {};
            this.utilisateur.nom = '';
            this.utilisateur.libelleRecherche = '';
            this.utilisateur.identifiant = '';
            this.utilisateur.password = '';
        };
        ObjetAcces.prototype.setNom = function(aNom, aLibelleRecherche) {
            this.utilisateur.nom = aNom;
            this.utilisateur.libelleRecherche = aLibelleRecherche;
        };
        ObjetAcces.prototype.getNom = function() {
            return this.utilisateur.nom;
        };
        ObjetAcces.prototype.setIdentification = function(aIdentifiant, aPassword) {
            this.utilisateur.identifiant = aIdentifiant;
            this.utilisateur.password = aPassword ? aPassword : '@direct';
        };
        ObjetAcces.prototype.estConnexionCAS = function() {
            return (this.genre === TypeHttpAcces.HttpAcces_ConnexionJetonEspace || this.genre === TypeHttpAcces.HttpAcces_ConnexionJetonDirect);
        };
        ObjetAcces.prototype.estConnexionCookie = function() {
            return this.genre === TypeHttpAcces.HttpAcces_ConnexionCookie;
        };
        ObjetAcces.prototype.estConnexionDirect = function() {
            if (this.genre === TypeHttpAcces.HttpAcces_ConnexionDirect) {}
            var lResult = (this.genre === TypeHttpAcces.HttpAcces_ConnexionJetonDirect);
            return lResult;
        };
        ObjetAcces.prototype.estConnexionEspaceEtudiant = function() {
            if (this.genre === TypeHttpAcces.HttpAcces_ConnexionEspace) {}
            var lResult = (this.genre === TypeHttpAcces.HttpAcces_ConnexionJetonEspace);
            return lResult;
        };
        module.exports = ObjetAcces;
    },
    fn: "objetacces.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var TypeHttpAcces = require('Enumere_Acces.js').TypeHttpAcces;
        var ObjetAcces = require('ObjetAcces.js');
        var EGenreEspace = require('Enumere_Espace.js');

        function ObjetAccesPN(aGenreAcces, aGenreEspace, aGenreOnglet, aGenreSousOnglet, aNumeroRessource, aNumeroRessourceSecondaire) {
            this.inheritedCreate(aGenreAcces, aGenreEspace, aGenreOnglet, aGenreSousOnglet, aNumeroRessource, aNumeroRessourceSecondaire);
        }
        MethodesObjet.heritagePrototype(ObjetAccesPN, ObjetAcces);
        ObjetAccesPN.prototype.estConnexionEspaceEtudiant = function() {
            if (this.genre === TypeHttpAcces.HttpAcces_Espace) {}
            var lResult = (this.genre === TypeHttpAcces.HttpAcces_ConnexionJetonEspace);
            lResult = (lResult && this.genreEspace === EGenreEspace.Eleve);
            return lResult;
        };
        module.exports = ObjetAccesPN;
    },
    fn: "objetaccespn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var IELocalStorage = require('LocalStorage.js');

        function ObjetOptionsEspaceLocal(aOptions) {
            this.options = $.extend({
                racine: 'OPTIONS_ESPACE_',
                nomProduit: '',
                espace: ''
            }, aOptions);
        }
        ObjetOptionsEspaceLocal.prototype.getOptionsJSON = function() {
            var lJSON = IELocalStorage.getItemJSON(this.options.racine + (this.options.nomProduit || ''));
            if (!lJSON) {
                lJSON = {};
            }
            return lJSON;
        };
        ObjetOptionsEspaceLocal.prototype.setOptionsJSON = function(aJSON) {
            IELocalStorage.setItemJSON(this.options.racine + (this.options.nomProduit || ''), aJSON);
            return this;
        };
        ObjetOptionsEspaceLocal.prototype.getOptionEspace = function(aNomOption) {
            return this.getOptionsJSON()[aNomOption + '_' + this.options.espace];
        };
        ObjetOptionsEspaceLocal.prototype.setOptionEspace = function(aNomOption, aValeur) {
            var lJSON = this.getOptionsJSON();
            if (aValeur) {
                lJSON[aNomOption + '_' + this.options.espace] = aValeur;
            } else if (aValeur === undefined || aValeur === null || aValeur === false) {
                delete lJSON[aNomOption + '_' + this.options.espace];
            }
            this.setOptionsJSON(lJSON);
            return this;
        };
        ObjetOptionsEspaceLocal.prototype.getModeAccessible = function() {
            return !!this.getOptionEspace('modeA');
        };
        ObjetOptionsEspaceLocal.prototype.setModeAccessible = function(aModeAccessible) {
            this.setOptionEspace('modeA', aModeAccessible);
            return this;
        };
        module.exports = ObjetOptionsEspaceLocal;
    },
    fn: "objetoptionsespacelocal.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var ObjetOptionsEspaceLocal = require('ObjetOptionsEspaceLocal.js');

        function ObjetOptionsEspaceLocalPN(aOptions) {
            this.inheritedCreate(aOptions);
        }
        MethodesObjet.heritagePrototype(ObjetOptionsEspaceLocalPN, ObjetOptionsEspaceLocal);
        ObjetOptionsEspaceLocalPN.prototype.getGenreConnexion = function() {
            return this.getOptionsJSON().genreConnexion;
        };
        ObjetOptionsEspaceLocalPN.prototype.setGenreConnexion = function(aGenreConnexion) {
            var lJSON = this.getOptionsJSON();
            lJSON.genreConnexion = aGenreConnexion;
            this.setOptionsJSON(lJSON);
        };
        module.exports = ObjetOptionsEspaceLocalPN;
    },
    fn: "objetoptionsespacelocalpn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeModeGrillesEDT = {
            TMG_CycleHebdomadaire: 0,
            TMG_CycleAvecferies: 1,
            TMG_CycleSansFeries: 2
        };
        module.exports.TypeModeGrillesEDT = TypeModeGrillesEDT;
    },
    fn: "typemodegrillesedt.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GUID = require('GUID.js');
        var GLog = require('IELog.js');
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var GHtml = require('GHtml.js');
        var GPosition = require('GPosition.js');
        var GStyle = require('GStyle.js');
        var Support = require('ObjetSupport.js');

        function ObjetHint() {}
        var uTimeoutFondu = null,
            uIdConteneur = GUID.getId(),
            uIdScroll = uIdConteneur + '_scroll',
            uHintsEnAttente = [],
            uHintEnCoursChargement = null,
            uHintAffiche = null,
            uHintInitialise = false,
            uConteneurEventInvocateur = {};
        ObjetHint.getDisabled = function() {
            return !GPosition.placerFicheSource || !GStyle.composeOpacite || !GStyle.composeTransitions || !GStyle.setOpacity;
        };
        ObjetHint.start = function(aContenu, aOptions) {
            if (ObjetHint.getDisabled()) {
                GLog.addLog('ObjetHint.start => disabled sur espaces mobiles');
                return;
            }
            if (!uHintInitialise) {
                uHintInitialise = true;
                $(document).on('iedown.Hint keydown.Hint', _stopAll);
                $(window).on('resize.Hint', function(event) {
                    if (uHintAffiche && uHintAffiche.hintTouch) {
                        return;
                    }
                    _stopAll(event);
                });
                if (!Support.supportTouchPointerEvent) {
                    $('body').on('mouseleave.Hint', _stopAll);
                }
            }
            var lHint = Object.assign({
                sansDelai: false,
                position: null,
                couleurFond: 'white',
                maxHeight: 500,
                maxWidth: 550,
                delaiFondu: 200,
                delaiTimer: 400,
                delaiFermeture: 0,
                event: null,
                elementDOM: null
            }, aOptions);
            lHint.actif = false;
            if (!aContenu || (aContenu === '')) {
                return lHint;
            }
            if (lHint.elementDOM && lHint.elementDOM.setAttribute) {
                lHint.elementDOM.setAttribute('title', '');
            }
            lHint.actif = true;
            uHintsEnAttente.push(lHint);
            if (lHint.sansDelai) {
                _afficher(aContenu, lHint);
            } else {
                lHint.promiseTimerDelai = new Promise(function(aResolve) {
                    lHint.timer = setTimeout(function() {
                        _afficher.call(this, aContenu, lHint);
                        if (lHint.pomiseAfficher) {
                            lHint.pomiseAfficher.then(function() {
                                aResolve();
                            });
                        } else {
                            aResolve();
                        }
                    }.bind(this), lHint.delaiTimer);
                });
            }
            return lHint;
        };
        ObjetHint.stop = function(aHint) {
            if (aHint && aHint === uHintEnCoursChargement) {
                return false;
            }
            if (aHint) {
                var lARetirer = !aHint.estAffiche;
                _stopHint(aHint);
                if (lARetirer) {
                    setTimeout(function() {
                        _retirerHintPileAttente(aHint);
                    }, 0);
                }
            } else {
                _stopAll();
            }
        };
        ObjetHint.attach = function(aParam) {
            if (ObjetHint.getDisabled()) {
                GLog.addLog('ObjetHint.attach > disabled sur espaces mobiles');
                return;
            }
            var lNamespace = aParam.namespace ? aParam.namespace = '.' + aParam.namespace : '.IEHint',
                lContenu = aParam.contenu,
                lInterrupt = aParam.interrupt,
                lMargeDeplacementTouch = 50,
                lIdentEventsTouch = GNavigateur.getEventInvocateur('mousemove') + ' ' + GNavigateur.getEventInvocateur('touchmove') + ' ' + GNavigateur.getEventInvocateur('pointermove'),
                lHint, lTimeoutTouch, lStop = function() {
                    if (lTimeoutTouch) {
                        clearTimeout(lTimeoutTouch);
                        lTimeoutTouch = null;
                    }
                    Invocateur.desabonner(lIdentEventsTouch, uConteneurEventInvocateur);
                    if (ObjetHint.stop(lHint) !== false) {
                        lHint = null;
                    }
                };
            if (!aParam.$Element) {
                return false;
            }
            if (aParam.off !== false) {
                aParam.$Element.off(' mouseover' + lNamespace + ' mouseleave' + lNamespace + ' mouseout' + lNamespace + ' destroyed' + lNamespace + ' iedown' + lNamespace);
            }
            var lElementDOM = aParam.$Element.get(0);
            var lMap = {};
            lMap['mouseover' + lNamespace] = function(event) {
                if (GNavigateur.touchEnCours) {
                    return;
                }
                if (uHintEnCoursChargement) {
                    return;
                }
                if (lInterrupt && lInterrupt.call(this, event)) {
                    return;
                }
                var lContenuAAfficher = lContenu;
                lHint = ObjetHint.start(lContenuAAfficher, {
                    event: event,
                    elementDOM: lElementDOM
                });
            };
            lMap['destroyed' + lNamespace + ' mouseleave' + lNamespace + ' mouseout' + lNamespace] = function() {
                if (lHint && lHint.hintTouch) {
                    return;
                }
                lStop();
            };
            lMap['iedown' + lNamespace] = function(event) {
                if (!event.estTouch) {
                    return;
                }
                if (lInterrupt && lInterrupt.call(this, event)) {
                    return;
                }
                if (event.originalEvent.__hintSurEventIEDown__) {
                    return;
                }
                event.originalEvent.hintTouch = true;
                var lPositionEvent = GPosition.getPositionEventJQuery(event);
                lHint = ObjetHint.start(lContenu, {
                    delaiTimer: 200,
                    event: event,
                    position: {
                        x: lPositionEvent.x + 5,
                        y: lPositionEvent.y + 5
                    },
                    elementDOM: lElementDOM
                });
                if (!lHint || !lHint.promiseTimerDelai) {
                    return;
                }
                var lTestDeplacement = function(aEvent) {
                    if (lHint && lHint.actif && lHint.position) {
                        var lPositionEvent = GPosition.getPositionEventJQuery(aEvent);
                        if (Math.abs(lPositionEvent.x - lHint.position.x) > lMargeDeplacementTouch || Math.abs(lPositionEvent.y - lHint.position.y) > lMargeDeplacementTouch) {
                            lStop();
                        }
                    }
                };
                Invocateur.desabonner(lIdentEventsTouch, uConteneurEventInvocateur);
                Invocateur.abonner(lIdentEventsTouch, lTestDeplacement, uConteneurEventInvocateur);
                lHint.promiseTimerDelai.then(function() {
                    if (!lHint.estAffiche) {
                        return;
                    }
                    event.originalEvent.__hintSurEventIEDown__ = true;
                    lHint.hintTouch = true;
                    if (lTimeoutTouch) {
                        clearTimeout(lTimeoutTouch);
                    }
                    lTimeoutTouch = setTimeout(function() {
                        lTimeoutTouch = null;
                        if (lHint && lHint.actif && lHint.estAffiche) {
                            lStop();
                        }
                    }, 1500);
                });
            };
            aParam.$Element.on(lMap);
            aParam.$Element = null;
        };

        function _stopHint(aHint) {
            if (!aHint || aHint === uHintEnCoursChargement) {
                return;
            }
            if (aHint.elementDOM && aHint.elementDOM.removeAttribute) {
                aHint.elementDOM.removeAttribute('title');
            }
            if (aHint.estAffiche) {
                uHintAffiche = null;
                if (Support.avecSupportTransitions) {
                    GStyle.setOpacity(uIdConteneur, 0);
                    clearTimeout(uTimeoutFondu);
                    uTimeoutFondu = setTimeout(function() {
                        GHtml.supprimerElementDOM(uIdConteneur);
                        uTimeoutFondu = null;
                    }, aHint.delaiFondu);
                } else {
                    GHtml.supprimerElementDOM(uIdConteneur);
                }
            }
            if (aHint.timerFermeture) {
                clearTimeout(aHint.timerFermeture);
                aHint.timerFermeture = null;
            }
            if (aHint.timer) {
                clearTimeout(aHint.timer);
                aHint.timer = null;
            }
            aHint.estAffiche = false;
            aHint.actif = false;
        }

        function _stopEnAttente() {
            var lHintEnAttente;
            for (var i = 0, lNb = uHintsEnAttente.length; i < lNb; i++) {
                lHintEnAttente = uHintsEnAttente[i];
                if (lHintEnAttente) {
                    lHintEnAttente.actif = false;
                    if (lHintEnAttente.timer) {
                        clearTimeout(lHintEnAttente.timer);
                        lHintEnAttente.timer = null;
                    }
                }
            }
            uHintsEnAttente = [];
        }

        function _stopAll(event, aConserverHintEnCours) {
            if (event && event.originalEvent && event.originalEvent.hintTouch) {
                return;
            }
            if (uHintEnCoursChargement) {
                return;
            }
            if (uHintAffiche && !aConserverHintEnCours) {
                _stopHint(uHintAffiche);
            }
            _stopEnAttente();
        }

        function _getContenu(aContenu, aHint) {
            var lContenu = aContenu;
            if (MethodesObjet.isFunction(aContenu)) {
                lContenu = aContenu(aHint);
                if (lContenu && lContenu.then) {
                    uHintEnCoursChargement = aHint;
                    return lContenu.finally(function() {
                        setTimeout(function() {
                            if (aHint === uHintEnCoursChargement) {
                                uHintEnCoursChargement = null;
                            }
                        }, 50);
                    });
                }
            }
            return lContenu;
        }

        function _retirerHintPileAttente(aHint) {
            var lIndice = uHintsEnAttente.indexOf(aHint);
            if (lIndice >= 0) {
                MethodesTableau.supprimerElement(uHintsEnAttente, lIndice);
            }
        }

        function _loopAnimateScroll(aId, aHauteurAScroller) {
            var lDuree = aHauteurAScroller * 1000 / 100;
            $(aId).delay(1000).animate({
                scrollTop: aHauteurAScroller
            }, {
                duration: lDuree,
                easing: 'linear'
            }).delay(1000).animate({
                scrollTop: 0
            }, {
                duration: 300,
                done: function() {
                    _loopAnimateScroll(aId, aHauteurAScroller);
                }
            });
        }

        function _afficher(aContenu, aHint) {
            if (uHintEnCoursChargement) {
                return;
            }
            aHint.pomiseAfficher = Promise.resolve().then(function() {
                return _getContenu(aContenu, aHint);
            }).then(function(aContenu) {
                var lContenu = aContenu;
                if (!aHint.actif || !lContenu || (lContenu === '')) {
                    aHint.timer = null;
                    aHint.actif = false;
                    return;
                }
                _retirerHintPileAttente(aHint);
                _stopAll();
                uHintAffiche = aHint;
                uHintAffiche.contenu = lContenu;
                clearTimeout(uTimeoutFondu);
                aHint.estAffiche = true;
                aHint.timer = null;
                if (aHint.delaiFermeture > 0) {
                    aHint.timerFermeture = setTimeout(function() {
                        _stopHint(aHint);
                    }, aHint.delaiFermeture);
                }
                var lConteneur = GHtml.getElement(uIdConteneur);
                if (!GHtml.elementExiste(lConteneur)) {
                    lConteneur = GHtml.htmlToDOM('<div id="' + uIdConteneur + '" style="position:absolute; z-index:10000;pointer-events:none;' + (Support.avecSupportTransitions ? GStyle.composeTransitions('opacity', (aHint.delaiFondu / 1000) + 's') + GStyle.composeOpacite(0) : '') + '"></div>');
                    GHtml.insererElementDOM(GHtml.getElement(GApplication.getIdConteneur()), lConteneur);
                }
                GHtml.setHtml(lConteneur, compose(lContenu, aHint));
                var lPosition = Object.assign({
                        y: GNavigateur.SourisY,
                        x: GNavigateur.SourisX
                    }, aHint.position),
                    lDecalage = aHint.position ? {
                        x: 0,
                        y: 0
                    } : {
                        x: 0,
                        y: 20
                    };
                var lJScroll = $('#' + uIdScroll.escapeJQ()),
                    lHeightScroll = lJScroll.height(),
                    lHeightContenu = lJScroll.children().height(),
                    lAvecScroll = lHeightScroll < lHeightContenu;
                lJScroll.css('width', lJScroll.outerWidth());
                GPosition.placerFicheSource(uIdConteneur, lPosition.x, lPosition.x, lPosition.y, lPosition.y, false, lDecalage);
                GStyle.setOpacity(lConteneur, 1);
                if (lAvecScroll) {
                    _loopAnimateScroll('#' + uIdScroll.escapeJQ(), lHeightContenu - lHeightScroll);
                }
            });
        }

        function compose(aContenu, aHint) {
            var lHtml = [];
            lHtml.push('<div id="', uIdScroll, '" tabindex="-1" class="SansOutline"', ' style="width:auto; height:auto; max-height:', Math.min(aHint.maxHeight, GNavigateur.EcranL), 'px; max-width:', Math.min(aHint.maxWidth, GNavigateur.EcranH), 'px;', 'cursor:default; overflow-y:auto; overflow-x:hidden;', GStyle.composeCouleur(aHint.couleurFond, GCouleur.texte, GCouleur.bordure), GStyle.composeBoxShadow(), '">', '<div class="Texte10 PetitEspace">', aContenu, '</div>', '</div>');
            return lHtml.join('');
        }
        ObjetHint.nodeDansHint = function(aNode) {
            return $(aNode).parents('#' + uIdConteneur.escapeJQ()).length > 0;
        };
        module.exports = ObjetHint;
    },
    fn: "objethint.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var IEHtml = require('IEHtml.js');
        var MethodesObjet = require('MethodesObjet.js');
        var ObjetHint = require('objethint.js');
        var GStyle = require('GStyle.js');
        var c_PPP = '…';

        function _reductionTextMultiline(aNode, aNodeText, aChaine, aOptions) {
            var lAvecModif = false;
            try {
                var lConteneur = $(aNode).parent();
                var lHeight = 0;
                var lWidth = Math.round(lConteneur.innerWidth());
                if (aOptions.nbLignesMax > 0 && MethodesObjet.isNumber(aOptions.nbLignesMax)) {
                    try {
                        var lLineHeight = GStyle.getComputedValue(aNode, 'line-height');
                        if (lLineHeight === 'normal') {
                            lLineHeight = Math.round(GStyle.getFloatComputedValue(aNode, 'font-size')) * 1.2;
                        } else {
                            lLineHeight = Math.round(parseFloat(lLineHeight, 10));
                        }
                    } catch (e) {
                        return true;
                    }
                    lHeight = lLineHeight * (aOptions.nbLignesMax > 0 && MethodesObjet.isNumber(aOptions.nbLignesMax) ? aOptions.nbLignesMax : 1);
                    if (!MethodesObjet.isNumber(lHeight)) {
                        return true;
                    }
                } else {
                    lHeight = Math.round(lConteneur.innerHeight());
                }
                var lEnOverflowHeight = function() {
                    return lHeight > 0 && aNode.clientHeight - 1 > lHeight;
                };
                var lEnOverflow = function() {
                    return lHeight > 0 && lWidth > 0 && (lEnOverflowHeight() || aNode.scrollWidth - 1 > lWidth);
                };
                if (lEnOverflow()) {
                    lAvecModif = true;
                    var cMinNbCar = 1;
                    var lMinIndex = cMinNbCar;
                    var lMaxIndex = aChaine.length;
                    while (lMaxIndex > lMinIndex && lEnOverflow()) {
                        var lMaxTemp = Math.floor((lMaxIndex + lMinIndex) / 2 | 0);
                        if (lMaxTemp > lMinIndex) {
                            if (lEnOverflowHeight()) {
                                aNodeText.nodeValue = aChaine.slice(0, lMaxTemp) + c_PPP;
                                if (lEnOverflowHeight()) {
                                    lMaxIndex = lMaxTemp;
                                }
                            } else {
                                var lClientHeight = aNode.clientHeight;
                                aNodeText.nodeValue = aChaine.slice(0, lMaxTemp) + c_PPP;
                                if (lEnOverflow() && aNode.clientHeight === lClientHeight) {
                                    lMaxIndex = lMaxTemp;
                                }
                            }
                        }
                        lMaxIndex = lMaxIndex - 1;
                        aNodeText.nodeValue = aChaine.slice(0, lMaxIndex) + c_PPP;
                    }
                }
            } catch (e) {}
            if (lAvecModif && aOptions.avecHint && !ObjetHint.getDisabled() && !ObjetHint.nodeDansHint(aNode)) {
                ObjetHint.attach({
                    $Element: MethodesObjet.isFunction(aOptions.getJNodeHint) ? $(aOptions.getJNodeHint(aNode)) : $(aNode),
                    namespace: 'ieellipsismultiline',
                    contenu: aChaine,
                    off: false
                });
            }
            return true;
        }
        IEHtml.addAttribut('ie-ellipsis-multiline', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lOptions = {
                nbLignesMax: aAttributValue || '',
                avecHint: true,
                getJNodeHint: null
            };
            if (lOptions.nbLignesMax) {
                var lGetOptions = aOutils.getAccesParametres(aAttributValue, aContexteCourant);
                if (lGetOptions.estFonction) {
                    Object.assign(lOptions, lGetOptions.callback());
                } else {
                    lOptions.nbLignesMax = parseInt(lOptions.nbLignesMax, 10);
                }
                if (!MethodesObjet.isNumber(lOptions.nbLignesMax)) {
                    lOptions.nbLignesMax = '';
                }
            }
            if (!aContexteCourant.node.childNodes || aContexteCourant.node.childNodes.length > 1) {
                return true;
            }
            if (aContexteCourant.node.childNodes.length === 0) {
                return true;
            }
            var lNodeText = aContexteCourant.node.childNodes[0];
            if (!lNodeText || lNodeText.nodeType !== 3) {
                return true;
            }
            var lValueText = lNodeText.nodeValue;
            if (!lValueText || !MethodesObjet.isString(lValueText) || lValueText.length < 3) {
                return true;
            }
            var lTraite = false;
            aOutils.surInjectionHtml(aContexteCourant, function() {
                if (!lTraite && aContexteCourant.node.clientHeight > 0 && aContexteCourant.node.clientWidth > 0) {
                    lTraite = _reductionTextMultiline(aContexteCourant.node, lNodeText, lValueText, lOptions);
                }
            });
            aOutils.abonnerRefresh(function() {
                if (!lTraite && aContexteCourant.node.scrollHeight > 0 && aContexteCourant.node.clientWidth > 0) {
                    lTraite = _reductionTextMultiline(aContexteCourant.node, lNodeText, lValueText, lOptions);
                }
            }, aContexteCourant.node, aContexteCourant);
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-ellipsis-multiline="' + lOptions.nbLignesMax + '"');
            return true;
        });
        module.exports = IEHtml;
    },
    fn: "iehtml.ellipisismultiline.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var IEHtml = require('IEHtml.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var GChaine = require('GChaine.js');
        var GHtml = require('GHtml.js');
        var ObjetHint = require('objethint.js');
        require('IEHtml.EllipisisMultiline.js');
        IEHtml.addAttribut('ie-node', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lValue = aAttributValue || '';
            if (!lValue || !aContexteCourant.controleur) {
                return true;
            }
            var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
            if (!lInfos.estFonction) {
                return true;
            }
            aOutils.surInjectionHtml(aContexteCourant, function() {
                lInfos.callback(Array.prototype.slice.call(arguments));
            });
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-node="' + lValue + '"');
            return true;
        });
        IEHtml.addAttribut('ie-nodeafter', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lValue = aAttributValue || '';
            if (!lValue || !aContexteCourant.controleur) {
                return true;
            }
            var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
            if (!lInfos.estFonction) {
                return true;
            }
            aOutils.surInjectionHtml(aContexteCourant, function() {
                lInfos.callback(Array.prototype.slice.call(arguments));
            }, true);
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-nodeafter="' + lValue + '"');
            return true;
        });
        IEHtml.addAttribut('ie-event', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lValue = aAttributValue || '';
            if (!aContexteCourant.controleur) {
                return;
            }
            var lTab = lValue.split('->');
            if (lTab.length < 2) {
                return;
            }
            var lMethode, lEvents = lTab[0].trim().split('-'),
                lSelecteur = null,
                lInfos;
            lTab.shift();
            lMethode = lTab.join('->');
            if (lMethode.length > 2 && lMethode.charAt(0) === '{') {
                lTab = lMethode.split('}');
                if (lTab.length < 2) {
                    return;
                }
                var lNomSelecteur = lTab[0].slice(1);
                lTab.shift();
                lMethode = lTab.join('}');
                if (aContexteCourant.data && aContexteCourant.data[lNomSelecteur]) {
                    lSelecteur = aContexteCourant.data[lNomSelecteur];
                } else {
                    lSelecteur = lNomSelecteur;
                }
            }
            lInfos = aOutils.getAccesParametres(lMethode, aContexteCourant);
            if (!lInfos.valide || !lInfos.estFonction) {
                return;
            }
            if (lInfos) {
                var lCallbackEvent = function(event) {
                    return lInfos.callback([event, this, aContexteCourant.node, aContexteCourant.data]);
                };
                if (lSelecteur) {
                    $(aContexteCourant.node).on(lEvents.join(' '), lSelecteur, {
                        controleur: aContexteCourant.controleur
                    }, lCallbackEvent);
                } else {
                    $(aContexteCourant.node).on(lEvents.join(' '), {
                        controleur: aContexteCourant.controleur
                    }, lCallbackEvent);
                }
                aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-event="' + lValue + '"');
                return true;
            } else {
                aOutils.addCommentaireDebug(aContexteCourant.node, '[ECHEC] ie-event="' + lValue + '"');
            }
            return true;
        });
        IEHtml.addAttribut('ie-eventout', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lValue = aAttributValue || '';
            if (!lValue || !aContexteCourant.controleur) {
                return true;
            }
            var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
            if (!lInfos.estFonction) {
                return true;
            }
            aOutils.surInjectionHtml(aContexteCourant, function() {
                var lSelec = 'mousedown.eventout touchstart.eventout keydown.eventout';

                function _event(aEvent) {
                    if (aContexteCourant.node !== aEvent.target && (aEvent.isTrigger || !GHtml.estDocument(aEvent.target)) && !$.contains(aContexteCourant.node, aEvent.target)) {
                        var lResult = lInfos.callback(Array.prototype.slice.call(arguments));
                        if (lResult && lResult.nodesExclus && lResult.callback) {
                            if (!lResult.nodesExclus.every || lResult.nodesExclus.every(function(aNode) {
                                    return !aNode || (aNode !== aEvent.target && !$.contains(aNode, aEvent.target));
                                })) {
                                lResult.callback();
                            }
                        }
                    }
                }
                $(aContexteCourant.node).on('destroyed', function() {
                    $(document).off(lSelec, _event);
                });
                $(document).on(lSelec, _event);
            });
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-eventout="' + lValue + '"');
            return true;
        });
        IEHtml.addAttribut('ie-title', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lNom = aAttributValue || '',
                lGetter, lOldValue = lNom;
            if (lNom && aContexteCourant.controleur) {
                var lInfos = aOutils.getAccesParametres(lNom, aContexteCourant, true);
                if (lInfos.estFonction) {
                    lGetter = function() {
                        var lResult = (lInfos.callback([aContexteCourant.node, aContexteCourant.data]) || '') + '';
                        return lResult.replace && GChaine && GChaine.enleverEntites ? GChaine.enleverEntites(lResult) : '';
                    };
                }
            }
            if (lGetter) {
                lOldValue = lGetter();
            } else if (lOldValue === 'undefined' || lOldValue === 'null') {
                return false;
            } else {}
            $(aContexteCourant.node).attr('title', lOldValue);
            if (lGetter) {
                aOutils.abonnerRefresh(function() {
                    var lValue = lGetter().toString();
                    if (lOldValue !== lValue) {
                        lOldValue = lValue;
                        $(aContexteCourant.node).attr('title', lOldValue);
                    }
                }, aContexteCourant.node, aContexteCourant);
            }
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-title' + (lNom ? '="' + lNom + '"' : ''));
            return true;
        });
        IEHtml.addAttribut('ie-hint', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            if (ObjetHint.getDisabled()) {
                aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-hint (désactivé sur mobile !)');
                return true;
            }
            var lNom = aAttributValue || '',
                lValue = lNom;
            if (lValue && lValue.length > 2 && lValue.charAt(0) === '\'' && lValue.charAt(lValue.length - 1) === '\'') {
                lValue = lValue.slice(1, lValue.length - 1);
            } else if (lNom && aContexteCourant.controleur) {
                var lInfos = aOutils.getAccesParametres(lNom, aContexteCourant, true);
                if (lInfos.estFonction) {
                    lValue = function(aHint) {
                        var lResult = lInfos.callback([aHint, aContexteCourant.node, aContexteCourant.data]);
                        if (lResult && lResult.then) {
                            return lResult;
                        }
                        return (lResult || '') + '';
                    };
                }
            }
            if (!lValue && aContexteCourant.data && aContexteCourant.data.$hint) {
                lValue = aContexteCourant.data.$hint;
            }
            if (!lValue) {
                return true;
            }
            ObjetHint.attach({
                $Element: $(aContexteCourant.node),
                namespace: 'iehint',
                contenu: lValue,
                off: false
            });
            $(aContexteCourant.node).addClass('jiehint');
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-hint' + (lNom ? '="' + lNom + '"' : ''));
            return true;
        });
        (function() {
            IEHtml.addAttribut('ie-html', function(aContexteCourant, aNodeName, aAttributValue, aOutils, aParametresCompile) {
                var lValue = aAttributValue || '';
                if (!lValue) {
                    lValue = aContexteCourant.data ? aContexteCourant.data.$html : '';
                }
                if (!lValue) {
                    return true;
                }
                if (!aContexteCourant.controleur) {
                    return true;
                }
                var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
                if (!lInfos.valide) {
                    return true;
                }
                var lNodeDestination = aContexteCourant.transfertContenu || aContexteCourant.node;
                var lGetter = function() {
                    var lResult = lInfos.callback([lNodeDestination, aContexteCourant.data]);
                    if (MethodesObjet.isNumber(lResult)) {
                        return lResult + '';
                    }
                    return (lResult || '') + '';
                };
                var lHtml = lGetter();
                if (!lInfos.estFonction && !MethodesObjet.isString(lHtml)) {
                    return;
                }
                var lInvocateur = new ObjetInvocateur();
                $(lNodeDestination).empty();
                try {
                    lNodeDestination.innerHTML = lHtml;
                } catch (e) {
                    $(lNodeDestination).html(lHtml);
                }
                aOutils.compile(lNodeDestination.childNodes, lNodeDestination, aContexteCourant.controleur, aContexteCourant.contexte, lInvocateur);
                var lOldHtmlValue = lHtml;
                aOutils.abonnerRefresh(function(aGuidEmetteur, aHashGuidCible) {
                    var lHtml = lGetter();
                    if (lHtml !== lOldHtmlValue) {
                        lOldHtmlValue = lHtml;
                        GHtml.viderNode(lNodeDestination);
                        var lContexte = Object.assign({}, aContexteCourant.contexte);
                        lContexte.eventsInjectionHtml = [];
                        aOutils.injectHTML({
                            element: lNodeDestination,
                            html: lHtml,
                            controleur: aContexteCourant.controleur,
                            contexte: lContexte,
                            invocateur: lInvocateur
                        });
                    } else {
                        lInvocateur.evenement(IEHtml.C_id_event_iemodel, aGuidEmetteur, aHashGuidCible);
                    }
                }, lNodeDestination, aContexteCourant);
                aOutils.addCommentaireDebug(lNodeDestination, 'ie-html="' + lValue + '"');
                aParametresCompile.avecCompileFils = false;
                return true;
            });
        }());
        IEHtml.addAttribut('ie-texte', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lValue = aAttributValue || '';
            if (!lValue) {
                return true;
            }
            if (!aContexteCourant.controleur) {
                return true;
            }
            var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
            if (!lInfos.valide) {
                return true;
            }
            var lNodeDestination = aContexteCourant.transfertContenu || aContexteCourant.node;
            var lGetter = function() {
                var lResult = lInfos.callback([lNodeDestination, aContexteCourant.data]);
                if (MethodesObjet.isNumber(lResult)) {
                    return lResult + '';
                }
                return (lResult || '') + '';
            };
            var lOldTexte = lGetter();
            $(lNodeDestination).IEHtml('');
            lNodeDestination.appendChild(document.createTextNode(lOldTexte));
            aOutils.abonnerRefresh(function() {
                var lTexte = lGetter();
                if (lTexte !== lOldTexte) {
                    lOldTexte = lTexte;
                    $(lNodeDestination).IEHtml('');
                    lNodeDestination.appendChild(document.createTextNode(lTexte));
                }
            }, lNodeDestination, aContexteCourant);
            aOutils.addCommentaireDebug(lNodeDestination, 'ie-texte="' + lValue + '"');
            return true;
        });
        IEHtml.addAttribut('ie-style', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lValue = aAttributValue || '';
            if (!lValue) {
                lValue = aContexteCourant.data ? aContexteCourant.data.$style : '';
            }
            if (!lValue) {
                return true;
            }
            if (!aContexteCourant.controleur) {
                return true;
            }
            var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
            if (!lInfos.valide) {
                return true;
            }
            var lGetter = function() {
                var lStyle = lInfos.callback([aContexteCourant.node, aContexteCourant.data]) || null;
                return lStyle || {};
            };
            var lObjetCss = lGetter(aContexteCourant.node),
                lJNode = $(aContexteCourant.node);
            if (!lInfos.estFonction || !lObjetCss) {
                return;
            }
            lJNode.css(lObjetCss);
            aOutils.abonnerRefresh(function() {
                var lNewStyleCss = lGetter(aContexteCourant.node);
                if (!MethodesObjet.objetsIdentiques(lNewStyleCss, lObjetCss)) {
                    lObjetCss = lNewStyleCss;
                    $(aContexteCourant.node).css(lObjetCss);
                }
            }, aContexteCourant.node, aContexteCourant);
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-style="' + lValue + '"');
            return true;
        });
        (function() {
            IEHtml.addAttribut('ie-class', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
                var lValue = aAttributValue || '';
                if (!lValue || !aContexteCourant.controleur) {
                    return true;
                }
                var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
                if (!lInfos.valide) {
                    return true;
                }
                var lClassCss = lInfos.callback() || '';
                if (lClassCss.length > 0) {
                    $(aContexteCourant.node).addClass(lClassCss);
                }
                aOutils.abonnerRefresh(function() {
                    var lNewClassCss = lInfos.callback() || '';
                    if (lNewClassCss !== lClassCss) {
                        $(aContexteCourant.node).removeClass(lClassCss).addClass(lNewClassCss);
                        lClassCss = lNewClassCss;
                    }
                }, aContexteCourant.node, aContexteCourant);
                aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-class="' + lValue + '"');
                return true;
            });
        }());
        (function() {
            IEHtml.addAttribut('ie-display', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
                var lValue = aAttributValue || '';
                if (!lValue || !aContexteCourant.controleur) {
                    return true;
                }
                var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
                if (!lInfos.valide) {
                    return true;
                }
                var lGetter = function() {
                    return !!lInfos.callback([aContexteCourant.node, aContexteCourant.data]);
                };
                var lDisplay = lGetter(aContexteCourant.node);
                GHtml.setDisplay(aContexteCourant.node, lDisplay);
                var lOldDisplayValue = lDisplay;
                aOutils.abonnerRefresh(function() {
                    var lDisplay = lGetter(aContexteCourant.node);
                    if (lDisplay !== lOldDisplayValue) {
                        lOldDisplayValue = lDisplay;
                        GHtml.setDisplay(aContexteCourant.node, lDisplay);
                    }
                }, aContexteCourant.node, aContexteCourant);
                aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-display="' + lValue + '"');
                return true;
            });
        }());
        IEHtml.addAttribut('ie-attr', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lValue = aAttributValue || '';
            if (!lValue || !aContexteCourant.controleur) {
                return true;
            }
            var lInfos = aOutils.getAccesParametres(lValue, aContexteCourant);
            if (!lInfos.estFonction) {
                return true;
            }
            var lGetter = function() {
                return lInfos.callback([]);
            };
            var lAttr = MethodesObjet.dupliquer(lGetter());
            if (lAttr) {
                $(aContexteCourant.node).attr(lAttr);
            }
            aOutils.abonnerRefresh(function() {
                var lNewAttr = lGetter();
                if (!MethodesObjet.objetsIdentiques(lNewAttr, lAttr)) {
                    lAttr = MethodesObjet.dupliquer(lNewAttr);
                    $(aContexteCourant.node).attr(lAttr);
                }
            }, aContexteCourant.node, aContexteCourant);
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-attr="' + lValue + '"');
            return true;
        });

        function _initEllipsis(aContexteCourant, aOutils, aAttributValue) {
            var lOptions = {
                getJNodeHint: null,
                avecHint: true
            };
            if (aAttributValue) {
                var lGetOptions = aOutils.getAccesParametres(aAttributValue, aContexteCourant);
                if (lGetOptions.estFonction) {
                    Object.assign(lOptions, lGetOptions.callback());
                } else {}
            }
            $(aContexteCourant.node).addClass('ie-ellipsis');
            if (lOptions.avecHint && !ObjetHint.getDisabled()) {
                aOutils.surInjectionHtml(aContexteCourant, function(aParams) {
                    if (ObjetHint.nodeDansHint(aContexteCourant.node)) {
                        return;
                    }
                    aParams.addMutate(function() {
                        ObjetHint.attach({
                            $Element: MethodesObjet.isFunction(lOptions.getJNodeHint) ? lOptions.getJNodeHint(aContexteCourant.node) : $(aContexteCourant.node),
                            namespace: 'ellipsis',
                            contenu: function() {
                                return $(aContexteCourant.node).html();
                            },
                            interrupt: function() {
                                var lJThis = $(aContexteCourant.node);
                                if (lJThis.hasClass('jiehint')) {
                                    return true;
                                }
                                if (lJThis.prop('title').length > 0) {
                                    return true;
                                }
                                if (Math.ceil(lJThis.outerWidth()) >= lJThis.prop('scrollWidth')) {
                                    return true;
                                }
                            }
                        });
                    });
                }, true);
            }
        }
        IEHtml.addAttribut('ie-ellipsis', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            _initEllipsis(aContexteCourant, aOutils, aAttributValue);
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-ellipsis');
            return true;
        });
        IEHtml.addAttribut('ie-ellipsis-fixe', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            _initEllipsis(aContexteCourant, aOutils, aAttributValue);
            aOutils.surInjectionHtml(aContexteCourant, function(aParams) {
                var lWidth = null;
                aParams.addMeasure(function() {
                    if (!aContexteCourant.node.style.width) {
                        lWidth = $(aContexteCourant.node).width();
                    }
                });
                aParams.addMutate(function() {
                    if (lWidth !== null) {
                        $(aContexteCourant.node).width(Math.ceil(lWidth));
                    }
                });
            }, true);
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-ellipsis-fixe');
            return true;
        });
        IEHtml.addAttribut('ie-hintoverflow', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            aOutils.surInjectionHtml(aContexteCourant, function(aParams) {
                aParams.addMutate(function() {
                    ObjetHint.attach({
                        $Element: $(aContexteCourant.node),
                        namespace: 'ie-hintoverflow',
                        contenu: function() {
                            return $(aContexteCourant.node).html();
                        },
                        interrupt: function() {
                            var lJThis = $(this);
                            if (lJThis.hasClass('jiehint')) {
                                return true;
                            }
                            if (lJThis.prop('title').length > 0) {
                                return true;
                            }
                            var lScrollH = lJThis.prop('scrollHeight') - 1;
                            var lScrollW = lJThis.prop('scrollWidth') - 1;
                            if (lScrollH < 5 || lScrollW < 5) {
                                return true;
                            }
                            if (Math.ceil(lJThis.outerHeight()) >= lScrollH && Math.ceil(lJThis.outerWidth()) >= lScrollW) {
                                return true;
                            }
                        }
                    });
                });
            }, true);
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-hintoverflow');
            return true;
        });
        IEHtml.addAttribut('ie-selecttextfocus', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            if (aNodeName !== 'input' && aNodeName !== 'textarea') {
                return true;
            }
            $(aContexteCourant.node).on({
                'focus': function() {
                    if (this.select) {
                        this.select();
                    }
                },
                'mouseup': function(e) {
                    e.preventDefault();
                }
            });
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-selecttextfocus');
            return true;
        });
        module.exports = IEHtml;
    },
    fn: "iehtmlcomposants.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('produit/css/IEHtml.BtnImage.css');
        var IEHtml = require('IEHtml.js');
        var GLog = require('IELog.js');
        var Invocateur = require('Invocateur.js').Invocateur;
        var GHtml = require('GHtml.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        var EGenreAttribut = require('ObjetWAI.js').EGenreAttribut;
        var TypeEtatBtnImage = {
            NonSelectionne: 0,
            Inactif: 1,
            ClicNonSelectionne: 2,
            Selectionne: 3,
            SurvolNonSelectionne: 4,
            SurvolSelectionne: 5
        };
        IEHtml.addBalise('ie-btnImage', function(aContexteCourant, aOutils) {
            function _actualiser(aJBouton, aData, aEtat) {
                if (lEstIcone) {
                    if (aData.$selection) {
                        aJBouton.addClass('btnImageSelection');
                    } else {
                        aJBouton.removeClass('btnImageSelection');
                    }
                }
                if (lEstIcone || lEstSVG) {
                    return;
                }
                if (!aData.$disabled) {
                    if (aData.$selection) {
                        aData.$genre = aEtat.survol ? TypeEtatBtnImage.SurvolSelectionne : TypeEtatBtnImage.Selectionne;
                    } else if (aEtat.clique) {
                        aData.$genre = TypeEtatBtnImage.ClicNonSelectionne;
                    } else {
                        aData.$genre = aEtat.survol ? TypeEtatBtnImage.SurvolNonSelectionne : TypeEtatBtnImage.NonSelectionne;
                    }
                } else {
                    aData.$genre = TypeEtatBtnImage.Inactif;
                }
                aJBouton.css('background-position', (-aData.$width * aData.$genre) + 'px 0');
            }
            var lEtat = {
                clique: false,
                survole: false
            };
            Object.assign(aContexteCourant.data, {
                $width: 20,
                $selection: false,
                $genre: TypeEtatBtnImage.NonSelectionne,
                $disabled: false
            });
            var lInnerHtml = aContexteCourant.node.innerHTML;
            var lEstSVG = !!lInnerHtml && $(aContexteCourant.node).find('svg').length > 0;
            var lEstIconeStandard = $(aContexteCourant.node).hasClass('btnImageIcon') || $(aContexteCourant.node).hasClass('btnImageIcon2');
            var lEstIcone = lEstIconeStandard || $(aContexteCourant.node).hasClass('ObjetBoutonBandeau_icone') || $(aContexteCourant.node).hasClass('ObjetBoutonMenu_icone');
            var lBouton = lEstIcone ? GHtml.htmlToDOM('<i ' + GObjetWAI.composeRole(EGenreRole.Button) + ' tabindex="0">' + '</i>') : GHtml.htmlToDOM('<div ' + GObjetWAI.composeRole(EGenreRole.Button) + ' tabindex="0">' + '</div>');
            var lJBouton = $(lBouton);
            lJBouton.IEData(aContexteCourant.data);
            var lInfosEvent, lInfosGetSelection, lInfosGetDisabled, lInfosGetTitle, lRefresh, lAvecControleSaisie, lDisabled = false,
                lModele = aOutils.getModel(aContexteCourant),
                lAvecLabelAccessible = aOutils.hasAttribute(aContexteCourant.node, GObjetWAI.WaiAttribut[EGenreAttribut.label]),
                lLabelWAIManquant = !lAvecLabelAccessible,
                lSetTitle = function(aTitle) {
                    aContexteCourant.data.$oldTitle = aTitle;
                    lJBouton.attr('title', aTitle);
                    if (!lAvecLabelAccessible) {
                        lJBouton.attr(GObjetWAI.WaiAttribut[EGenreAttribut.label], aTitle);
                    }
                };
            if (lModele && aContexteCourant.data.$modeleParsed) {
                lInfosEvent = aOutils.getAccesParametresModel('event', aContexteCourant);
                lInfosGetSelection = aOutils.getAccesParametresModel('getSelection', aContexteCourant);
                lInfosGetDisabled = aOutils.getAccesParametresModel('getDisabled', aContexteCourant);
                lInfosGetTitle = aOutils.getAccesParametresModel('getTitle', aContexteCourant);
                lRefresh = aContexteCourant.contexte.refresh;
                lAvecControleSaisie = aOutils.getControleSaisieEvent(aContexteCourant);
                if (lInfosEvent.estFonction) {
                    lJBouton.eventValidation(function(event) {
                        if (aContexteCourant.data.$disabled) {
                            return;
                        }
                        var lAction = function() {
                            var lResult = lInfosEvent.callback([event, this, aContexteCourant.data]);
                            lRefresh();
                            return lResult;
                        };
                        if (lAvecControleSaisie) {
                            ControleSaisieEvenement(lAction);
                        } else {
                            return lAction();
                        }
                    });
                }
                var lGetSelection, lGetterDisabled, lGetterTitle;
                if (lInfosGetSelection.valide) {
                    lGetSelection = function() {
                        return !!lInfosGetSelection.callback([aContexteCourant.node, aContexteCourant.data]);
                    };
                    aContexteCourant.data.$selection = lGetSelection();
                }
                if (lInfosGetDisabled.valide) {
                    lGetterDisabled = function() {
                        return !!lInfosGetDisabled.callback([lBouton, aContexteCourant.data]);
                    };
                    if (lInfosGetDisabled.estFonction || !lGetterDisabled() || lGetterDisabled() === true) {
                        lDisabled = !!lGetterDisabled();
                    } else {
                        lGetterDisabled = null;
                        GLog.addLog('echec getDisabled de ie-bouton, propriété incorrecte du model "' + lModele + '"');
                    }
                }
                if (lInfosGetTitle.estFonction) {
                    lGetterTitle = function() {
                        return lInfosGetTitle.callback([lBouton, aContexteCourant.data]) || '';
                    };
                    lSetTitle(lGetterTitle());
                    lLabelWAIManquant = false;
                }
                var lSetDisabled = function(aDisabled) {
                    if (aDisabled) {
                        lJBouton.attr(GObjetWAI.WaiAttribut[EGenreAttribut.disabled], 'true');
                        lJBouton.addClass('btnImageDisable');
                    } else {
                        lJBouton.get(0).removeAttribute(GObjetWAI.WaiAttribut[EGenreAttribut.disabled]);
                        lJBouton.removeClass('btnImageDisable');
                    }
                };
                if (lGetSelection || lGetterDisabled || lGetterTitle) {
                    aOutils.abonnerRefresh(function() {
                        var lActualiser = false;
                        if (lGetSelection) {
                            var lSelection = lGetSelection();
                            if (lSelection !== aContexteCourant.data.$selection) {
                                aContexteCourant.data.$selection = lSelection;
                                lActualiser = true;
                            }
                        }
                        if (lGetterDisabled) {
                            var lDisabled = !!lGetterDisabled();
                            if (lDisabled !== aContexteCourant.data.$disabled) {
                                aContexteCourant.data.$disabled = lDisabled;
                                lSetDisabled(lDisabled);
                                lActualiser = true;
                            }
                        }
                        if (lActualiser) {
                            _actualiser(lJBouton, aContexteCourant.data, lEtat);
                        }
                        if (lGetterTitle) {
                            var lTitle = lGetterTitle();
                            if (lTitle !== aContexteCourant.data.$oldTitle) {
                                lSetTitle(lTitle);
                            }
                        }
                    }, lBouton, aContexteCourant);
                }
            }
            aOutils.copyAttributs(aContexteCourant.node, lBouton, function(aName, aValue) {
                if (aName === 'title' && aValue && (!lInfosGetTitle || !lInfosGetTitle.estFonction)) {
                    lJBouton.attr(GObjetWAI.WaiAttribut[EGenreAttribut.label], aValue);
                    lLabelWAIManquant = false;
                }
            });
            if (!lBouton.style.width) {
                if (!lEstSVG && !lEstIconeStandard) {
                    lBouton.style.width = aContexteCourant.data.$width + 'px';
                }
            } else {
                aContexteCourant.data.$width = parseInt(lBouton.style.width, 10) || aContexteCourant.data.$width;
            }
            aContexteCourant.data.$disabled = lDisabled;
            _actualiser(lJBouton, aContexteCourant.data, lEtat);
            if (lDisabled) {
                lSetDisabled(lDisabled);
            }
            lJBouton.addClass('btnImage OmbreFocus').on('focusin mouseover', function() {
                lEtat.survol = true;
                _actualiser(lJBouton, aContexteCourant.data, lEtat);
            }).on('focusout mouseout', function() {
                lEtat.survol = false;
                _actualiser(lJBouton, aContexteCourant.data, lEtat);
            }).on('iedown', function() {
                lEtat.clique = true;
                _actualiser(lJBouton, aContexteCourant.data, lEtat);
                Invocateur.abonnerUnique(GNavigateur.getEventInvocateur('ieup'), function() {
                    lEtat.clique = false;
                    _actualiser(lJBouton, aContexteCourant.data, lEtat);
                });
            });
            var lRacine = lJBouton.get(0);
            aOutils.replaceNode(aContexteCourant.node, lRacine);
            if (lModele && aContexteCourant.data.$modeleParsed) {
                aOutils.surNodeEtNodeAfter(aContexteCourant);
            }
            aOutils.addCommentaireDebug(lRacine, 'ie-btnImage');
            if (lInnerHtml) {
                aOutils.injectHTML({
                    element: lRacine,
                    html: lInnerHtml,
                    controleur: aContexteCourant.controleur,
                    ignorerScroll: true,
                    contexte: aContexteCourant.contexte
                });
            }
            return {
                node: lRacine,
                avecCompileFils: false
            };
        });
        module.exports = IEHtml;
    },
    fn: "iehtml.btnimage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Espace/css/IEHtml.CheckboxRadio_Espace.css');
        require('Mobile/css/IEHtml.CheckboxRadio_Mobile.css');
        require('Espace/css/IESwitch.css');
        var IEHtml = require('IEHtml.js');

        function _creerCBEtRB(aContexteCourant, aType, aOutils) {
            var lInnerHTML = aContexteCourant.node.innerHTML,
                lAvecIEHtml = aOutils.hasAttribute(aContexteCourant.node, 'ie-html'),
                lAvecIETexte = aOutils.hasAttribute(aContexteCourant.node, 'ie-texte'),
                lAvecLibelle = lInnerHTML.length > 0 || lAvecIEHtml || lAvecIETexte,
                lJModele, lJInput, lRacine, llName, lContexteCourant, lNomModele = aOutils.getModel(aContexteCourant),
                lMap = aOutils.getMapDeNode(aContexteCourant.node),
                lEventMap, lEtatIndetermine = false,
                lSubstitution = true;
            var lEstGauche = !IE.estMobile;
            var lEstDroite = IE.estMobile;
            if (!lEstGauche && aOutils.hasAttribute(aContexteCourant.node, 'ie-textright')) {
                lEstGauche = true;
                lEstDroite = false;
            }
            if (!lEstDroite && aOutils.hasAttribute(aContexteCourant.node, 'ie-textleft')) {
                lEstGauche = false;
                lEstDroite = true;
            }
            aContexteCourant.data.estRadioBouton = aType === TypeCBRadio.radio;
            var lClassCss;
            var lClassSpan = '';
            var lSpanGauche = '';
            var lSpanDroite = '';
            if (aType === TypeCBRadio.switch) {
                if (!lAvecIEHtml && !lAvecIETexte && lInnerHTML && aContexteCourant.node.childNodes.length === 2 && aContexteCourant.node.childNodes[0].nodeName.toLowerCase() === 'span' && aContexteCourant.node.childNodes[1].nodeName.toLowerCase() === 'span') {
                    lSpanGauche = aContexteCourant.node.childNodes[0][IE.estMobile ? 'innerHTML' : 'outerHTML'];
                    lSpanDroite = aContexteCourant.node.childNodes[1].outerHTML;
                    lEstGauche = true;
                    lEstDroite = false;
                }
                lClassCss = 'ieswitch ' + (lEstDroite ? 'iecbrbdroite' : 'iecbrbgauche');
                lClassSpan = 'lever';
            } else {
                lClassCss = 'iecb ' + (lEstDroite ? 'iecbrbdroite' : 'iecbrbgauche');
            }
            if (aContexteCourant.node.nodeName.toLowerCase() === 'input') {
                lSubstitution = false;
                lJInput = $(aContexteCourant.node);
                lJInput.wrap('<label class="' + lClassCss + '">');
                lJInput.parent().append('<span' + (lClassSpan ? ' class="' + lClassSpan + '"' : '') + '></span>');
                if (!lInnerHTML && lAvecLibelle) {
                    lJInput.parent().append('<span></span>');
                }
                lJModele = lJInput.parent();
                if (!lMap.type) {
                    lJInput.attr('type', aType !== TypeCBRadio.radio ? 'checkbox' : 'radio');
                }
                lJInput.removeAttr('class').removeAttr('style');
            } else {
                lJModele = $((aType === TypeCBRadio.switch ? '<div class="switch">' : '') + '<label class="' + lClassCss + '">' + '<input type="' + (aType !== TypeCBRadio.radio ? 'checkbox' : 'radio') + '" />' + '<span' + (lClassSpan ? ' class="' + lClassSpan + '"' : '') + '></span>' + (!lInnerHTML && lAvecLibelle && !lSpanDroite ? '<span></span>' : '') + '</label>' + (aType === TypeCBRadio.switch ? '</div>' : ''));
                lJInput = lJModele.find('input');
            }
            lRacine = lJModele.get(0);
            lJModele.IEData(aContexteCourant.data);
            Object.assign(aContexteCourant.data, {
                $couleurActif: '',
                $couleurInactif: GCouleur.nonEditable.texte,
                $AvecMain: true
            });
            for (llName in lMap) {
                if (llName !== 'type') {
                    try {
                        if (llName === 'style' || llName === 'title' || aOutils.composantsAttributs[llName]) {
                            lJModele.attr(llName, lMap[llName]);
                            if (!lSubstitution && llName !== 'style') {
                                lJInput.removeAttr(llName);
                            }
                        } else if (llName === 'class') {
                            lJModele.addClass(lMap[llName]);
                        } else {
                            if (lSubstitution) {
                                lJInput.attr(llName, lMap[llName]);
                            }
                        }
                    } catch (e) {}
                }
            }
            if (aType === TypeCBRadio.radio && !lMap.name && lNomModele && aContexteCourant.data.$modeleParsed && aContexteCourant.controleur) {
                lJInput.attr('name', aContexteCourant.controleur.$GUID + '_' + aContexteCourant.data.$modeleParsed.nom);
            }
            if (aType === TypeCBRadio.checkbox) {
                lEtatIndetermine = $(aContexteCourant.node).cbIndeterminate();
                if (lNomModele && aContexteCourant.data.$modeleParsed) {
                    var lInfosGetIndeterminate = aOutils.getAccesParametresModel('getIndeterminate', aContexteCourant);
                    if (lInfosGetIndeterminate.estFonction) {
                        lEtatIndetermine = !!lInfosGetIndeterminate.callback();
                        aOutils.abonnerRefresh(function() {
                            var lEtat = !!lInfosGetIndeterminate.callback();
                            if (lEtat !== lEtatIndetermine) {
                                lEtatIndetermine = lEtat;
                                lJInput.prop('indeterminate', lEtatIndetermine);
                            }
                        }, lJInput, aContexteCourant);
                    }
                }
            }
            lEventMap = {};
            lEventMap.focus = function() {
                $(this).parent().triggerHandler('focusin');
            };
            lEventMap.blur = function() {
                $(this).parent().triggerHandler('focusout');
            };
            lJInput.on(lEventMap);
            if (aContexteCourant.data.$modeleValue) {
                lContexteCourant = Object.assign({}, aContexteCourant);
                lContexteCourant.node = lJInput.get(0);
                aOutils.gererInputCB(lContexteCourant, lMap.type);
            }
            if (lEtatIndetermine) {
                lJInput.prop('indeterminate', lEtatIndetermine);
            }
            if (lSubstitution) {
                aOutils.replaceNode(aContexteCourant.node, lRacine);
            }
            aOutils.addCommentaireDebug(lRacine, ('ie-' + aType));
            if (lAvecLibelle) {
                var lDest = lRacine;
                if (aType === TypeCBRadio.switch) {
                    lDest = lRacine.firstChild;
                }
                if (lSpanGauche) {
                    aOutils.injectHTML({
                        element: lDest,
                        insererAvantLeNode: lJModele.find('span.lever').get(0),
                        html: lSpanGauche,
                        controleur: aContexteCourant.controleur,
                        ignorerScroll: true,
                        contexte: aContexteCourant.contexte
                    });
                }
                if (lInnerHTML) {
                    aOutils.injectHTML({
                        element: lDest,
                        html: lSpanDroite || '<span>' + lInnerHTML + '</span>',
                        controleur: aContexteCourant.controleur,
                        ignorerScroll: true,
                        contexte: aContexteCourant.contexte
                    });
                }
                aContexteCourant.transfertContenu = lDest.lastChild;
            }
            aContexteCourant.node = lRacine;
            return {
                node: aContexteCourant.node,
                avecCompileFils: false
            };
        }
        var TypeCBRadio = {
            checkbox: 'checkbox',
            radio: 'radio',
            switch: 'switch'
        };
        IEHtml.addBalise('ie-checkbox', function(aContexteCourant, aOutils) {
            return _creerCBEtRB(aContexteCourant, TypeCBRadio.checkbox, aOutils);
        });
        IEHtml.addBalise('ie-radio', function(aContexteCourant, aOutils) {
            return _creerCBEtRB(aContexteCourant, TypeCBRadio.radio, aOutils);
        });
        IEHtml.addBalise('ie-switch', function(aContexteCourant, aOutils) {
            return _creerCBEtRB(aContexteCourant, TypeCBRadio.switch, aOutils);
        });
        module.exports = IEHtml;
    },
    fn: "iehtml.checkboxradio.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var IEHtml = require('IEHtml.js');
        var MethodesObjet = require('MethodesObjet.js');
        IEHtml.addAttribut('ie-identite', function(aContexteCourant, aNodeName, aAttributValue, aOutils) {
            var lNode = aContexteCourant.node;
            if (lNode.id) {
                return true;
            }
            var lValue = aAttributValue || '';
            if (!lValue || !aContexteCourant.controleur) {
                return true;
            }
            var lCallbackParams = aOutils.getAccesParametres(lValue, aContexteCourant);
            if (!lCallbackParams.estFonction) {
                return true;
            }
            var lValueCallback = lCallbackParams.callback([]);
            if (!lValueCallback || !lValueCallback.class || !lValueCallback.pere) {
                return true;
            }
            var lInfosInstance = aOutils.creerInstanceIdentite(lValueCallback.class, {
                pere: lValueCallback.pere, evenement: lValueCallback.evenement
            });
            lNode.id = lInfosInstance.instance.GetNom();
            $(lNode).on('destroyed', function() {
                if (MethodesObjet.isFunction(lValueCallback.destroy)) {
                    lValueCallback.destroy(lInfosInstance.instance);
                }
                lInfosInstance.callbackDestruction();
                lInfosInstance.instance.free();
                lInfosInstance.instance = null;
            });
            if (MethodesObjet.isFunction(lValueCallback.init)) {
                lValueCallback.init(lInfosInstance.instance);
            }
            aOutils.surInjectionHtml(aContexteCourant, function() {
                if (MethodesObjet.isFunction(lInfosInstance.instance.Initialiser)) {
                    lInfosInstance.instance.Initialiser();
                }
                if (MethodesObjet.isFunction(lValueCallback.start)) {
                    lValueCallback.start(lInfosInstance.instance);
                }
            });
            aOutils.addCommentaireDebug(aContexteCourant.node, 'ie-identite="' + lValue + '"');
            return true;
        });
        module.exports = IEHtml;
    },
    fn: "iehtml.identite.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJQuery.js');
        var GStyle = require('GStyle.js');
        $.fn.jIEDraggable = function(aOptions) {
            var lOptions, lRestore, lStart, lStop;
            if ($.fn.draggable) {
                lRestore = null;
                lStart = function() {
                    GStyle.setTransitions(this, 'opacity', '0.2s');
                    lRestore = null;
                    if (this && this.style) {
                        lRestore = {};
                        if (lOptions.axis !== "y" && $(this).css("right") !== "auto") {
                            lRestore.width = this.style.width;
                            lRestore.right = this.style.right;
                        }
                        if (lOptions.axis !== "x" && $(this).css("bottom") !== "auto") {
                            lRestore.height = this.style.height;
                            lRestore.bottom = this.style.bottom;
                        }
                    }
                };
                lStop = function() {
                    $(this).css('opacity', 1);
                    if (lRestore) {
                        try {
                            if (lRestore.width !== undefined) {
                                this.style.width = lRestore.width;
                            }
                            if (lRestore.right !== undefined) {
                                this.style.right = lRestore.right;
                            }
                            if (lRestore.height !== undefined) {
                                this.style.height = lRestore.height;
                            }
                            if (lRestore.bottom !== undefined) {
                                this.style.bottom = lRestore.bottom;
                            }
                        } catch (e) {}
                        lRestore = null;
                    }
                };
                lOptions = {
                    containment: 'document',
                    opacity: 0.5,
                    start: lStart,
                    stop: lStop
                };
                $.extend(lOptions, aOptions);
                if (lOptions.handle) {
                    $(lOptions.handle).addClass('IE_draggable');
                } else {
                    this.addClass('IE_draggable');
                }
                if (aOptions.start) {
                    lOptions.start = function() {
                        lStart.call(this);
                        aOptions.start.call(this);
                    };
                }
                if (aOptions.stop) {
                    lOptions.stop = function() {
                        lStop.call(this);
                        aOptions.stop.call(this);
                    };
                }
                return this.draggable(lOptions);
            };
            return this;
        };
        module.exports = {};
    },
    fn: "jiedraggable.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreAction = {
            Valider: 0,
            NePasValider: 1,
            Annuler: 2
        };
        module.exports = EGenreAction;
    },
    fn: "enumere_action.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EEvent = {
            SurError: 1,
            SurResize: 2,
            SurPreResize: 3,
            SurPostResize: 4,
            SurClick: 5,
            SurScroll: 6,
            SurKeyDown: 7,
            SurKeyUp: 8,
            SurKeyPress: 9,
            SurMouseMove: 10,
            SurMouseDown: 11,
            SurSelectStart: 12,
            SurMouseUp: 13,
            SurFinDeplacement: 14,
            SurBlur: 15,
            SurChange: 16,
            SurDblClick: 17,
            SurFocus: 18,
            SurFocusIn: 19,
            SurFocusOut: 20,
            SurLoad: 21,
            SurUnload: 22,
            SurMouseOut: 23,
            SurMouseOver: 24,
            SurFinResize: 25
        };
        module.exports = EEvent;
    },
    fn: "enumere_event.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EStructureAffichage = {
            Verticale: 1,
            Autre: 3
        };
        module.exports = EStructureAffichage;
    },
    fn: "enumere_structureaffichage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreDirection = {
            SensInverse: -1,
            DeuxSenses: 0,
            SensNormal: 1
        };
        module.exports = EGenreDirection;
    },
    fn: "enumere_direction.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreOrientationAffichage = {
            Vertical: 0,
            Horizontal: 1
        };
        module.exports = EGenreOrientationAffichage;
    },
    fn: "enumere_orientationaffichage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Divers.js');
        var IEHtml = require('IEHtml.js');
        var Callback = require('Callback.js');
        var GUID = require('GUID.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var GHtml = require('GHtml.js');
        var GStyle = require('GStyle.js');
        var EGenreDirection = require('Enumere_Direction.js');
        var EGenreOrientationAffichage = require('enumere_orientationaffichage.js');
        var ZoneFenetre = require('IEZoneFenetre.js');
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        var EGenreAttribut = require('ObjetWAI.js').EGenreAttribut;
        require('IEHtmlComposants.js');

        function Identite(ANom, AIdent, APere, AEvenement) {
            if (MethodesObjet.isObject(ANom)) {
                var lParametres = {
                    nomComplet: '',
                    nomObjet: null,
                    pere: null,
                    evenement: null
                };
                $.extend(lParametres, ANom);
                this.Pere = lParametres.pere;
                this.Evenement = lParametres.evenement;
                if (lParametres.nomObjet && lParametres.pere) {
                    this.Nom = lParametres.pere.Nom + '.' + lParametres.nomObjet;
                } else {
                    this.Nom = lParametres.nomComplet;
                }
            } else {
                this.Nom = this.ConstruireNom(ANom, AIdent);
                this.Pere = APere;
                this.Evenement = AEvenement;
            }
            this.callback = new Callback(this.Pere, this.Evenement);
            this._callbacksSurDestruction = [];
            if (this.Pere && this.Pere.ajouterInstanceADetruire) {
                this.Pere.ajouterInstanceADetruire(this);
            }
            this.options = {};
            this.Actif = true;
            this.Visible = true;
            this.TableauGauche = [];
            this.TableauDroite = [];
            this.TableauHaut = [];
            this.TableauBas = [];
            this.focusable = true;
            this.IdPremierElement = '';
            this.idMessageActionRequise = GUID.getId();
            this.tabIndex = 0;
            this.pileEvenementGlobaux = [];
            this.instancesADetruire = [];
            this.avecMarge = true;
            this.controleur = this.creerControleur();
            if (this.controleur) {
                this.controleur.instance = this;
                var lSelf = this;
                var lRefresh = this.controleur.$refresh;
                this.controleur.$refresh = function() {
                    return lRefresh.call(this, lSelf.hashGUIDsControleur());
                };
            }
        }
        Identite.prototype.setOptions = function(aOptions) {
            Object.assign(this.options, aOptions);
            return this;
        };
        Identite.prototype.SetParametres = function() {};
        Identite.prototype.setAvecTabulation = function(AAvecTabIndex) {
            this.tabIndex = (AAvecTabIndex === null || AAvecTabIndex === undefined || AAvecTabIndex) ? 0 : -1;
        };
        Identite.prototype.SetDonnees = function() {};
        Identite.prototype.setTraductions = function(aTraductions) {
            this.traductions = aTraductions;
        };
        Identite.prototype.RecupererDonnees = function() {};
        Identite.prototype.ConstruireAffichage = function() {
            return '&nbsp;';
        };
        Identite.prototype.SetGenre = function(AGenre) {
            this.Genre = AGenre;
        };
        Identite.prototype.SetActif = function(AActif) {
            this.Actif = AActif;
        };
        Identite.prototype.getActif = function() {
            return this.Actif;
        };
        Identite.prototype.SetVisible = function(AVisible) {
            GStyle.setDisplay(this.Nom, this.Visible = AVisible);
        };
        Identite.prototype.EstUneInteractionUtilisateur = function() {
            return this.InteractionUtilisateur !== false;
        };
        Identite.prototype.SetEtatSaisie = function(aEtatSaisie) {
            if (this.Pere && this.Pere.SetEtatSaisie) {
                this.Pere.SetEtatSaisie(aEtatSaisie);
            } else {
                Invocateur.evenement(ObjetInvocateur.events.etatSaisie, aEtatSaisie);
            }
        };
        Identite.prototype.SetControleNavigation = function(AControleNavigation) {
            this.ControleNavigation = AControleNavigation;
        };
        Identite.prototype.getEtatSaisie = function() {
            if (this.Pere) {
                return this.Pere.getEtatSaisie();
            }
        };
        Identite.prototype.getAvecMarge = function() {
            return this.avecMarge;
        };
        Identite.prototype.$refresh = function() {
            return this.controleur.$refresh();
        };
        Identite.prototype.$refreshSelf = function() {
            return this.controleur.$refreshSelf();
        };

        function _getControleurHeritage(aProto) {
            var lProtoPere = aProto.__pere__,
                lControleur = null,
                lControleurPere = null;
            if (aProto.hasOwnProperty('getControleur')) {
                lControleur = aProto.getControleur.call(this, this);
            }
            if (lProtoPere) {
                lControleurPere = _getControleurHeritage.call(this, lProtoPere);
                lControleur = lControleur ? $.extend(true, lControleurPere, lControleur) : lControleurPere;
            }
            return lControleur;
        }
        Identite.prototype.creerControleur = function() {
            return IEHtml.initControleur(_getControleurHeritage.call(this, this.constructor.prototype) || {});
        };

        function _hashFilsGUIDsControleur(aGUIDs) {
            if (this.instancesADetruire) {
                var lInstance, i;
                for (i in this.instancesADetruire) {
                    lInstance = this.instancesADetruire[i];
                    if (lInstance) {
                        if (lInstance.controleur) {
                            aGUIDs[lInstance.controleur.$GUID] = true;
                        }
                        _hashFilsGUIDsControleur.bind(lInstance)(aGUIDs);
                    }
                }
            }
        }
        Identite.prototype.hashGUIDsControleur = function(aGUIDs) {
            aGUIDs = aGUIDs || {};
            if (this.controleur) {
                aGUIDs[this.controleur.$GUID] = true;
            }
            if (this.Pere && this.Pere.hashGUIDsControleur) {
                this.Pere.hashGUIDsControleur(aGUIDs);
            }
            _hashFilsGUIDsControleur.bind(this)(aGUIDs);
            return aGUIDs;
        };
        Identite.prototype.avecEventResizeNavigateur = function() {
            return this.Pere && this.Pere.avecEventResizeNavigateur ? this.Pere.avecEventResizeNavigateur() : true;
        };
        Identite.prototype.setEvenement = function(aEvenement) {
            this.callback = new Callback(this.Pere, aEvenement);
            this.Evenement = aEvenement;
        };
        Identite.prototype.ConstruireNom = function(ANom, AIdent) {
            return (AIdent === null || AIdent === undefined ? ANom : ANom + '[' + AIdent + ']');
        };
        Identite.prototype.GetNom = function() {
            return this.Nom;
        };
        Identite.prototype.effacer = function(aMessage) {
            if (aMessage === null || aMessage === undefined) {
                aMessage = '&nbsp;';
            }
            GHtml.setHtml(this.Nom, aMessage);
        };
        Identite.prototype.Afficher = function(H) {
            if (H === null || H === undefined) {
                H = this.ConstruireAffichage();
            }
            if (H) {
                GHtml.setHtml(this.Nom, H, {
                    instance: this
                });
            }
        };
        Identite.prototype.activerFocusable = function() {
            this.focusable = true;
            $('#' + this.Nom.escapeJQ()).attr('tabIndex', '0').off('focus').on('focus', this.FocusSurPremierElement.bind(this));
        };
        Identite.prototype.desactiverFocusable = function() {
            this.focusable = false;
            $('#' + this.Nom.escapeJQ()).attr('tabIndex', '').off('focus');
        };
        Identite.prototype.Initialiser = function() {
            var H = this.ConstruireAffichage();
            if (H) {
                GHtml.setHtml(this.Nom, H, {
                    instance: this
                });
            }
            this.RecupererDonnees();
        };
        Identite.prototype.composeMessage = function(aMessage) {
            var H = [];
            H.push('<table style="width: 100%; height: 100px;"  border="0" cellpadding="0" cellspacing="0"', GObjetWAI ? GObjetWAI.composeAttribut({
                genre: EGenreAttribut.labelledby,
                valeur: this.idMessageActionRequise
            }) + ' ' : '', GObjetWAI ? GObjetWAI.composeRole(EGenreRole.Note) : '', 'tabIndex="0">', '<tr>', '<td class="Texte10 Gras AlignementMilieu" id="', this.idMessageActionRequise, '"  >', aMessage, '</td>', '</tr>', '</table>');
            return H.join('');
        };
        Identite.prototype.NavigationClavier = function(AId) {
            if (GNavigateur.IsToucheFleche()) {
                this.FocusSuivant(AId, (GNavigateur.IsToucheFlecheGauche() || GNavigateur.IsToucheFlecheDroite()) ? (EGenreOrientationAffichage.Horizontal) : (EGenreOrientationAffichage.Vertical), (GNavigateur.IsToucheFlecheGauche() || GNavigateur.IsToucheFlecheHaut()) ? EGenreDirection.SensInverse : EGenreDirection.SensNormal);
            }
            if (GNavigateur.IsToucheSelection()) {
                this._evenementSelectionElmNavigation(AId);
            }
        };
        Identite.prototype._evenementSelectionElmNavigation = function() {};
        Identite.prototype.FocusSuivant = function(AId, AOrientation, ADirection) {
            var LIdSuivant = this.getIdNavigationSuivant(AId, AOrientation, ADirection);
            if (LIdSuivant) {
                GHtml.setFocus(LIdSuivant);
            }
        };
        Identite.prototype.getIdNavigationSuivant = function(aId, aOrientation, aDirection) {
            return (aOrientation === EGenreOrientationAffichage.Horizontal) ? ((aDirection === EGenreDirection.SensNormal) ? this.TableauDroite[aId] : this.TableauGauche[aId]) : ((aDirection === EGenreDirection.SensNormal) ? this.TableauBas[aId] : this.TableauHaut[aId]);
        };
        Identite.prototype.AjouterAuTableaux = function(APremierId, ADeuxiemeId, AHorizontal, AVertical) {
            switch (AHorizontal) {
                case EGenreDirection.DeuxSenses:
                    this.TableauDroite[APremierId] = ADeuxiemeId;
                    this.TableauGauche[ADeuxiemeId] = APremierId;
                    break;
                case EGenreDirection.SensNormal:
                    this.TableauDroite[APremierId] = ADeuxiemeId;
                    break;
                case EGenreDirection.SensInverse:
                    this.TableauGauche[ADeuxiemeId] = APremierId;
                    break;
            }
            switch (AVertical) {
                case EGenreDirection.DeuxSenses:
                    this.TableauBas[APremierId] = ADeuxiemeId;
                    this.TableauHaut[ADeuxiemeId] = APremierId;
                    break;
                case EGenreDirection.SensNormal:
                    this.TableauBas[APremierId] = ADeuxiemeId;
                    break;
                case EGenreDirection.SensInverse:
                    this.TableauHaut[ADeuxiemeId] = APremierId;
                    break;
            }
        };
        Identite.prototype.ResetTableauxNavigation = function() {
            this.TableauGauche = [];
            this.TableauDroite = [];
            this.TableauHaut = [];
            this.TableauBas = [];
        };
        Identite.prototype.ComposeElementNavigation = function(aID, aContenu, aRole, aOnKeyUp, aOnClick, aOnFocus, aOnBlur, aStyle, aWaiHidden, aWaiLabelId, aWaiLabel) {
            var lRole = aRole ? GObjetWAI.composeRole(aRole) : '';
            var lOnClick = '';
            if (aOnClick) {
                if (typeof aOnClick === 'string') {
                    lOnClick = 'onclick="' + aOnClick + '"';
                } else if (aOnClick.length === 2) {
                    lOnClick = aOnClick[0] + '="' + aOnClick[1] + '"';
                }
            }
            var lOnKeyUp = aOnKeyUp || this.Nom + '.NavigationClavier (id); if (GNavigateur.IsToucheFleche () || GNavigateur.IsToucheSelection ()) GNavigateur.StopperEvenement (event);';
            var lOnFocus = aOnFocus || this.Nom + '.ActiverBordureNavigation (id, true);';
            var lOnBlur = aOnBlur || this.Nom + '.ActiverBordureNavigation (id, false);';
            var lClass = aWaiHidden ? 'wai_hidden' : 'BordureNavigationInactive';
            var lStyle = aStyle ? ' style="' + aStyle + '"' : '';
            var lWaiLabelId = aWaiLabelId ? ' ' + GObjetWAI.composeAttribut({
                genre: EGenreAttribut.describedby,
                valeur: aWaiLabelId
            }) : '';
            var lWaiLabel = aWaiLabel ? ' ' + GObjetWAI.composeAttribut({
                genre: EGenreAttribut.label,
                valeur: aWaiLabel
            }) : '';
            var lHTML = [];
            lHTML.push('<div id="', aID, '" ', lRole, lStyle, ' onkeyup="', lOnKeyUp, '" tabIndex="-1" class="', lClass, '" onblur="', lOnBlur, '" onfocus="', lOnFocus, '" ', lOnClick, ' ', lWaiLabelId, ' ', lWaiLabel, '>', aContenu, '</div>');
            return lHTML.join('');
        };
        Identite.prototype.ActiverBordureNavigation = function(aID, aBool) {
            var lClass = aBool ? 'BordureNavigationActive' : 'BordureNavigationInactive';
            GHtml.setClass(aID, lClass);
        };
        Identite.prototype.SetTabId = function(ATabId) {
            this.TabId = ATabId;
        };
        Identite.prototype.GetIdSuivant = function(AId) {
            var LNbElt = this.TabId.length,
                I = 0;
            if (LNbElt > 0) {
                for (I = 0; I < LNbElt; I++) {
                    if (AId === this.TabId[I]) {
                        if (I < LNbElt - 1) {
                            return this.TabId[I + 1];
                        }
                        return this.TabId[0];
                    }
                }
                return this.TabId[LNbElt - 1];
            }
        };
        Identite.prototype.GetId = function(APositionId) {
            if (APositionId < this.TabId.length) {
                return this.TabId[APositionId];
            }
        };
        Identite.prototype.FocusSurSuivant = function(AIdElement, AAvecTestRetourChariot) {
            var LAvecTestRetourChariot = AAvecTestRetourChariot || true;
            if ((LAvecTestRetourChariot && GNavigateur.IsToucheRetourChariot()) || GNavigateur.IsToucheTab()) {
                GHtml.setFocus(this.GetIdSuivant(AIdElement));
            }
        };
        Identite.prototype.FocusSurPremierElement = function() {
            GHtml.setFocus(this.IdPremierElement);
        };
        Identite.prototype.SetPremierElement = function(AElement) {
            this.IdPremierElement = AElement;
        };
        Identite.prototype.getPremierElement = function() {
            return this.IdPremierElement;
        };
        Identite.prototype.GetPremierElement = function() {
            return this.IdPremierElement;
        };
        Identite.prototype.ajouterInstanceADetruire = function(aInstance) {
            if (aInstance && aInstance.Nom) {
                this.instancesADetruire[aInstance.Nom] = aInstance;
            }
        };
        Identite.prototype.enleverInstanceADetruire = function(aInstance) {
            if (aInstance && aInstance.Nom) {
                this.instancesADetruire[aInstance.Nom] = null;
            }
        };
        Identite.prototype.ajouterEvenementGlobal = function(aEvenement, aMethode) {
            if (!GNavigateur.AddEvent) {
                return;
            }
            if (!aMethode) {
                return;
            }
            GNavigateur.AddEvent(aEvenement, this, aMethode);
            this.pileEvenementGlobaux.push({
                evenement: aEvenement,
                methode: aMethode
            });
            return this.pileEvenementGlobaux.length - 1;
        };
        Identite.prototype.viderEvenementGlobaux = function() {
            var i = 0;
            for (i = 0; i < this.pileEvenementGlobaux.length; i++) {
                GNavigateur.DelEvent(this.pileEvenementGlobaux[i].evenement, this);
            }
            this.pileEvenementGlobaux = [];
        };

        function _viderEvenements() {
            Invocateur.desabonner(this);
            this.viderEvenementGlobaux();
        }
        Identite.prototype.free = function() {
            if (this.isDestroyed()) {
                return;
            }
            this.__enCoursDeDestruction = true;
            try {
                _viderEvenements.bind(this)();
                this.DetruireInstancesFils();
                if (this.DetruireInstances) {
                    this.DetruireInstances();
                }
                if (this.__estFenetreVolante) {
                    if (GHtml.elementExiste(this.Nom)) {
                        ZoneFenetre.enleverFenetre(this.Nom);
                    }
                } else if (!this.Pere || !this.Pere.__enCoursDeDestruction) {
                    GHtml.setHtml(this.Nom, '', true);
                }
                if (this.Pere && this.Pere.enleverInstanceADetruire) {
                    this.Pere.enleverInstanceADetruire(this);
                }
                if (this._callbacksSurDestruction.length > 0) {
                    MethodesTableau.parcourir(this._callbacksSurDestruction, function(aCallback) {
                        aCallback();
                    });
                }
            } catch (e) {} finally {
                delete this.__enCoursDeDestruction;
                this._estDetruite = true;
            }
        };
        Identite.prototype.DetruireInstancesFils = function() {
            var lNom, lInstance;
            for (lNom in this.instancesADetruire) {
                if (this.instancesADetruire.hasOwnProperty(lNom)) {
                    lInstance = this.instancesADetruire[lNom];
                    if (lInstance && !lInstance._estDetruite && lInstance.free) {
                        lInstance.free();
                    }
                    this.instancesADetruire[lNom] = null;
                }
            }
        };
        Identite.prototype.ajouterCallbackSurDestruction = function(aCallback) {
            this._callbacksSurDestruction.push(aCallback);
            return this;
        };
        Identite.prototype.isDestroyed = function() {
            return this._estDetruite || this.__enCoursDeDestruction;
        };
        var lGenerateurGUID = new GUID.generateur();
        Identite.creerInstance = function(aConstructeur, aParametres) {
            if (!aConstructeur) {
                return null;
            }
            var lNom = lGenerateurGUID.get(),
                lNomComplet = 'IE.Identite.collection.' + lNom;
            $.extend(aParametres, {
                nomComplet: lNomComplet
            });
            var lInstance = new aConstructeur(aParametres);
            if (aParametres.options) {
                lInstance.setOptions(aParametres.options);
            }
            lInstance.ajouterCallbackSurDestruction(function() {
                if (IE.Identite.collection[lNom]) {
                    delete IE.Identite.collection[lNom];
                }
            });
            IE.Identite.collection[lNom] = lInstance;
            return lInstance;
        };
        module.exports = Identite;
    },
    fn: "objetidentite.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('script/css/ObjetInterface.css');
        var GLog = require('IELog.js');
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('GHtml.js');
        var GStyle = require('GStyle.js');
        var EEvent = require('Enumere_Event.js');
        var EStructureAffichage = require('Enumere_StructureAffichage.js');
        var ZoneFenetre = require('IEZoneFenetre.js');
        var Identite = require('ObjetIdentite.js');
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        MethodesObjet.heritagePrototype(ObjetAbstraitInterface, Identite);

        function ObjetAbstraitInterface() {
            this.inheritedCreate(arguments);
            this.EtatIdCourant = true;
            this.reset();
            this.NomObjetGraphique = [];
            this.AvecCadre = true;
            this.GenreStructure = EStructureAffichage.Verticale;
            this.IdentZoneAlClient = -1;
            this.AddSurZone = [];
            this.avecScrollV = false;
            this.avecIEScrollV = false;
            this.idScrollV = this.Nom + '_scrollV';
            this.idPremierObjet = '';
            if (this.Nom && this.avecEventResizeNavigateur()) {
                this.ajouterEvenementGlobal(EEvent.SurResize, this._surResizeInterface);
            }
        }
        ObjetAbstraitInterface.prototype.reset = function() {
            this.DetruireInstancesFils();
            this.Instances = [];
            this.GenreAffichage = [];
            this.PositionAffichage = [];
            this.NombreGenreAffichage = 0;
            this._pileInfosFenetres = [];
        };
        ObjetAbstraitInterface.prototype.FocusSurPremierElement = function() {};
        ObjetAbstraitInterface.prototype.focusSurPremierObjet = function() {
            if (this.idPremierObjet) {
                GHtml.setFocus(this.idPremierObjet);
            } else {
                GLog.addLog('[' + MethodesObjet.getNomClassDeConstructeur(this.constructor) + '] Il est où mon premierobjet ?', '', GLog.genre.Avertissement);
            }
        };
        ObjetAbstraitInterface.prototype.addInstance = function(aParametres) {
            var lParametres = {
                objet: null,
                constructionDecalee: false,
                evenement: null,
                init: null,
                ident: null,
                traductions: null
            };
            $.extend(lParametres, aParametres);
            var lObjetGraphique = GApplication.getObjetGraphique(lParametres.objet);
            if (!GApplication.existeObjetGraphique(lParametres.objet)) {
                GLog.addLog('ObjetAbstraitInterface.prototype.addInstance : "' + (lObjetGraphique ? lObjetGraphique.nom : lParametres.objet) + '" n"existe pas!', null, GLog.genre.Avertissement);
                return null;
            }
            if ((lParametres.ident !== null && lParametres.ident !== undefined)) {
                this.NombreGenreAffichage = lParametres.ident;
            }
            this.GenreAffichage[this.NombreGenreAffichage] = lParametres.objet;
            if (!this.PositionAffichage[lParametres.objet]) {
                this.PositionAffichage[lParametres.objet] = [];
            }
            this.PositionAffichage[lParametres.objet].push(this.NombreGenreAffichage);
            if (lObjetGraphique) {
                if (lParametres.constructionDecalee) {
                    if (lObjetGraphique.estFenetre) {
                        this._pileInfosFenetres[this.NombreGenreAffichage] = ({
                            ident: this.NombreGenreAffichage,
                            genre: lParametres.objet,
                            evenement: lParametres.evenement,
                            init: lParametres.init,
                            traductions: lParametres.traductions,
                            coordonnees: {
                                left: 0,
                                top: 0
                            }
                        });
                    } else {}
                } else {
                    var lInstance = _construireObjetGraphique.bind(this)(lObjetGraphique.constructeur, lObjetGraphique.nom, this.NombreGenreAffichage, lParametres.evenement);
                    this.Instances[this.NombreGenreAffichage] = lInstance;
                    if (lParametres.traductions) {
                        lInstance.setTraductions(lParametres.traductions);
                    }
                    if (lParametres.init) {
                        lParametres.init.call(this, lInstance);
                    }
                }
            }
            return this.NombreGenreAffichage++;
        };
        ObjetAbstraitInterface.prototype.Add = function(AGenreAffichage, AEvenement, AInitialiser, aTraductions, I) {
            return this.addInstance({
                objet: AGenreAffichage,
                evenement: AEvenement,
                init: AInitialiser,
                traductions: aTraductions,
                ident: I
            });
        };
        ObjetAbstraitInterface.prototype.addFenetre = function(AGenreAffichage, AEvenement, AInitialiser, aTraductions, I) {
            return this.addInstance({
                objet: AGenreAffichage,
                constructionDecalee: true,
                evenement: AEvenement,
                init: AInitialiser,
                traductions: aTraductions,
                ident: I
            });
        };
        ObjetAbstraitInterface.prototype.Del = function() {
            this.Instances[this.NombreGenreAffichage] = null;
            this.NombreGenreAffichage--;
        };
        ObjetAbstraitInterface.prototype.GetInstance = function(AIdent) {
            var lInstance = this.Instances[AIdent];
            if (!this.Instances[AIdent] && GApplication.getObjetGraphique(this.GenreAffichage[AIdent]) && GApplication.getObjetGraphique(this.GenreAffichage[AIdent]).estFenetre && this._pileInfosFenetres[AIdent] && !this.__enCoursDeDestruction) {
                lInstance = this.creerFenetre(AIdent);
            }
            return lInstance;
        };
        ObjetAbstraitInterface.prototype.existeInstance = function(aIdent) {
            return !!this.Instances[aIdent];
        };

        function _construireObjetGraphique(aConstructeur, aNom, aIdent, aEvenement) {
            GLog.addLog('Interface Construire ' + aNom + ' (' + aIdent + ')', 'OBJETINTERFACE_LOGNOM');
            if (aConstructeur) {
                return new aConstructeur({
                    nomObjet: 'Instances[' + aIdent + ']',
                    pere: this,
                    evenement: aEvenement
                });
            };
            return null;
        }
        ObjetAbstraitInterface.prototype.creerFenetre = function(AIdent) {
            var lInstance;
            if (this._pileInfosFenetres[AIdent]) {
                var lInfosFenetre = this._pileInfosFenetres[AIdent];
                var lObjetGraphique = GApplication.getObjetGraphique(lInfosFenetre.genre);
                lInstance = _construireObjetGraphique.bind(this)(lObjetGraphique.constructeur, lObjetGraphique.nom, AIdent, lInfosFenetre.evenement);
                lInstance.destructionSurFermeture = true;
                var lSelf = this;
                lInstance.ajouterCallbackSurDestruction(function() {
                    if (AIdent !== undefined && lSelf.Instances[AIdent] && lSelf._pileInfosFenetres[AIdent]) {
                        lSelf.Instances[AIdent] = null;
                        var lIndice = lSelf._pileFenetre.indexOf(lSelf.GetZoneId(AIdent));
                        if (lIndice >= 0) {
                            lSelf._pileFenetre[lIndice] = null;
                        }
                    }
                });
                if (lInfosFenetre.traductions) {
                    lInstance.setTraductions(lInfosFenetre.traductions);
                }
                if (!this._pileFenetre) {
                    this._pileFenetre = [];
                }
                this._pileFenetre.push(this.GetZoneId(AIdent));
                ZoneFenetre.ajouterFenetre(this.GetZoneId(AIdent), lInstance.getZIndex ? lInstance.getZIndex() : '');
                if (lInfosFenetre.init) {
                    lInfosFenetre.init.call(this, lInstance);
                }
                lInstance.coordonnees = lInfosFenetre.coordonnees;
                lInstance.Initialiser();
                this.Instances[AIdent] = lInstance;
            }
            return lInstance;
        };
        ObjetAbstraitInterface.prototype.GetNomInstance = function(AIdent) {
            return this.GetInstance(AIdent) ? this.GetInstance(AIdent).Nom : '';
        };
        ObjetAbstraitInterface.prototype.getInstanceParNom = function(aNom) {
            var I;
            for (I = 0; I < this.NombreGenreAffichage; I++) {
                if (this.GetNomInstance(I) === aNom) {
                    return this.GetInstance(I);
                }
            }
        };
        ObjetAbstraitInterface.prototype.GetZoneId = function(AIdent) {
            return this.ConstruireNom(this.Nom + '.Instances', AIdent);
        };

        function _construireStructureAffichage() {
            var lHtml = [];
            lHtml.push(this.ConstruireStructureFenetres());
            lHtml.push(this.ConstruireStructureAffichage());
            return lHtml.join('');
        }
        ObjetAbstraitInterface.prototype.Initialiser = function(aReset) {
            if (aReset) {
                this.reset();
            }
            this.EnConstruction = true;
            try {
                this.ConstruireInstances();
                this.SetParametresGeneraux();
                GHtml.setHtml(this.Pere === null || this.Pere === undefined ? GApplication.getIdConteneur() : this.Nom, _construireStructureAffichage.bind(this)(), {
                    instance: this
                });
                this.ConstruireAffichage();
            } finally {
                this.EnConstruction = false;
            }
            this.RecupererDonnees();
            this.surResizeInterface();
            if (this.avecScrollV && !GNavigateur.isTactile) {
                this.construireScrollPane();
            }
            return this;
        };
        ObjetAbstraitInterface.prototype.AppartientAZone = function(AIdent) {
            var I, lElement;
            for (I = 0; I < this.AddSurZone.length; I++) {
                lElement = this.AddSurZone[I];
                if ((lElement === AIdent && lElement !== '') || (lElement && lElement.ident === AIdent)) {
                    return true;
                }
            }
            return false;
        };
        ObjetAbstraitInterface.prototype.ConstruireStructureAffichageVerticale = function() {
            var H = [],
                I, lInfo;
            var LStyle = this.couleurFond ? GStyle.composeCouleurFond(this.couleurFond) : '';
            H.push('<div style="', LStyle, '" class="interface_affV', (this.AvecCadre ? ' interface_affV_padding' : ''), '" ', GObjetWAI.composeRole(EGenreRole.Presentation), '>');
            var lTabAffichages = [];
            for (I = 0; I < this.NombreGenreAffichage; I++) {
                if (!this.AppartientAZone(I) && !GApplication.getObjetGraphique(this.GenreAffichage[I]).estFenetre) {
                    lInfo = {
                        estZoneClient: this.IdentZoneAlClient === I,
                        indice: I
                    };
                    lTabAffichages.push(lInfo);
                }
            }
            for (I = 0; I < lTabAffichages.length; I++) {
                lInfo = lTabAffichages[I];
                H.push('<div id="' + this.GetZoneId(lInfo.indice) + '"', (lInfo.estZoneClient ? ' class="interface_affV_client"' : ''), '></div>');
            }
            if (this.NombreGenreAffichage === 0) {
                H.push('<div>' + this.composeMessage('') + '</div>');
            }
            H.push('</div>');
            return H.join('');
        };
        ObjetAbstraitInterface.prototype.ConstruireStructureAffichageAutre = function() {};
        ObjetAbstraitInterface.prototype.ConstruireStructureFenetres = function() {
            _effacerFenetres.bind(this)();
            var H = [],
                I;
            for (I = 0; I < this.NombreGenreAffichage; I++) {
                if (GApplication.getObjetGraphique(this.GenreAffichage[I]).estFenetre && this.Instances[I]) {
                    if (!this._pileFenetre) {
                        this._pileFenetre = [];
                    }
                    this._pileFenetre.push(this.GetZoneId(I));
                    ZoneFenetre.ajouterFenetre(this.GetZoneId(I), this.Instances[I] && this.Instances[I].getZIndex ? this.Instances[I].getZIndex() : '');
                }
            }
            return H.join('');
        };
        ObjetAbstraitInterface.prototype.ConstruireInstances = function() {};
        ObjetAbstraitInterface.prototype.SetParametresGeneraux = function() {};
        ObjetAbstraitInterface.prototype.getControleur = function(aInstance) {
            return {
                apiScrollV: function(aApi) {
                    aApi.reserverPlaceScrollFixe = true;
                    aApi.heightContenuMinZone = true;
                    aInstance.apiScrollV = aApi;
                }
            };
        };
        ObjetAbstraitInterface.prototype.ConstruireStructureAffichage = function() {
            var lHtml = [];
            if (!GNavigateur.isTactile) {
                if (this.avecIEScrollV) {
                    lHtml.push('<div ie-scrollv="apiScrollV" ie-scrollReservationFixe style="height:100%;"><div>');
                    if (this.avecScrollV) {
                        this.avecScrollV = false;
                    }
                } else if (this.avecScrollV) {
                    lHtml.push('<div id="', this.idScrollV, '"style="position:relative; height:100%; overflow-x:hidden; overflow-y:auto;">');
                }
                if ((this.avecScrollV || this.avecIEScrollV) && this.avecEventResizeNavigateur()) {
                    this.ajouterEvenementGlobal(EEvent.SurFinResize, _surFinResize);
                    this.ajouterEvenementGlobal(EEvent.SurPreResize, _surPreResize);
                }
            }
            switch (this.GenreStructure) {
                case EStructureAffichage.Verticale:
                    lHtml.push(this.ConstruireStructureAffichageVerticale());
                    break;
                default:
                    lHtml.push(this.ConstruireStructureAffichageAutre());
                    break;
            }
            if ((this.AddSurZone.length || this.avecBandeau) && this.ConstruireStructureAffichageBandeau) {
                this.ConstruireStructureAffichageBandeau();
            }
            if (!GNavigateur.isTactile) {
                if (this.avecIEScrollV && !GNavigateur.isTactile) {
                    lHtml.push('</div></div>');
                } else if (this.avecScrollV && !GNavigateur.isTactile) {
                    lHtml.push('</div>');
                }
            }
            return lHtml.join('');
        };
        ObjetAbstraitInterface.prototype.ConstruireAffichage = function() {
            var I;
            for (I = 0; I < this.NombreGenreAffichage; I++) {
                if (this.Instances[I]) {
                    if (!GApplication.getObjetGraphique(this.GenreAffichage[I]).estFenetre) {
                        this.Instances[I].SetVisible(this.Instances[I].Visible);
                    }
                    this.Instances[I].Initialiser();
                }
            }
        };
        ObjetAbstraitInterface.prototype.RecupererDonnees = function() {};
        ObjetAbstraitInterface.prototype.ConstruireObjetGraphique = function(ANomObjet, AIdent, AEvenement) {
            var lObjetGraphique = GApplication.getObjetGraphique(ANomObjet);
            return lObjetGraphique ? _construireObjetGraphique.bind(this)(lObjetGraphique.constructeur, lObjetGraphique.nom, AIdent, AEvenement) : null;
        };
        ObjetAbstraitInterface.prototype.getSaisiePageEnCours = function() {
            return null;
        };
        ObjetAbstraitInterface.prototype.ActionSurValidation = function() {
            if (this._callbackNavigation) {
                this._callbackNavigation();
                delete this._callbackNavigation;
            } else if (this.AfficherPage) {
                this.AfficherPage.apply(this, arguments);
            } else {
                this.RecupererDonnees.apply(this, arguments);
            }
        };
        ObjetAbstraitInterface.prototype.SetIdCourant = function(AId) {
            if (this.EtatIdCourant && window.GEtatUtilisateur) {
                window.GEtatUtilisateur.IdCourant = AId;
            }
        };
        ObjetAbstraitInterface.prototype.GetIdCourant = function() {
            return window.GEtatUtilisateur ? window.GEtatUtilisateur.IdCourant : null;
        };
        ObjetAbstraitInterface.prototype.SetFocusIdCourant = function() {
            GHtml.setFocus(this.GetIdCourant());
        };
        ObjetAbstraitInterface.prototype.SetEtatIdCourant = function(ABool) {
            this.EtatIdCourant = ((ABool !== null && ABool !== undefined)) ? ABool : true;
        };
        ObjetAbstraitInterface.prototype._surResizeInterface = function() {
            if (GNavigateur.bloquerResize) {
                return;
            }
            this.surResizeInterface();
        };
        ObjetAbstraitInterface.prototype.construireScrollPane = function() {
            $('#' + this.idScrollV.escapeJQ()).ieScrollPane();
        };
        ObjetAbstraitInterface.prototype.surResizeInterface = function() {
            if (this.apiScrollV) {
                this.apiScrollV.surResize();
            }
            if (this.avecScrollV && !GNavigateur.isTactile) {
                var lReconstruireScroll = false;
                var lJScroll = $('#' + this.idScrollV.escapeJQ());
                var lData = lJScroll.data('jsp');
                if (lData) {
                    lData.destroy();
                    lReconstruireScroll = true;
                }
                lJScroll.css('height', 0).css('height', $('#' + this.Nom.escapeJQ()).innerHeight() + 'px');
                if (lReconstruireScroll) {
                    this.construireScrollPane();
                }
            }
        };

        function _surPreResize() {
            if (this.apiScrollV && this.apiScrollV.zone) {
                this.apiScrollV.surPreResize();
            }
            if (this.avecScrollV && !GNavigateur.isTactile) {
                var lData = $('#' + this.idScrollV.escapeJQ()).data('jsp');
                if (lData) {
                    lData.destroy();
                }
                $('#' + this.idScrollV.escapeJQ()).css('overflow-y', 'hidden');
            }
        }

        function _surFinResize() {
            if (this.apiScrollV && this.apiScrollV.zone) {
                this.apiScrollV.surPostResize();
            }
            if (this.avecScrollV && !GNavigateur.isTactile) {
                this.construireScrollPane();
                $('#' + this.idScrollV.escapeJQ()).css('overflow-y', 'auto');
            }
        }

        function _effacerFenetres() {
            if (this._pileFenetre) {
                this._pileFenetre = [];
            }
        }
        ObjetAbstraitInterface.prototype.DetruireInstancesFils = function() {
            _effacerFenetres.bind(this)();
            this.inherited('DetruireInstancesFils');
            var N = this.Instances ? this.Instances.length : 0,
                I, lInstance;
            for (I = 0; I < N; I++) {
                lInstance = this.Instances[I];
                if (lInstance && (!lInstance.isDestroyed || !lInstance.isDestroyed()) && lInstance.free) {
                    GLog.addLog('DetruireInstancesFils instance non detruite : ' + lInstance.Nom);
                    lInstance.free();
                }
                this.Instances[I] = null;
            }
        };
        module.exports = ObjetAbstraitInterface;
    },
    fn: "objetinterface.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('GHtml.js');
        require('iehtml.bouton.js');
        var ObjetAbstraitInterface = require('ObjetInterface.js');
        var GTraductions = require('ObjetTraduction.js');
        var TypeThemeBouton = require('Type_ThemeBouton.js');
        var EStructureAffichage = require('Enumere_StructureAffichage.js');
        var ZoneFenetre = require('IEZoneFenetre.js');
        var Identite = require('ObjetIdentite.js');

        function _ObjetFenetre() {
            this.inheritedCreate(arguments);
            this.optionsFenetre = {
                listeBoutonsInvisibles: []
            };
            this.EnAffichage = false;
            this.promise = null;
            this._promiseResolve = null;
            this.NomFenetre = this.Nom + '_Fenetre';
            this.idFenetreContenu = this.Nom + '_FenetreContenu';
            this.IdTitre = this.Nom + '_Titre';
            this.IdTitreImage = this.IdTitre + '_image';
            this.IdContenu = this.Nom + '_Contenu';
            this.IdPremierElement = this.NomFenetre;
            this.GenreStructure = EStructureAffichage.Autre;
        }
        MethodesObjet.heritagePrototype(_ObjetFenetre, ObjetAbstraitInterface);
        _ObjetFenetre.prototype.setOptionsFenetre = function(aOptions) {
            $.extend(this.optionsFenetre, aOptions);
            this._structureBoutons = null;
            this.$refreshSelf();
            return this;
        };
        _ObjetFenetre.prototype.SetBoutonActif = function(I, AActif) {
            if (this.optionsFenetre.listeBoutonsInactifs) {
                this.optionsFenetre.listeBoutonsInactifs[I] = !AActif;
                this.$refreshSelf();
            }
        };
        _ObjetFenetre.prototype.getControleur = function(aInstance) {
            return {
                $off: function() {
                    return !aInstance.EnAffichage;
                },
                listeBoutons: function() {
                    if (!aInstance._structureBoutons) {
                        aInstance._structureBoutons = [];
                        var T = aInstance._structureBoutons;
                        aInstance.optionsFenetre.listeBoutons.forEach(function(aElement, aIndex) {
                            var lElement = {};
                            if (MethodesObjet.isObject(aElement)) {
                                Object.assign(lElement, aElement);
                            } else {
                                lElement.libelle = aElement;
                            }
                            if (aElement) {
                                lElement.index = aIndex;
                                lElement.theme = lElement.theme ? lElement.theme : (lElement.libelle === GTraductions.getValeur('Valider') ? TypeThemeBouton.primaire : TypeThemeBouton.secondaire);
                                lElement.sansFermeture = lElement.sansFermeture ? lElement.sansFermeture : false;
                                T.push(lElement);
                            }
                        });
                    }
                    return aInstance._structureBoutons || [];
                },
                fenetreBtn: {
                    event: function(aBoutonRepeat) {
                        aInstance.SurValidation(aBoutonRepeat.element.index);
                    },
                    getDisabled: function(aBoutonRepeat) {
                        return aInstance.optionsFenetre.listeBoutonsInactifs && aInstance.optionsFenetre.listeBoutonsInactifs[aBoutonRepeat.element.index] === true;
                    },
                    getOptions: function(aBoutonRepeat) {
                        if (MethodesObjet.isObject(aBoutonRepeat.element.theme)) {
                            return aBoutonRepeat.element.theme;
                        }
                    }
                }
            };
        };
        _ObjetFenetre.prototype.ComposeContenu = function() {
            return '';
        };
        _ObjetFenetre.prototype.getBoutonNumero = function(aNumeroBouton) {
            var lBouton = {};
            if (this.optionsFenetre.listeBoutons) {
                lBouton = this.optionsFenetre.listeBoutons[aNumeroBouton];
            }
            return lBouton || {
                annuler: true
            };
        };
        _ObjetFenetre.prototype.setBoutonVisible = function(I, aVisible) {
            this.optionsFenetre.listeBoutonsInvisibles[I] = !aVisible;
            this.$refreshSelf();
        };
        _ObjetFenetre.prototype.getParametresValidation = function(aNumeroBouton) {
            var lParametres = {
                instance: this,
                bouton: this.getBoutonNumero(aNumeroBouton),
                numeroBouton: aNumeroBouton
            };
            if (MethodesObjet.isFunction(this.optionsFenetre.addParametresValidation)) {
                Object.assign(lParametres, this.optionsFenetre.addParametresValidation.call(this.Pere, lParametres));
            }
            return lParametres;
        };
        _ObjetFenetre.prototype.promiseResolve = function(aParams) {
            if (this._promiseResolve) {
                this._promiseResolve(aParams);
                this._promiseResolve = null;
            }
        };
        _ObjetFenetre.prototype.SurValidation = function(ANumeroBouton) {
            var lParams = this.getParametresValidation(ANumeroBouton);
            this.promiseResolve(lParams);
            if (this.optionsFenetre.surValiderAvantFermer) {
                this.optionsFenetre.surValiderAvantFermer.call(this.Pere, lParams);
            }
            if (!lParams || !lParams.bouton || !lParams.bouton.sansFermeture) {
                this.Fermer();
            }
            if (this.optionsFenetre.callback) {
                this.optionsFenetre.callback.call(this.Pere, ANumeroBouton, lParams);
            }
            this.callback.appel(ANumeroBouton, lParams);
        };
        _ObjetFenetre.prototype.EstAffiche = function() {
            return this.EnAffichage === true;
        };
        _ObjetFenetre.prototype.positionnerFenetre = function() {};
        _ObjetFenetre.prototype.positionnerSousId = function() {};
        _ObjetFenetre.prototype.surFixerTaille = function() {};
        _ObjetFenetre.protected = {
            surFermer: function(aCallbacFermerHtml) {
                if (this.SurFermer) {
                    this.SurFermer();
                }
                if (MethodesObjet.isFunction(this.optionsFenetre.callbackFermer)) {
                    this.optionsFenetre.callbackFermer();
                }
                this.$refresh();
                GHtml.setDisplay(this.Nom, false);
                if (aCallbacFermerHtml) {
                    aCallbacFermerHtml();
                }
                this.EnAffichage = false;
                if (this.destructionSurFermeture && !this.__enCoursDeDestruction) {
                    this.__surDestructionApresFermeture_ = true;
                    this.free();
                }
                if (MethodesObjet.isFunction(this.optionsFenetre.callbackApresFermer)) {
                    this.optionsFenetre.callbackApresFermer();
                }
                this.promiseResolve({
                    surFermer: true
                });
            }
        };
        _ObjetFenetre.creerInstance = function(aClassFenetre, aParametres, aOptionsFenetre) {
            if (!aParametres || !aParametres.pere) {
                return;
            }
            var lInstance = Identite.creerInstance(aClassFenetre, aParametres);
            var lParametres = $.extend({
                initialiser: true
            }, aParametres);
            lInstance.destructionSurFermeture = true;
            if (aOptionsFenetre && aOptionsFenetre.zIndex) {
                var lZIndex = aOptionsFenetre.zIndex;
                lInstance.getZIndex = function() {
                    return lZIndex;
                };
            }
            ZoneFenetre.ajouterFenetre(lParametres.nomComplet, lInstance.getZIndex ? lInstance.getZIndex() : '');
            $('#' + lInstance.GetNom().escapeJQ()).on('destroyed', function() {
                if (lInstance.destructionSurFermeture) {
                    lInstance.free();
                }
            });
            if (aOptionsFenetre) {
                lInstance.setOptionsFenetre(aOptionsFenetre);
            }
            if (lParametres.initialiser) {
                if (MethodesObjet.isFunction(lParametres.initialiser)) {
                    lParametres.initialiser.call(lParametres.pere, lInstance);
                }
                lInstance.Initialiser();
            }
            return lInstance;
        };
        module.exports = _ObjetFenetre;
    },
    fn: "_objetfenetre.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Mobile/Css/ObjetFenetre_Mobile.css');
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('GHtml.js');
        var GStyle = require('GStyle.js');
        var GTraductions = require('ObjetTraduction.js');
        var _ObjetFenetre = require('_ObjetFenetre.js');
        var Invocateur = require('Invocateur.js').Invocateur;
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;

        function ObjetFenetreMobile() {
            this.inheritedCreate(arguments);
            this.nomModale = this.Nom + '_modale';
            _initOptions.call(this);
            Invocateur.abonner(ObjetInvocateur.events.fermerFenetres, function(aForcer) {
                if (aForcer || this.optionsFenetre.avecAbonnementFermetureFenetreGenerale) {
                    this.__fenetreEmpilee = null;
                    this.Fermer();
                }
            }, this);
        }
        MethodesObjet.heritagePrototype(ObjetFenetreMobile, _ObjetFenetre);
        ObjetFenetreMobile.instanceOuverte = null;

        function _initOptions() {
            this.setOptionsFenetre({
                modale: true,
                fermerFenetreSurClicHorsFenetre: false,
                hauteurEcran_mobile: true,
                titre: '',
                cssFenetre: MethodesObjet.getObjectClass(this) + '_racine',
                avecCroixFermeture: true,
                addParametresValidation: null,
                surValiderAvantFermer: null,
                callback: null,
                callbackFermer: null,
                callbackApresFermer: null,
                listeBoutons: [GTraductions.getValeur('Fermer')],
                avecAbonnementFermetureFenetreGenerale: true,
                estFicheMobile: false,
                empilerFenetre: true,
                avecComposeBasInFooter: false
            });
        }
        ObjetFenetreMobile.prototype.free = function() {
            if (this.isDestroyed()) {
                return;
            }
            this.inherited('free');
            var lJFenetre = $('#' + this.nomModale.escapeJQ());
            var lInstanceModale = lJFenetre.length > 0 ? M.Modal.getInstance(lJFenetre) : null;
            if (lInstanceModale) {
                lInstanceModale.destroy();
            }
            $('#' + this.Nom.escapeJQ()).remove();
        };
        ObjetFenetreMobile.prototype.getControleur = function(aInstance) {
            return {
                getClassConteneur: function() {
                    return aInstance.optionsFenetre.hauteurEcran_mobile && this.controleur.avecTitre() ? 'modal-fixed-header' : '';
                },
                avecCroixFermeture: function() {
                    return !!aInstance.optionsFenetre.avecCroixFermeture;
                },
                avecTitre: function() {
                    return !!aInstance.optionsFenetre.titre || !!aInstance.optionsFenetre.avecCroixFermeture;
                },
                getTitre: function() {
                    var lTitre = (MethodesObjet.isFunction(this.instance.optionsFenetre.titre) ? this.instance.optionsFenetre.titre() : this.instance.optionsFenetre.titre) || '';
                    var lStyle = (aInstance.optionsFenetre.couleurFondBandeau ? GStyle.composeCouleurFond(aInstance.optionsFenetre.couleurFondBandeau) : '') + (aInstance.optionsFenetre.couleurTexteBandeau ? GStyle.composeCouleurTexte(aInstance.optionsFenetre.couleurTexteBandeau) : '');
                    return '<h1 class="ie-ellipsis"' + (lStyle ? ' style="' + lStyle + '"' : '') + '>' + lTitre + '</h1>';
                },
                htmlRepeatBoutons: function(aBoutonRepeat) {
                    return ['<ie-bouton ie-model="fenetreBtn(bouton)"', aBoutonRepeat.element.theme && MethodesObjet.isString(aBoutonRepeat.element.theme) ? ' class="' + aBoutonRepeat.element.theme + '"' : '', ' style="', this.instance.optionsFenetre.listeBoutonsInvisibles[aBoutonRepeat.element.index] === true ? 'display:none;' : '', '"', '>', aBoutonRepeat.element.libelle, '</ie-bouton>'].join('');
                }
            };
        };
        ObjetFenetreMobile.prototype.ConstruireStructureAffichageAutre = function() {
            return ['<div id="' + this.nomModale + '" ie-class="getClassConteneur" class="modal', (this.optionsFenetre.hauteurEcran_mobile ? ' modal-fixed-footer' : ''), ' fermerFenetreEventInterne ObjetFenetre_Mobile ', (this.optionsFenetre.cssFenetre || ''), '">', '<div class="modal-close ui-icon-delete-white" ie-if="avecCroixFermeture"></div>', '<div class="modal-header Fenetre_Titre" ie-html="getTitre" ie-if="avecTitre"></div>', '<div class="modal-content" style="display:none;">', _composer.call(this, this.optionsFenetre.estFicheMobile ? '&nbsp;' : null), '</div>', '<div class="modal-footer">', (this.optionsFenetre.avecComposeBasInFooter && this.ComposeBas ? this.ComposeBas() : ''), '<div ie-repeat="bouton in listeBoutons" ie-html="htmlRepeatBoutons(bouton)"></div>', '</div>', '</div>'].join('');
        };

        function _empilerFenetre() {
            if (ObjetFenetreMobile.instanceOuverte) {
                this.__fenetreEmpilee = ObjetFenetreMobile.instanceOuverte;
                var lFenetreEmpilee = this.__fenetreEmpilee;
                lFenetreEmpilee.__estFenetreEmpilee = true;
                $('#' + lFenetreEmpilee.nomModale.escapeJQ()).modal('close');
                $('#' + lFenetreEmpilee.Nom.escapeJQ()).hide();
                lFenetreEmpilee._restaurerEmpilee = function() {
                    ObjetFenetreMobile.instanceOuverte = lFenetreEmpilee;
                    delete lFenetreEmpilee.__estFenetreEmpilee;
                    if (lFenetreEmpilee.EnAffichage && !lFenetreEmpilee.isDestroyed()) {
                        $('#' + lFenetreEmpilee.Nom.escapeJQ()).show();
                        $('#' + lFenetreEmpilee.nomModale.escapeJQ()).modal('open');
                    }
                };
            }
            ObjetFenetreMobile.instanceOuverte = this;
        }

        function _composer(aHtml) {
            var H = ['<div class="Fenetre_Contenu">', aHtml || this.ComposeContenu(), '</div>'];
            if (!this.optionsFenetre.avecComposeBasInFooter) {
                var lHtmlBas = this.ComposeBas ? this.ComposeBas() : '';
                if (lHtmlBas) {
                    H.push('<div class="Fenetre_Bas">', lHtmlBas, '</div>');
                }
            }
            return H.join('');
        }
        ObjetFenetreMobile.prototype.Actualiser = function() {
            GHtml.setHtml(this.IdContenu, this.ComposeContenu(), {
                controleur: this.controleur
            });
        };
        ObjetFenetreMobile.prototype.Afficher = function(aHtml) {
            this.EnAffichage = true;
            if (this.optionsFenetre.empilerFenetre) {
                _empilerFenetre.call(this);
            }
            if (GHtml.elementExiste(this.nomModale)) {
                var lJFenetre = $('#' + this.nomModale.escapeJQ());
                var lInstanceModale = M.Modal.getInstance(lJFenetre);
                if (!lInstanceModale) {
                    M.Modal.init(lJFenetre, {
                        dismissible: !this.optionsFenetre.modale || this.optionsFenetre.fermerFenetreSurClicHorsFenetre,
                        inDuration: 300,
                        outDuration: 200,
                        startingTop: '4%',
                        endingTop: '10%',
                        onCloseEnd: function() {
                            if (!this.__estFenetreEmpilee) {
                                this.Fermer();
                            }
                        }.bind(this),
                        onOpenEnd: function() {
                            if (this.SurAfficher && !this._openEndInitial) {
                                this.SurAfficher();
                            }
                            this._openEndInitial = this.optionsFenetre.estFicheMobile ? false : true;
                            Invocateur.evenement('fenetre_mobile_finOuverture', this);
                            this.$refreshSelf();
                        }.bind(this)
                    });
                    lInstanceModale = M.Modal.getInstance(lJFenetre);
                }
                lInstanceModale.open();
                GHtml.setDisplay(this.Nom, true);
            }
            var lJContenu = $('#' + this.nomModale.escapeJQ()).children('.modal-content');
            if (aHtml) {
                lJContenu.IEHtml(_composer.call(this, aHtml), {
                    controleur: this.controleur
                }).show();
            }
            lJContenu.show();
            this.$refreshSelf();
            this.promise = new Promise(function(aResolve) {
                this._promiseResolve = aResolve;
            }.bind(this));
            return this.promise;
        };
        ObjetFenetreMobile.prototype._getIdBoutons = function(aIndice) {
            return $('#' + this.Nom.escapeJQ() + '.modal-footer button').get(aIndice);
        };
        ObjetFenetreMobile.prototype.getZIndex = function() {
            return 0;
        };
        ObjetFenetreMobile.prototype.Fermer = function() {
            if (this.EstAffiche()) {
                _ObjetFenetre.protected.surFermer.call(this, function() {
                    var lJFenetre = $('#' + this.nomModale.escapeJQ());
                    if (lJFenetre.length > 0) {
                        var lInstanceModale = M.Modal.getInstance(lJFenetre);
                        if (lInstanceModale) {
                            lInstanceModale.close();
                        }
                        lJFenetre.children('.modal-content').html('').hide();
                    }
                    GHtml.setDisplay(this.Nom, false);
                }.bind(this));
                if (this.__fenetreEmpilee && this.__fenetreEmpilee._restaurerEmpilee) {
                    this.__fenetreEmpilee._restaurerEmpilee();
                } else {
                    ObjetFenetreMobile.instanceOuverte = null;
                }
            }
        };
        ObjetFenetreMobile.creerInstance = _ObjetFenetre.creerInstance;
        module.exports = ObjetFenetreMobile;
    },
    fn: "objetfenetre_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        if (IE.estMobile) {
            module.exports = require('ObjetFenetre_Mobile.js');
        } else {
            module.exports = require('ObjetFenetre_Espace.js');
        }
    },
    fn: "objetfenetre.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GHtml = require('GHtml.js');
        var GStyle = require('GStyle.js');
        var GLog = require('IELog.js');
        var Invocateur = require('Invocateur.js').Invocateur;
        var GUID = require('GUID.js');
        var GestionnaireModale = (function() {
            var uBlocage = {
                pile: [],
                nb: 0,
                avecVoile: false,
                curseur: null
            };
            var uPileZIndex = {};
            var uMaxZIndex = -1;
            var uZIndexBlocage = 1000;
            var uGenerateurGUID = new GUID.generateur();
            var uClassBloquageInterface = 'nav_zoneBloquageInterface';

            function _ajoutDansPile(aId, aPourPremierPlan, aPourBlocageInterface, aPrioriteBlocage) {
                var lPriorite = _getPrioriteBlocageDePriorite(aPrioriteBlocage);
                if (uPileZIndex[aId]) {
                    uPileZIndex[aId].pourPremierPlan = uPileZIndex[aId].pourPremierPlan || aPourPremierPlan;
                    uPileZIndex[aId].pourBlocageInterface = uPileZIndex[aId].pourBlocageInterface || aPourBlocageInterface;
                    uPileZIndex[aId].prioriteBlocage = Math.max(uPileZIndex[aId].prioriteBlocage, lPriorite);
                } else {
                    var lElement = GHtml.getElement(aId);
                    var lZindex = GStyle.getZindex(aId);
                    if (lZindex || aPourBlocageInterface) {
                        uPileZIndex[aId] = {
                            element: lElement,
                            zIndexOrigine: lZindex,
                            zIndex: lZindex,
                            pourPremierPlan: aPourPremierPlan,
                            pourBlocageInterface: aPourBlocageInterface,
                            prioriteBlocage: lPriorite,
                            estBloque: false,
                            pileBlocage: []
                        };
                        uMaxZIndex = Math.max(uMaxZIndex, lZindex);
                    }
                }
            }

            function _setZIndex(aId, zIndex) {
                if (!uPileZIndex[aId]) {
                    return;
                }
                uPileZIndex[aId].zIndex = zIndex;
                GStyle.setZindex(aId, zIndex);
            }

            function _getPrioriteBlocageCourant() {
                var lPriorite = 0;
                uBlocage.pile.forEach(function(aElement) {
                    lPriorite = Math.max(lPriorite, aElement.priorite);
                });
                return lPriorite;
            }

            function _getPrioriteBlocageDePriorite(aPrioriteBlocage) {
                return aPrioriteBlocage || GestionnaireModale.TypePrioriteBlocageInterface.standard;
            }

            function _notifierAbonneBlocageInterface(aId, aBloquer, aForcerDeblocage, aPrioriteBlocage, aEtatBloquerPrecedent) {
                var lElement = uPileZIndex[aId];
                if (lElement && lElement.pourBlocageInterface) {
                    var lPrioriteBlocage = _getPrioriteBlocageDePriorite(aPrioriteBlocage);
                    if (!aBloquer && aForcerDeblocage) {
                        lElement.estBloque = false;
                        if (lElement.methode) {
                            lElement.methode(aBloquer, uBlocage.avecVoile, uBlocage.curseur);
                        } else {
                            _setZIndex(aId, lElement.zIndexOrigine);
                        }
                    } else {
                        if ((aBloquer && (!lElement.estBloque || (!lElement.avecVoile && uBlocage.avecVoile !== false)) && (lElement.prioriteBlocage <= lPrioriteBlocage)) || (!aBloquer && lElement.estBloque && !aEtatBloquerPrecedent)) {
                            if (aBloquer) {
                                lElement.estBloque = true;
                            } else {
                                lElement.estBloque = !!aEtatBloquerPrecedent;
                            }
                            if (lElement.methode) {
                                if (lElement.estBloque) {
                                    lElement.avecVoile = uBlocage.avecVoile;
                                }
                                lElement.methode(lElement.estBloque, uBlocage.avecVoile, uBlocage.curseur);
                            } else {
                                if (lElement.estBloque) {
                                    if (lElement.zIndex > uZIndexBlocage - 10) {
                                        _setZIndex(aId, uZIndexBlocage - 10);
                                    }
                                } else {
                                    _setZIndex(aId, lElement.zIndexOrigine);
                                }
                            }
                        }
                    }
                    var lId = aId;
                    if (lElement.blocageGeneral && global.GApplication) {
                        lId = global.GApplication.getIdConteneur();
                    }
                    if (lElement.estBloque) {
                        $('#' + lId.escapeJQ()).addClass(uClassBloquageInterface);
                    } else {
                        $('#' + lId.escapeJQ()).removeClass(uClassBloquageInterface);
                    }
                }
            }

            function _notifierAbonnesBlocageInterface(aBloquer, aForcerDeblocage, aPrioriteBlocage) {
                var lId;
                for (lId in uPileZIndex) {
                    var lElement = uPileZIndex[lId];
                    var lEtatPrecedent = null;
                    if (aBloquer) {
                        lElement.pileBlocage.push(lElement.estBloque);
                    } else {
                        lEtatPrecedent = lElement.pileBlocage.pop();
                    }
                    _notifierAbonneBlocageInterface(lId, aBloquer, aForcerDeblocage, aPrioriteBlocage, lEtatPrecedent);
                }
            }

            function _desabonnementBlocageInterface(aId) {
                if (uPileZIndex[aId] && uPileZIndex[aId].pourBlocageInterface) {
                    GStyle.setZindex(aId, uPileZIndex[aId].zIndex);
                    if (!uPileZIndex[aId].pourPremierPlan) {
                        delete uPileZIndex[aId];
                    } else {
                        uPileZIndex[aId].estBloque = false;
                        uPileZIndex[aId].pourBlocageInterface = false;
                    }
                }
            }

            function _desabonnementPremierPlan(aId) {
                var lId;
                if (uPileZIndex[aId]) {
                    if (uPileZIndex[aId].zIndex >= uMaxZIndex) {
                        uMaxZIndex = -1;
                        for (lId in uPileZIndex) {
                            if (uPileZIndex[lId] && uPileZIndex[lId].pourPremierPlan && (lId !== aId)) {
                                uMaxZIndex = Math.max(uMaxZIndex, uPileZIndex[lId].zIndex);
                            }
                        }
                    }
                    _setZIndex(aId, uPileZIndex[aId].zIndexOrigine);
                    if (!uPileZIndex[aId].pourBlocageInterface) {
                        delete uPileZIndex[aId];
                    } else {
                        uPileZIndex[aId].pourPremierPlan = false;
                    }
                }
            }
            Invocateur.abonner('finSession', function() {
                _notifierAbonnesBlocageInterface(false, true, GestionnaireModale.TypePrioriteBlocageInterface.systeme);
            });
            return {
                TypePrioriteBlocageInterface: {
                    voile: 1,
                    standard: 10,
                    message: 20,
                    messageInformatif: 30,
                    systeme: 99999
                },
                enPremierPlan: function(AIdPremierPlan) {
                    if (!uPileZIndex[AIdPremierPlan]) {
                        return;
                    }
                    var lId, lElement;
                    for (lId in uPileZIndex) {
                        lElement = uPileZIndex[lId];
                        if (lElement && lElement.pourPremierPlan) {
                            if (!GHtml.elementExiste(lId)) {
                                GLog.addLog('Erreur ObjetNavigateur_Espace _enPremierPlan : element supprimé sans etre desabonné', null, GLog.genre.Erreur);
                                _desabonnementPremierPlan(lId);
                            } else if (!lElement.estBloque) {
                                if (lId === AIdPremierPlan) {
                                    _setZIndex(lId, uMaxZIndex + 1);
                                } else if (!uPileZIndex[lId].estBloque) {
                                    _setZIndex(lId, lElement.zIndexOrigine);
                                }
                            }
                        }
                    }
                },
                abonnementPremierPlan: function(aAbonner, aId) {
                    if (aAbonner) {
                        _ajoutDansPile(aId, true, false);
                    } else {
                        _desabonnementPremierPlan(aId);
                    }
                },
                abonnementBlocageInterfaceGenerale: function(aId, aBloquerInterfaceGenerale) {
                    uPileZIndex[aId] = {
                        blocageGeneral: true,
                        pourPremierPlan: false,
                        pourBlocageInterface: true,
                        estBloque: false,
                        pileBlocage: [],
                        prioriteBlocage: GestionnaireModale.TypePrioriteBlocageInterface.voile,
                        methode: aBloquerInterfaceGenerale
                    };
                },
                abonnementBlocageInterface: function(aAbonner, aId, aPrioriteBlocage) {
                    if (aAbonner) {
                        _ajoutDansPile(aId, false, true, aPrioriteBlocage);
                        var lPriorite = _getPrioriteBlocageDePriorite(aPrioriteBlocage);
                        if (GestionnaireModale.estInterfaceBloque() && _getPrioriteBlocageCourant() > lPriorite) {
                            _notifierAbonneBlocageInterface(aId, true, false, lPriorite);
                        }
                    } else {
                        _desabonnementBlocageInterface(aId);
                    }
                },
                estInterfaceBloque: function() {
                    return uBlocage.pile.length > 0;
                },
                estJElementBloque: function(aJElement) {
                    return aJElement && aJElement.parents ? aJElement.closest('.' + uClassBloquageInterface).length > 0 : false;
                },
                bloquerInterface: function(aParams) {
                    var lParams = Object.assign({
                        bloquer: false,
                        prioriteBlocage: GestionnaireModale.TypePrioriteBlocageInterface.standard,
                        genreCurseur: null,
                        avecVoile: null,
                        forcerDeblocage: false,
                        guidBlocage: null
                    }, aParams);
                    if (!lParams.bloquer && (uBlocage.pile.length === 0)) {
                        return;
                    }
                    var lId = null;
                    lParams.prioriteBlocage = _getPrioriteBlocageDePriorite(lParams.prioriteBlocage);
                    if (lParams.bloquer) {
                        var lElement = {
                            priorite: lParams.prioriteBlocage,
                            guid: uGenerateurGUID.get()
                        };
                        uBlocage.pile.push(lElement);
                        lId = lElement.guid;
                        uBlocage.avecVoile = lParams.avecVoile;
                        uBlocage.curseur = lParams.genreCurseur;
                    } else {
                        if (lParams.guidBlocage) {
                            var lTrouve = false;
                            uBlocage.pile = uBlocage.pile.filter(function(aElement) {
                                if (aElement.guid === lParams.guidBlocage) {
                                    lTrouve = true;
                                }
                                return aElement.guid !== lParams.guidBlocage;
                            });
                            if (!lTrouve) {
                                return;
                            }
                        } else {
                            uBlocage.pile.pop();
                        }
                    }
                    _notifierAbonnesBlocageInterface(lParams.bloquer, false, lParams.prioriteBlocage);
                    return lId;
                }
            };
        }());
        module.exports = GestionnaireModale;
    },
    fn: "gestionnairemodale.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Espace/Css/ObjetMessage.css');
        require('jIEDraggable.js');
        var Callback = require('Callback.js');
        var GLog = require('IELog.js');
        var GChaine = require('GChaine.js');
        var GHtml = require('GHtml.js');
        var EGenreAction = require('Enumere_Action.js');
        var EGenreBoiteMessage = require('Enumere_BoiteMessage.js');
        var ObjetFenetre = require('ObjetFenetre.js');
        var GTraductions = require('ObjetTraduction.js');
        var TypeThemeBouton = require('Type_ThemeBouton.js');
        var MethodesObjet = require('MethodesObjet.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var GestionnaireModale = require('GestionnaireModale.js');

        function ObjetMessage() {
            this.EnAffichage = false;
            Invocateur.abonner(ObjetInvocateur.events.erreurCommunication, function() {
                this.Fermer(EGenreAction.Annuler);
            }, this);
        }
        ObjetMessage.prototype.afficher = function(aParametres) {
            if (this.EnAffichage) {
                if (!this._pileMessage) {
                    this._pileMessage = [];
                }
                this._pileMessage.push(aParametres);
                GLog.addLog('ObjetMessage.prototype.Afficher : un message est deja visible, le nouveau message est empilé : ' + aParametres.message, null, GLog.genre.Avertissement);
                return new Promise(function(aResolve) {
                    aParametres.resolvePromise = aResolve;
                });
            }
            this.Accepte = EGenreAction.Valider;
            this.EnAffichage = true;
            return new Promise(function(aResolve) {
                var lParametres = $.extend({
                    type: EGenreBoiteMessage.Information,
                    titre: '',
                    message: '',
                    callback: null,
                    controleur: null,
                    delaiFermeture: null,
                    avecDecalageFocusBouton: false,
                    idRessource: null,
                    width: 360,
                    getDisabledBouton: null,
                    demanderConfirmation: true,
                    restaurerFocusSurFermeture: true,
                    listeBoutons: null,
                    resolvePromise: aResolve
                }, aParametres);
                if (lParametres.type === EGenreBoiteMessage.Confirmation && lParametres.demanderConfirmation === false) {
                    this.Accepte = EGenreAction.Valider;
                    this.EnAffichage = false;
                    _fermer.call(this, lParametres);
                    return;
                }
                if (lParametres.idRessource) {
                    var lChaine = GTraductions.getValeur(lParametres.idRessource);
                    if (lChaine !== '') {
                        var lJson = require('ObjetJSON.js').parse(lChaine);
                        if (lJson && lJson.titre && lJson.html && lJson.type >= 0 && lJson.boutons) {
                            lParametres.type = _typeEditeurToBoiteMessage(lJson.type);
                            lParametres.titre = lJson.titre;
                            lParametres.message = '<div style="width:' + lJson.width + 'px;min-height:' + lJson.height + 'px;">' + lJson.html + '</div>';
                        } else {}
                    } else {}
                }
                var lDetailsMessage = _construireMessage.call(this, lParametres);
                this.fenetre = ObjetFenetre.creerInstance(ObjetFenetre, {
                    pere: this,
                    initialiser: function(aInstance) {
                        if (lParametres.controleur) {
                            $.extend(true, aInstance.controleur, lParametres.controleur);
                        }
                        aInstance.genreActionFenetre = EGenreAction.Annuler;
                        aInstance.setOptionsFenetre({
                            modale: true,
                            prioriteBlocageAbonnement: GestionnaireModale.TypePrioriteBlocageInterface.message,
                            cssFenetre: 'ObjetMessage ObjetMessage_' + lParametres.type,
                            avecPositionnementResize: false,
                            avecCroixFermeture: false,
                            titre: lDetailsMessage.titre,
                            listeBoutons: lDetailsMessage.listeBoutons,
                            avecTailleSelonContenu: true,
                            restaurerFocusSurFermeture: lParametres.restaurerFocusSurFermeture,
                            hauteurEcran_mobile: lParametres.type === EGenreBoiteMessage.MrFiche,
                            empilerFenetre: false,
                            surValiderAvantFermer: function(aParams) {
                                if (aParams.bouton && aParams.bouton.genreAction !== undefined) {
                                    aInstance.genreActionFenetre = aParams.bouton.genreAction;
                                }
                            }.bind(this),
                            callbackApresFermer: function() {
                                clearTimeout(this._timeoutFermeture);
                                this.EnAffichage = false;
                                delete this.fenetre;
                                this.Accepte = aInstance.genreActionFenetre;
                                _fermer.call(this, lParametres);
                            }.bind(this)
                        });
                    }.bind(this)
                });
                if (MethodesObjet.isFunction(lParametres.getDisabledBouton)) {
                    this.fenetre.controleur.fenetreBtn.getDisabled = function(aBoutonRepeat) {
                        return lParametres.getDisabledBouton(aBoutonRepeat.element);
                    };
                }
                this.fenetre.Afficher(lDetailsMessage.html.join(''));
                GHtml.setFocus(this.fenetre._getIdBoutons(0), true, lParametres.avecDecalageFocusBouton);
                if (lParametres.delaiFermeture) {
                    var lDelai = lParametres.delaiFermeture === true ? 30 * 1000 : lParametres.delaiFermeture;
                    this._timeoutFermeture = setTimeout(function() {
                        if (this.fenetre) {
                            this.Fermer(EGenreAction.Valider);
                        }
                    }.bind(this), lDelai);
                }
            }.bind(this)).catch(function(aArg) {
                throw aArg;
            });
        };
        ObjetMessage.prototype.Afficher = function(aTypeMessage, aTitreMessage, aMessage, aTitreBandeau, aPere, aEvenement, aP1, aP2, aP3, aP4) {
            return this.afficher({
                type: aTypeMessage,
                titre: aTitreMessage || aTitreBandeau,
                message: aMessage,
                callback: new Callback(aPere, aEvenement),
                p1: aP1,
                p2: aP2,
                p3: aP3,
                p4: aP4
            });
        };
        ObjetMessage.prototype.Fermer = function(aGenreAction) {
            if (this.fenetre) {
                if (aGenreAction !== null && aGenreAction !== undefined) {
                    this.fenetre.genreActionFenetre = aGenreAction;
                }
                this.fenetre.Fermer();
            }
        };

        function _construireMessage(aParametres) {
            var lResult = {
                titre: '',
                listeBoutons: [],
                html: []
            };
            if (aParametres.titre && !aParametres.message) {
                aParametres.message = aParametres.titre;
                aParametres.titre = '';
            }
            if (aParametres.titre) {
                lResult.titre = aParametres.titre + '';
            } else {
                switch (aParametres.type) {
                    case EGenreBoiteMessage.Information:
                    case EGenreBoiteMessage.MrFiche:
                        lResult.titre = GTraductions.getValeur('genreBoiteMessage.Information');
                        break;
                    case EGenreBoiteMessage.Confirmation:
                        lResult.titre = GTraductions.getValeur('genreBoiteMessage.Confirmation');
                        break;
                    default:
                        ;
                }
            }
            var lThemeSecondaireBouton = {
                minWidth: 60
            };
            var lThemePrimaireBouton = {
                theme: TypeThemeBouton.primaire,
                minWidth: 60
            };
            lResult.titre = '<i class="om_iconeTitre"></i>' + lResult.titre;
            var lWidth = aParametres.width || 360;
            lResult.html.push(aParametres.idRessource ? aParametres.message : IE.estMobile ? GChaine.ToHTML(aParametres.message + '') : '<div style="width:' + lWidth + 'px;height:auto;">' + GChaine.ToHTML(aParametres.message + '') + '</div>');
            if (aParametres.listeBoutons) {
                lResult.listeBoutons = aParametres.listeBoutons;
                lResult.listeBoutons.forEach(function(aBouton) {
                    switch (aBouton.theme) {
                        case TypeThemeBouton.neutre:
                            break;
                        case TypeThemeBouton.primaire:
                            aBouton.theme = lThemePrimaireBouton;
                            break;
                        default:
                            aBouton.theme = lThemeSecondaireBouton;
                            break;
                    }
                });
            } else {
                switch (aParametres.type) {
                    case EGenreBoiteMessage.Information:
                    case EGenreBoiteMessage.MrFiche:
                        lResult.listeBoutons.push({
                            libelle: GTraductions.getValeur('principal.fermer'),
                            genreAction: EGenreAction.Valider,
                            theme: lThemeSecondaireBouton
                        });
                        break;
                    case EGenreBoiteMessage.Confirmation:
                        lResult.listeBoutons.push({
                            libelle: GTraductions.getValeur('principal.oui'),
                            genreAction: EGenreAction.Valider,
                            theme: lThemePrimaireBouton
                        }, {
                            libelle: GTraductions.getValeur('principal.non'),
                            genreAction: EGenreAction.NePasValider,
                            theme: lThemeSecondaireBouton
                        });
                        break;
                    default:
                        ;
                }
            }
            return lResult;
        }

        function _fermer(aParametres) {
            if (aParametres.callback) {
                if (aParametres.callback.appel) {
                    aParametres.callback.appel(this.Accepte, aParametres.p1, aParametres.p2, aParametres.p3, aParametres.p4);
                } else {
                    aParametres.callback(this.Accepte);
                }
            }
            aParametres.resolvePromise(this.Accepte);
            if (this._pileMessage && this._pileMessage.length > 0) {
                if (window.GApplication && window.GApplication.SESSION_FINI) {
                    return;
                }
                var lParametres = this._pileMessage.pop();
                if (this._pileMessage.length === 0) {
                    delete this._pileMessage;
                }
                setTimeout(function() {
                    this.afficher(lParametres);
                }.bind(this), 200);
            }
        }
        ObjetMessage.prototype.FocusSurPremierElement = function() {
            if (this.fenetre) {
                GHtml.setFocus(this.fenetre._getIdBoutons(0), true);
            }
        };

        function _typeEditeurToBoiteMessage(aGenreEditeur) {
            switch (aGenreEditeur) {
                case 2:
                    return EGenreBoiteMessage.Information;
                case 4:
                    return EGenreBoiteMessage.MrFiche;
                case 3:
                    return EGenreBoiteMessage.Confirmation;
                default:
                    ;
                    return EGenreBoiteMessage.Information;
            }
        }
        ObjetMessage.prototype.GetNom = function() {
            return this.fenetre ? this.fenetre.Nom : '';
        };
        module.exports = ObjetMessage;
    },
    fn: "objetmessage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('NamespaceIE.js');
        require('DeclarationExtensionsObjetNatif.js');
        require('divers.js');
        var GUID = require('GUID.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('GHtml.js');
        var GStyle = require('GStyle.js');
        var GTraductions = require('ObjetTraduction.js');
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        var EGenreAttribut = require('ObjetWAI.js').EGenreAttribut;
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        require('IEHtmlComposants.js');
        require('IEHtml.BtnImage.js');
        require('IEHtml.CheckboxRadio.js');
        require('IEHtml.Identite.js');
        global.GApplication = null;

        function ObjetApplication() {
            this.init();
            this.nomProduit = 'INDEX';
            this.hauteurTitre = 20;
            this.hauteurLigne = 20;
            this.hauteurBandeau = 22;
            this.idLigneSeparateur = GUID.getId();
            this.idLigneBandeau = GUID.getId();
            this.idBandeau = GUID.getId();
            this.idBreadcrumbCombo = "breadcrumbBandeauCombo";
            this.idBreadcrumb = "breadcrumbBandeau";
            this.idBreadcrumbPerso = "breadcrumbBandeauPerso";
            Invocateur.abonner(ObjetInvocateur.events.erreurCommunication, this.finSession, this);
        }
        ObjetApplication.EtatApplication = {
            normal: 1,
            modeExclusif: 2
        };
        var lCommunication = null;
        var lParametres = null;
        var lEstDemo = false;
        var lListeObjetsGraphiques = [],
            lDateServeurReferant, lDateClientReferant;
        var lEtatApplication = ObjetApplication.EtatApplication.normal;
        var lEstDebug = false;
        ObjetApplication.prototype.init = function() {
            Invocateur.abonner(ObjetInvocateur.events.modificationModeExclusif, _setModeExclusif, this);
        };
        ObjetApplication.prototype.initAuthentification = function(aParam) {
            this.parametresUtilisateurBase = aParam.parametresUtilisateurBase;
            if (aParam.parametresUtilisateur) {
                this.parametresUtilisateur.chargerJSON(aParam.parametresUtilisateur);
            }
            this.droits.chargerJSON(aParam);
        };
        ObjetApplication.prototype.getNom = function() {
            return 'GApplication';
        };
        ObjetApplication.prototype.getIdConteneur = function() {
            return 'div';
        };
        ObjetApplication.prototype.getCommunication = function() {
            return lCommunication;
        };
        ObjetApplication.prototype.setCommunication = function(aInstanceCommunication) {
            lCommunication = aInstanceCommunication;
            if (lCommunication && lCommunication.setNom) {
                lCommunication.setNom(this.getNom() + '.getCommunication ()');
            }
        };
        ObjetApplication.prototype.getParametres = function() {
            return lParametres;
        };
        ObjetApplication.prototype.setParametres = function(aInstanceParametres) {
            lParametres = aInstanceParametres;
        };
        ObjetApplication.prototype.getDemo = function() {
            return lEstDemo;
        };
        ObjetApplication.prototype.setDemo = function(aValeur) {
            lEstDemo = aValeur;
        };
        ObjetApplication.prototype.getDateDemo = function() {
            return this.dateDemo;
        };
        ObjetApplication.prototype.setDateDemo = function(aDateDemo) {
            this.dateDemo = aDateDemo;
        };
        ObjetApplication.prototype.initDateServeur = function(aDate) {
            lDateServeurReferant = aDate;
            lDateClientReferant = new Date();
        };
        ObjetApplication.prototype.getDateServeur = function() {
            if (!lDateServeurReferant || !lDateClientReferant) {
                return new Date();
            }
            return new Date(lDateServeurReferant.getTime() + new Date().getTime() - lDateClientReferant.getTime());
        };
        ObjetApplication.prototype.ajouterObjetGraphique = function(aIndice, aNom) {
            if (this._verificationAjoutObjetDansTableau) {
                this._verificationAjoutObjetDansTableau(lListeObjetsGraphiques, aIndice, aNom);
            }
            lListeObjetsGraphiques[aIndice] = {
                nom: aNom,
                estFenetre: _estObjetFenetreVolante(aNom)
            };
        };
        ObjetApplication.prototype.getObjetGraphique = function(aParametre) {
            var lInfosObjet = MethodesObjet.isNumber(aParametre) ? lListeObjetsGraphiques[aParametre] : null;
            if (!lInfosObjet) {
                if (MethodesObjet.isString(aParametre) && window[aParametre]) {
                    lInfosObjet = {
                        nom: aParametre,
                        estFenetre: _estObjetFenetreVolante(aParametre),
                        constructeur: window[aParametre]
                    };
                } else if (aParametre && MethodesObjet.isFunction(aParametre)) {
                    lInfosObjet = {
                        nom: 'NON IDENTIFIE',
                        estFenetre: aParametre.prototype && aParametre.prototype.__estFenetreVolante,
                        constructeur: aParametre
                    };
                }
            } else {
                if (MethodesObjet.isFunction(lInfosObjet.nom)) {
                    lInfosObjet.constructeur = lInfosObjet.nom;
                    lInfosObjet.nom = 'NON IDENTIFIE';
                } else {
                    if (!lInfosObjet.constructeur) {
                        lInfosObjet.constructeur = window[lInfosObjet.nom];
                    }
                }
            }
            return lInfosObjet;
        };

        function _estObjetFenetreVolante(aNomConstructeur) {
            if (window[aNomConstructeur] && window[aNomConstructeur].prototype && window[aNomConstructeur].prototype.__estFenetreVolante) {
                return !!window[aNomConstructeur].prototype.__estFenetreVolante;
            }
            return false;
        }
        ObjetApplication.prototype.existeObjetGraphique = function(aParametre) {
            var lObjetGraphique = this.getObjetGraphique(aParametre);
            return lObjetGraphique && MethodesObjet.isFunction(lObjetGraphique.constructeur);
        };
        ObjetApplication.prototype.estObjetGraphiqueFenetre = function(aIndice) {
            try {
                return lListeObjetsGraphiques[aIndice] && lListeObjetsGraphiques[aIndice].estFenetre;
            } catch (e) {}
        };
        ObjetApplication.prototype.getMessage = function() {
            if (!this._objetMessage) {
                this._objetMessage = new(require('ObjetMessage.js'))();
            }
            return this._objetMessage;
        };
        ObjetApplication.prototype.getEtatApplication = function() {
            return lEtatApplication;
        };

        function _setModeExclusif(aEstModeExclusif) {
            this.changerEtatApplication(aEstModeExclusif ? ObjetApplication.EtatApplication.modeExclusif : ObjetApplication.EtatApplication.normal);
        }
        ObjetApplication.prototype.getModeExclusif = function() {
            return this.getEtatApplication() === ObjetApplication.EtatApplication.modeExclusif;
        };
        ObjetApplication.prototype.entreeModeExclusif = function() {
            Invocateur.evenement(ObjetInvocateur.events.modeExclusif, true);
        };
        ObjetApplication.prototype.sortieModeExclusif = function() {
            Invocateur.evenement(ObjetInvocateur.events.modeExclusif, false);
        };
        ObjetApplication.prototype.changerEtatApplication = function(aEtat) {
            switch (lEtatApplication) {
                case ObjetApplication.EtatApplication.normal:
                    switch (aEtat) {
                        case ObjetApplication.EtatApplication.normal:
                            break;
                        case ObjetApplication.EtatApplication.modeExclusif:
                            lEtatApplication = aEtat;
                            this.entreeModeExclusif();
                            break;
                        default:
                            ;
                    }
                    break;
                case ObjetApplication.EtatApplication.modeExclusif:
                    switch (aEtat) {
                        case ObjetApplication.EtatApplication.normal:
                            lEtatApplication = aEtat;
                            this.sortieModeExclusif();
                            break;
                        case ObjetApplication.EtatApplication.modeExclusif:
                            break;
                        default:
                            ;
                    }
                    break;
                default:
                    ;
            }
        };
        ObjetApplication.prototype.finSession = function(aParametres) {
            Invocateur.desabonner(ObjetInvocateur.events.erreurCommunication, this);
            var lParametresFin = {
                constructionPage: false
            };
            Object.assign(lParametresFin, aParametres);
            Invocateur.evenement(ObjetInvocateur.events.fermerFenetres, true);
            Invocateur.evenement('finSession');
            Invocateur.desabonner(ObjetInvocateur.events.modificationModeExclusif, this);
            $(document).off();
            $(window).off();
            Invocateur.desabonner(ObjetInvocateur.events.autorisationRechargementPage);
            if (lCommunication && lCommunication.arreter) {
                lCommunication.arreter();
            }
            if (window.GNavigateur) {
                GNavigateur.viderCache();
            }
            if (lParametresFin.constructionPage) {
                try {
                    this.construirePageFinSession(lParametresFin);
                } catch (e) {
                    require('IELog.js').addLog('Exception construirePageFinSession : ' + e);
                }
            }
            this.SESSION_FINI = true;
            lCommunication = null;
            lParametres = null;
            lListeObjetsGraphiques = null;
        };
        ObjetApplication.prototype.construirePageFinSession = function(aParametres) {
            if (this._unloadEnCours) {
                return;
            }
            var lCouleur = {
                texte: 'black',
                fond: 'white',
                bordure: 'black'
            };
            if (global.GCouleur) {
                Object.assign(lCouleur, GCouleur);
            }
            var lParametresFin = {
                jsonErreur: null,
                statut: '',
                couleur: lCouleur,
                sansBoutonSeConnecter: false
            };
            Object.assign(lParametresFin, aParametres);
            var lTitre = null;
            var lMessage = null,
                lGenreErreur;
            if (lParametresFin.jsonErreur) {
                lGenreErreur = lParametresFin.jsonErreur.G;
                lTitre = lParametresFin.jsonErreur.Titre;
                lMessage = lParametresFin.jsonErreur.Message;
            }
            lTitre = lTitre === null || lTitre === undefined ? GTraductions.getValeur('connexion.PageIndisponible') : lTitre;
            lMessage = lMessage === null || lMessage === undefined ? GTraductions.getValeur('connexion.AffichagePageImpossible') : lMessage;
            var T = [];
            try {
                T.push(this.construireEnTetePageFinSession(lParametresFin));
            } catch (e) {}
            T.push('<div style="clear:both; position:relative; top:100px;', GStyle.composeCouleurBordure(lCouleur.bordure, 2), GStyle.composeCouleurTexte(lCouleur.texte), GStyle.composeCouleurFond(lCouleur.fond), 'margin-left:auto; margin-right:auto; text-align : center; min-width:290px; max-width:800px; width:50%; padding:10px;', '">');
            T.push('<div id="waispan_id" class="Texte14 Gras EspaceBas">' + GTraductions.getValeur('connexion.Deconnecter') + '</div>');
            if (lTitre) {
                T.push('<div class="Texte14 Gras EspaceBas pageDeconnexion_titre">' + lTitre + (lParametresFin.statut ? ' (' + GTraductions.getValeur('connexion.Erreur') + ' ' + lParametresFin.statut + ')' : '') + '</div>');
            }
            if (lMessage) {
                T.push('<div class="Texte12">' + lMessage + '</div>');
            }
            if (lGenreErreur !== 7 && !lParametresFin.sansBoutonSeConnecter) {
                T.push('<div class="Texte12 GrandEspaceHaut">', '<div tabindex="0" ', GObjetWAI ? GObjetWAI.composeRole(EGenreRole.Button) : '', GObjetWAI ? GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.describedby,
                    valeur: "waispan_id"
                }) : '', 'class="AvecMain Souligne"', 'onkeyup="if (GNavigateur.IsToucheSelection()) window.location.reload()" onclick="window.location.reload ()">', GTraductions.getValeur('connexion.SeConnecter'), '</div>', '</div>');
            }
            T.push('</div>');
            GHtml.setHtml(this.getIdConteneur(), T.join(''));
        };
        ObjetApplication.prototype.construireEnTetePageFinSession = function() {
            return '';
        };
        ObjetApplication.prototype.estDebug = function() {
            return lEstDebug;
        };
        ObjetApplication.prototype.setEstDebug = function(aValeur) {
            lEstDebug = aValeur;
        };
        ObjetApplication.prototype.nomPropConteneurDebug = function() {
            return 'conteneurDebug';
        };
        ObjetApplication.prototype.getDebug = function() {
            return this[this.nomPropConteneurDebug()];
        };
        module.exports = ObjetApplication;
    },
    fn: "objetapplication.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('produit/css/UtilitaireMAJPatience.css');
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');
        var GDate = require('ObjetDate.js').GDate;
        var ObjetFenetre = require('ObjetFenetre.js');
        var GTraductions = require('ObjetTraduction.js');
        var GHtml = require('GHtml.js');
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        var EGenreAttribut = require('ObjetWAI.js').EGenreAttribut;
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        var TUtilitaireDuree = require('UtilitaireDuree.js');
        var GestionnaireModale = require('GestionnaireModale.js');
        var GChaine = require('GChaine.js');
        var UtilsRequeteJSON = require('ObjetRequeteJSON.js').utils;

        function UtilitaireMAJServeur() {}
        UtilitaireMAJServeur.initialiser = function(aOptions) {
            var lUtil = {
                fenetre: null,
                idMessage: 'idMessageMAJ',
                options: {
                    requeteDeco: null,
                    afficherMessageDelaiLong: true,
                    afficherMessageImminentEleve: false,
                    messageTitreFenetre: GTraductions.getValeur('MAJServeur.MAJ_Titre'),
                    messageFenetreMAJPrevue: GTraductions.getValeur('MAJServeur.MAJ_Prevue_S'),
                    messageFenetreMAJImminentEleve: GTraductions.getValeur('MAJServeur.MAJ_Imminente_Eleve_S'),
                    messageFenetreMAJImminent: GTraductions.getValeur('MAJServeur.MAJ_Imminente_S'),
                    messageAnnule: GTraductions.getValeur('MAJServeur.MAJ_Annulee'),
                    messageAttenteMAJ: GTraductions.getValeur('MAJServeur.MAJ_Attente'),
                    messageMAJEffectue: GTraductions.getValeur('MAJServeur.MAJ_Effectue'),
                    cssImage: ''
                }
            };
            Object.assign(lUtil.options, aOptions);
            Invocateur.abonner(UtilsRequeteJSON.getIdentNotification('dureeMAJServeur'), function(aDuree) {
                _notificationMAJ(lUtil, aDuree);
            });
            Invocateur.abonner(UtilsRequeteJSON.getIdentNotification('MAJAnnulation'), function() {
                clearTimeout(lUtil.timeoutDetectionMAJImminente);
                clearTimeout(lUtil.timeoutRechargment);
                if (GApplication.SESSION_FINI) {
                    return;
                }
                GApplication.getCommunication().setMAJServeurEnCours(false);
                _ouvrirFenetreSplash({
                    util: lUtil,
                    init: function(aFenetre) {
                        aFenetre.estAnnulation = true;
                    }
                });
            });
        };
        var lDelaiRepeatRequeteFinMAJ = 10 * 1000;
        var lDureeAttenteMAJPourRequete = 10 * 60 * 1000;
        var lDelaiMAJAvertissement = 4 * 60 * 1000;
        var lDelaiDeconnexion = 1 * 60 * 1000;
        var lDelaiPresencePreparationAvertissement = lDelaiMAJAvertissement + lDelaiDeconnexion;

        function _ouvrirFenetreSplash(aParams) {
            if (aParams.util.fenetre) {
                aParams.util.fenetre.Fermer();
            }
            aParams.util.fenetre = ObjetFenetre.creerInstance(ObjetFenetre_SplashMAJServeur, {
                pere: {},
                initialiser: function(aFenetre) {
                    aParams.init(aFenetre);
                    aFenetre.setOptionsFenetre(Object.assign({
                        titre: aParams.util.options.messageTitreFenetre,
                        callbackFermer: function() {
                            delete aParams.util.fenetre;
                            if (aParams.fermer) {
                                aParams.fermer(aFenetre);
                            }
                        }
                    }, aParams.util.options));
                }
            });
            aParams.util.fenetre.Afficher();
        }

        function _notificationMAJ(aUtil, aDuree) {
            if (!MethodesObjet.isNumber(aDuree)) {
                return;
            }
            if (aUtil.timeoutDetectionMAJImminente) {
                clearTimeout(aUtil.timeoutDetectionMAJImminente);
            }
            var lTimeoutRechargementEcoule = false;
            var lDureeMs = TUtilitaireDuree.dureeEnMs(aDuree);
            var lDateMAJReelle = new Date(Date.now() + lDureeMs + lDelaiDeconnexion);
            if (lDateMAJReelle.getSeconds() === 59) {
                lDateMAJReelle.setSeconds(lDateMAJReelle.getSeconds() + 1);
            }
            var lEstDelaiLong = lDureeMs > lDelaiMAJAvertissement;
            if (!lEstDelaiLong) {
                lDureeMs = Math.floor(TUtilitaireDuree.dureeEnMin(aDuree, true)) * 60 * 1000;
            }
            if (aUtil.timeoutRechargment) {
                clearTimeout(aUtil.timeoutRechargment);
            }
            aUtil.timeoutRechargment = setTimeout(function() {
                lTimeoutRechargementEcoule = true;
                _deconnexion(aUtil);
            }, lDureeMs);
            if (lDureeMs < 1000) {
                return;
            }
            if (lEstDelaiLong) {
                aUtil.timeoutDetectionMAJImminente = setTimeout(function() {
                    GApplication.getCommunication().setMAJServeurEnCours(true);
                }, Math.max(0, lDureeMs - lDelaiPresencePreparationAvertissement));
            }
            if (!lEstDelaiLong || aUtil.options.afficherMessageDelaiLong) {
                aUtil.deconnexionAvecFenetreOuverte = true;
                _ouvrirFenetreSplash({
                    util: aUtil,
                    init: function(aFenetre) {
                        aFenetre.estDelaiLong = lEstDelaiLong;
                        aFenetre.dateReelle = lDateMAJReelle;
                        aFenetre.dureeMs = lDureeMs;
                    },
                    fermer: function() {
                        if (!lTimeoutRechargementEcoule) {
                            aUtil.deconnexionAvecFenetreOuverte = false;
                        }
                    }
                });
            }
        }

        function _deconnexion(aUtil) {
            var lCallback = function() {
                new(aUtil.options.requeteDeco)({}).lancerRequete({
                    decoManuelle: false
                }).then(function() {
                    GApplication.finSession({
                        constructionPage: true,
                        statut: 0,
                        sansBoutonSeConnecter: true,
                        jsonErreur: {
                            Titre: GTraductions.getValeur('connexion.MessageVeuillezPatienter'),
                            Message: !GApplication.estAppliMobile ? ['<div id="' + aUtil.idMessage + '">', aUtil.options.messageAttenteMAJ, '<div class="UtilitaireMAJPatience">', '<div class="maj_loader"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>', '</div>', '</div>'].join('') : aUtil.options.messageAttenteMAJ
                        }
                    });
                    if (!GApplication.estAppliMobile) {
                        aUtil.dateMSDemarrageAttente = Date.now();
                        setTimeout(function() {
                            _gererRechargementPage(aUtil);
                        }, lDelaiRepeatRequeteFinMAJ);
                    }
                });
            };
            ControleSaisieEvenement(lCallback);
        }

        function _messageFinMAJ(aUtil) {
            $(document).find('.pageDeconnexion_titre').remove();
            GHtml.setHtml(aUtil.idMessage, ['<div style="padding-bottom:3px; padding-top: 10px;">', aUtil.options.messageMAJEffectue, '</div>', '<div tabindex="0" ', GObjetWAI ? GObjetWAI.composeRole(EGenreRole.Button) : '', GObjetWAI ? GObjetWAI.composeAttribut({
                genre: EGenreAttribut.describedby,
                valeur: "waispan_id"
            }) : '', 'class="AvecMain Souligne"', 'onkeyup="if (GNavigateur.IsToucheSelection()) window.location.reload()" onclick="window.location.reload ()">', GTraductions.getValeur('connexion.SeConnecter'), '</div>'].join(''));
        }

        function _gererRechargementPage(aUtil) {
            var lEnvoyerRequeteDelai = function() {
                setTimeout(function() {
                    if (Date.now() - aUtil.dateMSDemarrageAttente < lDureeAttenteMAJPourRequete) {
                        _gererRechargementPage(aUtil);
                    } else {
                        _messageFinMAJ(aUtil);
                    }
                }, lDelaiRepeatRequeteFinMAJ);
            };
            $.get('MAJServeurFin.html').done(function() {
                if (!aUtil.deconnexionAvecFenetreOuverte) {
                    window.location.reload();
                } else {
                    _messageFinMAJ(aUtil);
                }
            }).fail(function() {
                lEnvoyerRequeteDelai();
            });
        }

        function ObjetFenetre_SplashMAJServeur() {
            this.inheritedCreate(arguments);
            this.setOptionsFenetre({
                modale: true,
                largeur: 500,
                hauteurBandeau: 25,
                listeBoutons: [GTraductions.getValeur('Fermer')],
                avecAbonnementFermetureFenetreGenerale: false,
                couleurFondBandeau: '#ed9e2b',
                prioriteBlocageAbonnement: GestionnaireModale.TypePrioriteBlocageInterface.messageInformatif
            });
        }
        MethodesObjet.heritagePrototype(ObjetFenetre_SplashMAJServeur, ObjetFenetre);
        ObjetFenetre_SplashMAJServeur.prototype.ComposeContenu = function() {
            var T = [];
            var lMessage = '';
            if (this.estAnnulation) {
                lMessage = this.optionsFenetre.messageAnnule;
            } else if (this.estDelaiLong) {
                lMessage = GChaine.Format(this.optionsFenetre.messageFenetreMAJPrevue, [
                    GDate.FormatDate(this.dateReelle, '%hh%sh%mm')
                ]);
            } else {
                lMessage = GChaine.Format(this.optionsFenetre.afficherMessageImminentEleve ? this.optionsFenetre.messageFenetreMAJImminentEleve : this.optionsFenetre.messageFenetreMAJImminent, [
                    GDate.FormatDureeEnMillisecondes(this.dureeMs, '%xm')
                ]);
            }
            T.push('<div class="ofsm_image_MAJ ', this.optionsFenetre.cssImage, '"></div>', '<div class="ofsm_texte">', lMessage, '</div>');
            return T.join('');
        };
        module.exports = UtilitaireMAJServeur;
    },
    fn: "utilitairemajserveur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Produit/Css/ObjetFenetre_MessageDynamiqueDemarrage.css');
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var MethodesObjet = require('MethodesObjet.js');
        var Requetes = require('CollectionRequetes.js');
        var ObjetFenetre = require('ObjetFenetre.js');
        var GTraductions = require('ObjetTraduction.js');
        Requetes.inscrire('InfosDynamiquesMarquerLu', ObjetRequeteConsultation);

        function ObjetFenetre_MessageDynamiqueDemarrage() {
            this.inheritedCreate(arguments);
            this.setOptionsFenetre({
                titre: GTraductions.getValeur('messagesDyn.titre'),
                listeBoutons: [GTraductions.getValeur('Fermer')],
                avecComposeBasInFooter: true,
                callbackFermer: function() {
                    if (this.marquerLu && this.optionsFenetre.messages && this.optionsFenetre.messages.length > 0) {
                        var lIds = [];
                        this.optionsFenetre.messages.forEach(function(aMessage) {
                            lIds.push(aMessage.id);
                        });
                        Requetes('InfosDynamiquesMarquerLu', this).lancerRequete({
                            tab: lIds
                        });
                    }
                }.bind(this)
            });
            this.marquerLu = false;
        }
        MethodesObjet.heritagePrototype(ObjetFenetre_MessageDynamiqueDemarrage, ObjetFenetre);
        ObjetFenetre_MessageDynamiqueDemarrage.prototype.getControleur = function(aInstance) {
            return {
                cbLu: {
                    getValue: function() {
                        return !!aInstance.marquerLu;
                    },
                    setValue: function(aValue) {
                        aInstance.marquerLu = aValue;
                    }
                }
            };
        };
        ObjetFenetre_MessageDynamiqueDemarrage.prototype.ComposeContenu = function() {
            if (this.optionsFenetre.messages && this.optionsFenetre.messages.length > 0) {
                var H = [];
                this.optionsFenetre.messages.forEach(function(aMessage) {
                    if (aMessage && aMessage.contenu) {
                        if (H.length > 0) {
                            H.push('<hr class="ob_mdd_hr">');
                        }
                        H.push('<div class="comm_contenuMessageDynamique">', aMessage.contenu, '</div>');
                    }
                });
                if (!IE.estMobile) {
                    H = ['<div class="ob_mdd_conteneur">', H.join(''), '</div>'];
                }
                return H.join('');
            }
        };
        ObjetFenetre_MessageDynamiqueDemarrage.prototype.ComposeBas = function() {
            return ['<ie-checkbox ie-model="cbLu" ie-textright class="ob_mdd_cb">', GTraductions.getValeur('messagesDyn.marquerLu'), '</ie-checkbox>'].join('');
        };
        module.exports = ObjetFenetre_MessageDynamiqueDemarrage;
    },
    fn: "objetfenetre_messagedynamiquedemarrage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var Invocateur = require('Invocateur.js').Invocateur;
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var UtilsRequeteJSON = require('ObjetRequeteJSON.js').utils;
        var ObjetFenetre = require('ObjetFenetre.js');
        var ObjetFenetre_MessageDynamiqueDemarrage = require('ObjetFenetre_MessageDynamiqueDemarrage.js');

        function ObjetDonneesCentraleNotifications() {
            this.nbNotifs = 0;
            Invocateur.abonner(UtilsRequeteJSON.getIdentNotification('compteurCentraleNotif'), function(aCompteur) {
                this.nbNotifs = aCompteur;
                this._notifSurModification({
                    compteurCentraleNotif: true
                });
            }, this);
            Invocateur.abonner(ObjetDonneesCentraleNotifications.typeNotif.masquerNbNotifs, function(aNbNotifs) {
                this.nbNotifs = Math.max(0, this.nbNotifs - aNbNotifs);
                this._notifSurModification({
                    masquerNbNotifs: true
                });
            }, this);
        }
        ObjetDonneesCentraleNotifications.typeNotif = {
            surModification: 'odcn_surModification',
            masquerNbNotifs: 'odcn_masquerNbNotifs'
        };
        ObjetDonneesCentraleNotifications.prototype._notifSurModification = function(aParams) {
            Invocateur.evenement(ObjetDonneesCentraleNotifications.typeNotif.surModification, Object.assign(aParams || {}, this.getDonnees()));
            Invocateur.evenement(ObjetInvocateur.events.refreshIEHtml);
        };
        ObjetDonneesCentraleNotifications.prototype.getDonnees = function() {
            return {
                nbNotifs: this.nbNotifs
            };
        };
        ObjetDonneesCentraleNotifications.prototype.addMessagesDynamiques = function(aTabMessages) {
            this.listeMessagesDynamiques = [];
            if (aTabMessages && aTabMessages.length > 0 && aTabMessages.forEach) {
                aTabMessages.forEach(function(aMessage) {
                    if (aMessage && aMessage.id && aMessage.contenu) {
                        this.listeMessagesDynamiques.push(aMessage);
                    } else {}
                }.bind(this));
            }
        };
        ObjetDonneesCentraleNotifications.prototype.afficherMessagesDemarrage = function() {
            if (this.listeMessagesDynamiques && this.listeMessagesDynamiques.length > 0) {
                ObjetFenetre.creerInstance(ObjetFenetre_MessageDynamiqueDemarrage, {
                    pere: GInterface
                }, {
                    messages: this.listeMessagesDynamiques
                }).Afficher();
                this.listeMessagesDynamiques = [];
            }
        };
        module.exports = ObjetDonneesCentraleNotifications;
    },
    fn: "objetdonneescentralenotifications.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var Invocateur = require('Invocateur.js').Invocateur;
        var ObjetDonneesCentraleNotifications = require('ObjetDonneesCentraleNotifications.js');

        function ObjetDonneesCentraleNotificationsSco() {
            this.inheritedCreate(arguments);
            this.compteurNotifsParOnglet = {};
            Invocateur.abonner('notification_communication', function(aNotifs) {
                for (var i = 0; i < aNotifs.length; i++) {
                    this.compteurNotifsParOnglet[aNotifs[i].onglet] = aNotifs[i];
                }
                this._notifSurModification({
                    notification_communication: true
                });
            }, this);
            Invocateur.abonner('modifier_notification_communication', function(aGenreOnglet, aModificateur) {
                if (aModificateur === 0) {
                    return;
                }
                if (!this.compteurNotifsParOnglet[aGenreOnglet]) {
                    this.compteurNotifsParOnglet[aGenreOnglet] = {
                        nb: 0,
                        onglet: aGenreOnglet
                    };
                }
                this.compteurNotifsParOnglet[aGenreOnglet].nb = (this.compteurNotifsParOnglet[aGenreOnglet].nb || 0) + aModificateur;
                this.nbNotifs += aModificateur;
                this._notifSurModification({
                    modifier_notification_communication: true
                });
            }, this);
            Invocateur.abonnerUnique('notification_chatVS', function(aListe) {
                this.listeNotifsChatVS = aListe;
            }.bind(this));
            this.nbConversationEnCours = 0;
            Invocateur.abonner('modifier_nb_conversationEnCours', function(aNb) {
                this.nbConversationEnCours = aNb;
                this._notifSurModification();
            }, this);
        }
        MethodesObjet.heritagePrototype(ObjetDonneesCentraleNotificationsSco, ObjetDonneesCentraleNotifications);
        ObjetDonneesCentraleNotificationsSco.prototype.getDonnees = function() {
            return Object.assign({}, {
                compteurNotifsParOnglet: this.compteurNotifsParOnglet,
                nbConversationEnCours: this.nbConversationEnCours
            }, this.inherited('getDonnees', arguments));
        };
        module.exports = ObjetDonneesCentraleNotificationsSco;
    },
    fn: "objetdonneescentralenotificationssco.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreOnglet = {
            MenuOnglets: -2,
            GeneralAccueil: -1,
            GeneralRacine: 0,
            GeneralVieEtablissement: 2,
            GeneralNotes: 3,
            GeneralBulletins: 4,
            GeneralVieScolaire: 5,
            GeneralCompte: 6,
            Accueil: 7,
            Informations: 8,
            Agenda: 9,
            Menus: 10,
            Vacances: 11,
            Releve: 12,
            Bulletins: 13,
            Orientation: 14,
            SaisieOrientation: 15,
            EmploiDuTemps: 16,
            CahierDeTexte: 17,
            Remplacements: 18,
            VieScolaire_Recapitulatif: 19,
            Dossiers: 20,
            Compte: 21,
            CompteEleve: 22,
            SaisieNotes: 23,
            SaisieAppreciationsBulletin: 25,
            SaisieAppreciationsBulletinGroupe: 26,
            SaisieAppreciationsGenerales: 27,
            SaisieCahierDeTextes: 28,
            SaisieAbsences: 29,
            SaisieAppreciationsReleve: 30,
            SaisieAppreciationsReleve_Gpe: 31,
            FicheBrevet: 34,
            InfoMedicale: 36,
            EquipePedagogique: 37,
            Graphique: 38,
            GeneralResultats: 39,
            GeneralOrientations: 40,
            ConseilDeClasse: 41,
            SaisieAppreciationDeFinDeStage: 42,
            GeneralDansLaClasse: 43,
            SuiviPluriannuel: 44,
            BilanParDomaine: 45,
            CahierDeTextes_Contenu: 47,
            CahierDeTextes_TravailAFaire: 48,
            InfosPerso: 49,
            GeneralStage: 52,
            SaisieAppreciationsFicheBrevet: 53,
            GeneralCompetence: 55,
            Evaluation: 56,
            GeneralBrevet: 57,
            GeneralEquipePedagogique: 58,
            GeneralMesClasses: 59,
            EmploiDuTempsClasse: 60,
            General_CahierDeTextes: 61,
            CahierDeTextesClasse: 62,
            ResultatsClasses: 64,
            ListeEvaluation: 65,
            ListeEvaluationHistorique: 67,
            Punitions: 68,
            Entreprise: 69,
            CahierDeTexte_Progression: 71,
            Dispenses: 72,
            AbsencesEtRetards: 73,
            SuivisAbsenceRetard: 74,
            Affectation_Progression: 75,
            RecapitulatifAbsences: 76,
            TrombinoscopeClasse: 77,
            Saisie_CarnetCorrespondance: 78,
            IManuels: 79,
            EmploiDuTempsSalle: 81,
            Trombinoscope: 82,
            LivretScolaire_Fiche: 83,
            QCM: 84,
            QCM_Saisie: 85,
            QCM_Bibliotheque: 86,
            QCM_Reponse: 87,
            CDT_TAF: 88,
            CDT_Contenu: 89,
            Rencontre: 90,
            Rencontre_Indisponibilites: 91,
            Rencontre_Desideratas: 92,
            CreneauxLibres: 93,
            General_Rencontre_Planning: 94,
            QCM_BibliothequeNathan: 96,
            EmploiDuTempsProfesseur: 97,
            SaisieOffresStage: 98,
            RessourcePedagogique: 99,
            BulletinCompetences: 100,
            OffresStage: 101,
            Casier: 102,
            Casier_Documents: 103,
            Casier_MonCasier: 104,
            ListeEleves: 105,
            Genral_Classes: 106,
            General_Salles: 107,
            LivretScolaire: 108,
            LivretScolaire_Appreciations: 109,
            LivretScolaire_Competences: 110,
            Graphique_Profil: 111,
            Graphique_Evolution: 112,
            SaisieAbsences_AppelEtSuivi: 113,
            SaisieAbsences_Appel: 114,
            Remplacements_Grille: 118,
            Remplacements_Tableau: 119,
            Rencontre_Planning_Liste: 120,
            Rencontre_Planning_Grille: 121,
            GeneralReleveDeNotes: 122,
            ListeProfesseurs: 123,
            ListeClasses: 124,
            ListeGroupes: 125,
            ListeResponsables: 126,
            ListePersonnels: 127,
            Genral_Eleves: 128,
            General_Professeurs: 129,
            EmploiDuTempsEleve: 130,
            Messagerie: 131,
            General_Messagerie: 132,
            EmploiDuTempsPersonnelEtablissement: 134,
            Incidents: 135,
            SaisieAbsences_Appel_Professeur: 136,
            AutorisationSortie: 137,
            RecapAbsences: 138,
            RecapFeuilleAppel: 139,
            RecapPunitions: 140,
            ProgrammesBO: 141,
            Trombinoscope_Professeur: 142,
            Trombinoscope_Personnel: 143,
            ParametresUtilisateur: 144,
            ListeStagiaires: 145,
            CoursNonAssures: 146,
            General_Personnels: 147,
            DocumentsATelecharger: 148,
            General_Progression: 149,
            BibliothequeProgression: 150,
            General_CahierDeTextes_Saisie: 151,
            General_CahierDeTextes_Consultation: 152,
            General_Documentation: 153,
            ListeDevoirSurTable: 154,
            AbsencesGrille: 155,
            General_Materiels: 156,
            EmploiDuTempsMateriel: 157,
            ListeDiffusion: 158,
            RecapitulatifScolarite: 161,
            PlanningParSemaine: 162,
            PlanningParSemaine_Professeur: 163,
            PlanningParSemaine_Eleve: 164,
            PlanningParSemaine_Classe: 165,
            PlanningParSemaine_Salle: 166,
            PlanningParSemaine_PersonnelEtablissement: 167,
            PlanningParSemaine_Materiel: 168,
            PlanningParRessource_Professeur: 169,
            PlanningParRessource_Eleve: 170,
            PlanningParRessource_Classe: 171,
            PlanningParRessource_Salle: 172,
            PlanningParRessource_PersonnelEtablissement: 173,
            PlanningParRessource_Materiel: 174,
            General_Intendance: 175,
            Intendance_SaisieDemandesTravaux: 176,
            RessourcePedagogique_Partage: 177,
            BilanFinDeCycle: 178,
            Trombinoscope_EquipePedagogique: 179,
            ParcoursEducatif_Bulletin: 180,
            ParcoursEducatif_BullCompetence: 181,
            General_Competences_NouveauSocleCommun: 182,
            Saisie_Punitions: 192,
            Saisie_Dispenses: 193,
            ListeDevoirs: 194,
            EvaluationAccueilStage: 195,
            ListeServices: 196,
            RecapitulatifExportLSU: 197,
            DernieresNotes: 198,
            Competences_GrillesParDomaine: 199,
            Competences_GrillesParMatiere: 200,
            DernieresEvaluations: 201,
            ReleveEvaluationsParService: 202,
            General_Competences_Grilles: 203,
            General_Competences_Evaluation: 204,
            General_Competences_BilanPeriodique: 205,
            General_Competences_BilanFinDeCycle: 206,
            General_MonEmploiDuTemps: 207,
            General_MesEleves: 208,
            General_MesCollegues: 209,
            General_OutilsPedagogiques: 210,
            General_CDT: 211,
            General_VieScolaire_Recapitulatif: 212,
            General_RessourcesPedagogiques: 214,
            ReleveEvaluationsParClasse: 215,
            NiveauxDeMaitriseParMatiere: 216,
            General_BulletinsEleveClasse: 217,
            General_BulletinCompetencesEleveClasse: 218,
            BulletinCompetencesClasse: 219,
            General_MesColleguesPersonnels: 220,
            General_ProceduresDisciplinaires: 221,
            General_Dispenses: 222,
            General_Competences_BilanDomaine: 223,
            SaisieAppreciationsGenerales_Competences: 224,
            General_Appreciations: 225,
            General_Appreciations_Competences: 226,
            BulletinAnneesPrec_Note: 227,
            BulletinAnneesPrec_Competence: 228,
            ListeMatieres: 229,
            ReleveDeCompetences: 230,
            TableauDeBord: 231,
            ServicesPeriscolaires: 232,
            Inscriptions: 233,
            EmploiDuTemps_Annuel_Classe: 234,
            InfosEnfant_Prim: 235,
            General_BilanParDomaine: 237,
            General_CahierJournal: 238,
            SaisieProgressions: 239,
            General_PyramideDesAges: 240,
            PyramideDesAges_Histogramme: 241,
            PyramideDesAges_Repartition: 242,
            General_CahierDeTextes_Planification: 243,
            CDT_Planning: 244,
            QCM_Collaboratif: 245,
            AppreciationsBulletinParEleve: 246,
            Intendance_SaisieSecretariat: 247,
            Competences_GrillesCompetencesNumeriques: 248,
            CompetencesNumeriques: 249,
            ManuelsNumeriques: 250,
            General_Blog: 251,
            Blog_Admin: 252,
            Blog_FilActu: 253,
            Blog_Mediatheque: 254,
            SaisieTravailAFaire: 255,
            General_InscriptionsEtablissement: 256,
            InscriptionsEtablissement: 257,
            SaisieAbsences_AppelEtSuiviProfesseur: 259,
            SaisieAvisProfesseur: 260,
            SuiviElevesTutores: 261
        };
        module.exports = EGenreOnglet;
    },
    fn: "enumere_onglet.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeHttpNotificationDonnes = {
            THND_ListeDocJointEtablissement: 0,
            THND_ListeClasse: 1,
            THND_ListeClasseNiveau: 2,
            THND_ListeGroupe: 3,
            THND_ListeProfesseur: 4,
            THND_AutorisationProfesseur: 5,
            THND_AutorisationPersonnel: 6,
            THND_NombreDepotDocumentCasierNonLus: 7,
            THND_NombreMessagesNonLus: 8,
            THND_NombreActualitesNonLues: 9,
            THND_Kiosque: 10
        };
        module.exports.TypeHttpNotificationDonnes = TypeHttpNotificationDonnes;
    },
    fn: "typehttpnotificationdonnes.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeStatutInterrogationCloud = {
            sic_Inconnu: 0,
            sic_OK: 1,
            sic_TokenInvalide: 2,
            sic_Timeout: 3,
            sic_ArretApplication: 4,
            sic_DossierTropGros: 5,
            sic_DossierInconnu: 6,
            sic_RacineInconnue: 7,
            sic_ImpossibleDePartagerLeFichier: 8,
            sic_AdresseMailNonVerifiee: 9,
            sic_ImpossibleDePartagerUnDossier: 10
        };
        module.exports.TypeStatutInterrogationCloud = TypeStatutInterrogationCloud;
    },
    fn: "typestatutinterrogationcloud.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var Requetes = require('CollectionRequetes.js');
        var ObjetElement = require('ObjetElement.js');
        var lRequete = null;
        module.exports.getRequete = function(aObjetRequeteConsultation) {
            if (lRequete) {
                return lRequete;
            }

            function ObjetRequeteOAuth2() {
                this.inheritedCreate(arguments);
            }
            MethodesObjet.heritagePrototype(ObjetRequeteOAuth2, aObjetRequeteConsultation);
            Requetes.inscrire('OAuth2', ObjetRequeteOAuth2, aObjetRequeteConsultation);
            ObjetRequeteOAuth2.prototype.lancerRequete = function(aDemande, aNomFonctionInterrompre) {
                this.JSON = aDemande;
                return this.appelAsynchrone({
                    messageDetail: aNomFonctionInterrompre ? '<ie-bouton style="margin:0 auto;" onclick="' + aNomFonctionInterrompre + '()">interrompre</ie-bouton>' : ''
                });
            };
            ObjetRequeteOAuth2.prototype.actionApresRequete = function() {
                if (this.JSONReponse.racineFichier) {
                    var lRacine = new ObjetElement().fromJSON(this.JSONReponse.racineFichier);
                    lRacine = lRacine.copieJSON(this.JSONReponse.racineFichier);
                    this.JSONReponse.racineFichier = lRacine;
                }
                this.callbackReussite.appel(this.JSONReponse);
            };
            lRequete = ObjetRequeteOAuth2;
            return lRequete;
        };
    },
    fn: "objetrequeteoauth2.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var c_constantesJSON = require('ObjetRequeteJSON.js').c_constantesJSON;
        var ObjetRequeteJSON = require('ObjetRequeteJSON.js').ObjetRequeteJSON;
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var ObjetElement = require('ObjetElement.js');
        var GTraductions = require('ObjetTraduction.js');
        var EGenreOnglet = require('Enumere_Onglet.js');
        var TypeHttpNotificationDonnes = require('TypeHttpNotificationDonnes.js').TypeHttpNotificationDonnes;
        var EGenreDocumentJoint = require('Enumere_DocumentJoint.js');
        var TypeStatutInterrogationCloud = require('TypeStatutInterrogationCloud.js').TypeStatutInterrogationCloud;
        var EGenreEtat = require('Enumere_Etat.js');
        var EGenreBoiteMessage = require('Enumere_BoiteMessage.js');
        var UtilsRequeteJSON = require('ObjetRequeteJSON.js').utils;
        Invocateur.abonner('notifPolling', function(aJSONRacine) {
            var lJSON = aJSONRacine[c_constantesJSON.Signature];
            if (lJSON) {
                Object.assign(lJSON, aJSONRacine[c_constantesJSON.Donnees]);
                if (lJSON.modeExclusif !== undefined) {
                    Invocateur.evenement(ObjetInvocateur.events.modificationModeExclusif, lJSON.modeExclusif);
                }
                _deserialisationSignature(lJSON);
                Invocateur.evenement(ObjetInvocateur.events.refreshIEHtml);
            }
        });
        ObjetRequeteJSON.declarerModules({
            initialiser: function() {
                if (global.GEtatUtilisateur && GEtatUtilisateur.Identification) {
                    var lSignature = {};
                    if (GEtatUtilisateur.estEspaceAvecMembre()) {
                        var lMembre = GEtatUtilisateur.getMembre();
                        if (lMembre) {
                            lSignature.membre = new ObjetElement('', lMembre.GetNumero(), lMembre.GetGenre());
                        }
                    }
                    lSignature.onglet = GEtatUtilisateur.getGenreOnglet() >= 0 && MethodesObjet.isNumber(GEtatUtilisateur.getGenreOnglet()) ? GEtatUtilisateur.getGenreOnglet() : EGenreOnglet.GeneralRacine;
                    this._jsonRacineParametres[c_constantesJSON.Signature] = lSignature;
                }
            },
            deserialiserSignatureConsultation: function() {
                var lModeExclusif = false;
                if (this.JSONSignature) {
                    lModeExclusif = !!this.JSONSignature.ModeExclusif;
                    _deserialisationSignature(this.JSONSignature);
                }
                Invocateur.evenement(ObjetInvocateur.events.modificationModeExclusif, lModeExclusif);
            },
            deserialiserSignatureSaisie: function() {
                if (this.JSONSignature) {
                    if (this.JSONSignature.ModeExclusif || !this.options.avecControleModeExclusif) {
                        Invocateur.evenement(ObjetInvocateur.events.modificationModeExclusif, !!this.JSONSignature.ModeExclusif);
                    }
                    _deserialisationSignature(this.JSONSignature);
                }
            },
            factoryModuleUploadCloud: function() {
                return _getModuleUploadCloud();
            }
        });

        function _deserialisationSignature(aJSON) {
            if (GApplication.droits) {
                GApplication.droits.chargerJSON(aJSON);
            }
            if (aJSON.notificationsCommunication) {
                Invocateur.evenement('notification_communication', aJSON.notificationsCommunication);
            }
            if (aJSON.actualisationMessage) {
                Invocateur.evenement('notification_actualisationMessage');
            }
            if (aJSON.notificationsChatVS) {
                Invocateur.evenement('notification_chatVS', aJSON.notificationsChatVS);
                Invocateur.evenement('notification_actualisationMessage', true);
            }
            if (aJSON.notificationsKiosque) {
                Invocateur.evenement('notification_Kiosque');
            }
            if (aJSON.notifications) {
                Object.keys(aJSON.notifications).forEach(function(aCle) {
                    Invocateur.evenement(UtilsRequeteJSON.getIdentNotification(aCle), aJSON.notifications[aCle]);
                });
            }
            if (aJSON.listeDonnees) {
                if (!GEtatUtilisateur.listeDonnees) {
                    GEtatUtilisateur.listeDonnees = {};
                }
                var lDonnees = {},
                    lJSON = aJSON.listeDonnees;
                if (lJSON[TypeHttpNotificationDonnes.THND_ListeClasseNiveau]) {
                    lDonnees[TypeHttpNotificationDonnes.THND_ListeClasseNiveau] = lJSON[TypeHttpNotificationDonnes.THND_ListeClasseNiveau];
                }
                if (lJSON[TypeHttpNotificationDonnes.THND_ListeGroupe]) {
                    lDonnees[TypeHttpNotificationDonnes.THND_ListeGroupe] = lJSON[TypeHttpNotificationDonnes.THND_ListeGroupe];
                }
                if (lJSON[TypeHttpNotificationDonnes.THND_ListeProfesseur]) {
                    lDonnees[TypeHttpNotificationDonnes.THND_ListeProfesseur] = lJSON[TypeHttpNotificationDonnes.THND_ListeProfesseur];
                }
                if (lJSON[TypeHttpNotificationDonnes.THND_ListeDocJointEtablissement]) {
                    lDonnees[TypeHttpNotificationDonnes.THND_ListeDocJointEtablissement] = lJSON[TypeHttpNotificationDonnes.THND_ListeDocJointEtablissement];
                }
                Object.assign(GEtatUtilisateur.listeDonnees, lDonnees);
            }
        }

        function _traiterReponseUrl(aListeFichier, aParam) {
            if (aParam) {
                var lElements = aListeFichier.getListeElements(function(aEle) {
                        return aEle.idPartage === aParam.idPartage;
                    }),
                    lElement = lElements && lElements.GetNbrElements() === 1 ? lElements.GetElement(0) : null;
                if (lElement) {
                    if (aParam.status === TypeStatutInterrogationCloud.sic_TokenInvalide && !aParam.bloquerDemandeURL) {
                        lElement.traite = true;
                    } else if (aParam.status === TypeStatutInterrogationCloud.sic_OK) {
                        lElement.url = aParam.urlPartage;
                        lElement.traite = true;
                    } else {
                        lElement.SetEtat(EGenreEtat.Suppression);
                        lElement.traite = true;
                        GApplication.getMessage().afficher({
                            type: EGenreBoiteMessage.Information,
                            message: GTraductions.getValeur('requete.erreur') + ' : ' + (aParam.message || '') + ' (' + aParam.status + ')'
                        });
                    }
                } else {
                    lElements = aListeFichier.getListeElements(function(aEle) {
                        return aEle.partageFichier;
                    });
                    lElement = lElements && lElements.GetNbrElements() === 1 ? lElements.GetElement(0) : null;
                    if (lElement) {
                        lElement.SetEtat(EGenreEtat.Suppression);
                        lElement.traite = true;
                        GApplication.getMessage().afficher({
                            type: EGenreBoiteMessage.Information,
                            message: GTraductions.getValeur('requete.erreur') + ' : ' + lElement.GetLibelle()
                        });
                    }
                }
            }
        }

        function _lancer(aListePJs) {
            var lListeATraiter = aListePJs.getListeElements(function(aEle) {
                return aEle.GetGenre() === EGenreDocumentJoint.Cloud && aEle.Existe() && aEle.service !== undefined && !aEle.traite;
            });
            if (lListeATraiter.GetNbrElements() > 0) {
                lListeATraiter.GetElement(0).partageFichier = true;
                var ObjetRequeteOAuth2 = require('ObjetRequeteOAuth2.js').getRequete(ObjetRequeteConsultation);
                return new ObjetRequeteOAuth2({}).lancerRequete({
                    service: lListeATraiter.GetElement(0).service,
                    idPartage: lListeATraiter.GetElement(0).idPartage,
                    partageFichier: lListeATraiter.GetElement(0).partageFichier
                }).then(function(aJSON) {
                    if (aJSON) {
                        _traiterReponseUrl(aListePJs, aJSON);
                    }
                    return _lancer(aListePJs);
                }).catch(function(aError) {});
            }
            return Promise.resolve();
        }

        function _getModuleUploadCloud() {
            return {
                setListePJs: function(aListe) {
                    this.listePJs = aListe;
                },
                actif: function() {
                    return this.listePJs && this.listePJs.GetNbrElements && this.listePJs.GetNbrElements() > 0;
                },
                lancer: function() {
                    var lListePJs = this.listePJs;
                    this.listePJs = null;
                    return _lancer(lListePJs);
                }
            };
        }
    },
    fn: "declarationobjetrequetepn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var MethodesObjet = require('MethodesObjet.js');
        var Requetes = require('CollectionRequetes.js');

        function ObjetParametresUtilisateur() {
            this.init();
        }
        module.exports = ObjetParametresUtilisateur;
        ObjetParametresUtilisateur.prototype.get = function(aChaine) {
            switch (aChaine) {
                default:
                    var lValue = MethodesObjet.get(this._parametres, aChaine);
                    if (lValue === undefined) {
                        lValue = false;
                    }
                    return lValue;
            }
        };
        ObjetParametresUtilisateur.prototype.set = function(aChaine, aValeur, aIgnorerSaisie) {
            var lAncienneValeur = MethodesObjet.get(this._parametres, aChaine),
                lResult = false;
            if (aChaine.trim && aChaine.split) {
                var lSplit = aChaine.split('.'),
                    lObjet = this._parametres,
                    i, lLength = lSplit.length;
                for (i = 0; i < lLength - 1; i++) {
                    if (!MethodesObjet.isObject(lObjet[lSplit[i]])) {
                        lObjet[lSplit[i]] = {};
                    }
                    lObjet = lObjet[lSplit[i]];
                }
            }
            switch (aChaine) {
                case 'widgets':
                    this._parametres.widgets = aValeur;
                    lResult = true;
                    break;
                default:
                    lResult = MethodesObjet.set(this._parametres, aChaine, aValeur);
                    if (lResult) {
                        lResult = aValeur !== lAncienneValeur || MethodesObjet.isObject(aValeur);
                    }
            }
            if (lResult && !aIgnorerSaisie) {
                _save.call(this);
            }
        };
        ObjetParametresUtilisateur.prototype.has = function(aChaine) {
            switch (aChaine) {
                default:
                    var lValue = MethodesObjet.get(this._parametres, aChaine);
                    if (lValue !== undefined) {
                        return true;
                    }
            }
            return false;
        };

        function _save() {
            new ObjetRequeteSaisieParametresUtilisateur(null, function() {}).lancerRequete(this._parametres);
        }
        ObjetParametresUtilisateur.prototype.init = function() {
            this._parametres = {};
        };
        ObjetParametresUtilisateur.prototype.chargerJSON = function(aJSON) {
            if (aJSON) {
                this._parametres = aJSON;
            }
        };

        function ObjetRequeteSaisieParametresUtilisateur(aPere, aEvenementSurReussite) {
            this.inheritedCreate(aPere, aEvenementSurReussite, false);
            this.setOptions({
                sansBlocageInterface: true
            });
        }
        Requetes.inscrire('SaisieParametresUtilisateur', ObjetRequeteSaisieParametresUtilisateur, ObjetRequeteConsultation);
        ObjetRequeteSaisieParametresUtilisateur.prototype.lancerRequete = function(aParam) {
            this.JSON.parametres = aParam;
            return this.appelAsynchrone();
        };
        ObjetRequeteSaisieParametresUtilisateur.prototype.actionApresRequete = function() {
            this.callbackReussite.appel();
        };
    },
    fn: "objetparametresutilisateur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var Requetes = require('CollectionRequetes.js');
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var GTraductions = require('ObjetTraduction.js');

        function ObjetRequeteSaisieDeconnexion() {
            this.inheritedCreate(arguments);
            this.setOptions({
                messageDetail: GTraductions.getValeur('connexion.DeconnexionEnCours'),
                avecControleModeExclusif: false
            });
        }
        Requetes.inscrire('SaisieDeconnexion', ObjetRequeteSaisieDeconnexion, ObjetRequeteConsultation);
        ObjetRequeteSaisieDeconnexion.prototype.lancerRequete = function(aParam) {
            var lParam = {
                decoManuelle: false
            };
            $.extend(lParam, aParam);
            if (lParam.decoManuelle) {
                this._jsonRacineParametres.DeconnexionManuelle = true;
            }
            return this.appelAsynchrone();
        };
        module.exports = ObjetRequeteSaisieDeconnexion;
    },
    fn: "objetrequetesaisiedeconnexion.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        ;
        var EGenreMessageHtml = {
            patiencePDF: 'patiencePDF',
            patiencePDF_Mobile: 'patiencePDF_mobile',
            patienceNathan: 'patienceNathan',
            deconnexionENT: 'deconnexionENT',
            deconnexionENT_Mobile: 'deconnexionENT_Mobile'
        };
        module.exports.EGenreMessageHtml = EGenreMessageHtml;
        var UtilitaireMessageHtml = {
            construireUrl: function(aGenreMessageHtml) {
                var lUrl = 'message.html';
                if (aGenreMessageHtml) {
                    lUrl += '?G=' + aGenreMessageHtml;
                }
                return lUrl;
            }
        };
        module.exports.UtilitaireMessageHtml = UtilitaireMessageHtml;
    },
    fn: "enumere_messagehtml.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var ObjetRequeteSaisieDeconnexion = require('ObjetRequeteSaisieDeconnexion.js');
        var EGenreBoiteMessage = require('Enumere_BoiteMessage.js');
        var GTraductions = require('ObjetTraduction.js');
        var EGenreAction = require('Enumere_Action.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');

        function UtilitaireDeconnexion() {}
        UtilitaireDeconnexion.confirmationDeconnexion = function() {
            return GApplication.getMessage().afficher({
                type: EGenreBoiteMessage.Confirmation,
                message: GTraductions.getValeur('connexion.ConfirmezDeconnexion')
            }).then(function(aGenreBouton) {
                if (aGenreBouton === EGenreAction.Valider) {
                    return new Promise(function(aResolve) {
                        ControleSaisieEvenement(function() {
                            UtilitaireDeconnexion.deconnexion();
                            aResolve();
                        });
                    });
                } else {
                    return false;
                }
            });
        };
        UtilitaireDeconnexion.deconnexion = function() {
            Invocateur.desabonner(ObjetInvocateur.events.autorisationRechargementPage);
            if (GEtatUtilisateur.reset) {
                GEtatUtilisateur.reset();
            }
            return UtilitaireDeconnexion.requeteDeconnexion().then(function() {
                if (GApplication.acces.estConnexionCAS()) {
                    var EGenreMessageHtml = require('Enumere_MessageHtml.js').EGenreMessageHtml;
                    var UtilitaireMessageHtml = require('Enumere_MessageHtml.js').UtilitaireMessageHtml;
                    window.location.href = UtilitaireMessageHtml.construireUrl(IE.estMobile ? EGenreMessageHtml.deconnexionENT_Mobile : EGenreMessageHtml.deconnexionENT);
                } else {
                    GApplication.finSession({
                        constructionPage: true,
                        statut: 0,
                        jsonErreur: {
                            Titre: '',
                            Message: ''
                        }
                    });
                }
            });
        };
        UtilitaireDeconnexion.deconnexionEchecChargement = function() {
            return UtilitaireDeconnexion.requeteDeconnexion().then(function() {
                GApplication.finSession({
                    constructionPage: true,
                    statut: 0,
                    jsonErreur: {
                        Titre: '',
                        Message: GTraductions.getValeur('connexion.EchecChargement')
                    }
                });
            });
        };
        UtilitaireDeconnexion.requeteDeconnexion = function() {
            return new ObjetRequeteSaisieDeconnexion({}).lancerRequete({
                decoManuelle: false
            });
        };
        module.exports = UtilitaireDeconnexion;
    },
    fn: "utilitairedeconnexion.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('DeclarationJournauxCP.js');
        var ObjetDroitsPN = require('ObjetDroitsPN.js').ObjetDroitsPN;
        var ObjetRequeteFonctionParametres = require('ObjetRequeteFonctionParametres.js');
        var ObjetParametres = require('Parametres.js');
        var deferLoadingScript = require('deferLoadingScript.js');
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var _ObjetCommunication = require('_ObjetCommunication.js');
        var GStyle = require('GStyle.js');
        var EGenreBoiteMessage = require('Enumere_BoiteMessage.js');
        var GCryptage = require('ObjetCryptage.js');
        var ObjetCycles = require('ObjetCycles.js');
        var GDate = require('ObjetDate.js').GDate;
        var GTraductions = require('ObjetTraduction.js');
        var TypeEnsembleNombre = require('TypeEnsembleNombre.js');
        var ObjetAccesPN = require('objetaccespn.js');
        var ObjetOptionsEspaceLocalPN = require('ObjetOptionsEspaceLocalPN.js');
        var TypeModeGrillesEDT = require('TypeModeGrillesEDT.js').TypeModeGrillesEDT;
        var ObjetApplication = require('ObjetApplication.js');
        var UtilitaireMAJServeur = require('UtilitaireMAJServeur.js');
        var ObjetDonneesCentraleNotificationsSco = require('ObjetDonneesCentraleNotificationsSco.js');
        require('DeclarationObjetRequetePN.js');
        require('jspdf.min.js');

        function ObjetApplicationPN() {
            this.inheritedCreate();
            this.nomProduit = 'PRONOTE';
            this.donneesCentraleNotifications = new ObjetDonneesCentraleNotificationsSco();
        }
        MethodesObjet.heritagePrototype(ObjetApplicationPN, ObjetApplication);
        var uGestionPresence = {
            modeExclusif: false,
            compteurAffichageMessagerie: 0
        };
        ObjetApplicationPN.prototype.lancer = function(aParam) {
            this.setDemo(!!aParam.d);
            Invocateur.evenement(ObjetInvocateur.events.initChiffrement, aParam);
            var lParametres = {
                genreEspace: aParam.a,
                numeroJeton: aParam.e ? aParam.e : -1,
                cleJeton: aParam.f ? aParam.f : '',
                genreAcces: aParam.g ? aParam.g : 0,
                numeroSession: aParam.h,
                forcerInscription: aParam.fi,
                page: aParam.p
            };
            this.acces = new ObjetAccesPN(lParametres.genreAcces, lParametres.genreEspace, 0, 0, lParametres.numeroJeton, 0, '', '');
            if (this.acces.estConnexionCAS() || this.acces.estConnexionCookie()) {
                this.acces.setIdentification(lParametres.numeroJeton, lParametres.cleJeton);
            };
            this.droits = new ObjetDroitsPN();
            this.parametresUtilisateur = new(require('ObjetParametresUtilisateur.js'));
            IE.optionsEspaceLocal = new ObjetOptionsEspaceLocalPN({
                nomProduit: this.nomProduit,
                espace: lParametres.genreEspace
            });
            deferLoadingScript.setOptions({
                done: function() {
                    Invocateur.evenement(ObjetInvocateur.events.modificationThemeCouleur);
                },
                fail: function(aNom) {
                    $.get("erreur/deferLoadingScript/" + aNom);
                    require('UtilitaireDeconnexion.js').deconnexionEchecChargement();
                },
                messageChargement: GTraductions.getValeur('connexion.Chargement')
            });
            this.initialisation(lParametres);
            this.lancerRequeteParametres(lParametres);
            Invocateur.abonner('affichage_messagerie', _surNotificationAffichageMessagerie.bind(this));
            UtilitaireMAJServeur.initialiser({
                requeteDeco: require('ObjetRequeteSaisieDeconnexion.js'),
                afficherMessageDelaiLong: !GEtatUtilisateur.estEspacePourEleve(),
                afficherMessageImminentEleve: GEtatUtilisateur.estEspacePourEleve(),
                cssImage: GEtatUtilisateur.pourPrimaire() ? 'Image_AlerteMiseAJourPRM' : 'Image_AlerteMiseAJourPRN'
            });
            if (aParam.fi) {
                GEtatUtilisateur.forcerOngletInscription = true;
            }
        };
        ObjetApplicationPN.prototype.initialisation = function() {};
        ObjetApplicationPN.prototype.lancerRequeteParametres = function(aParametres) {
            new ObjetRequeteFonctionParametres(this, this.surRequeteParametres.bind(this, aParametres)).lancerRequete({
                espace: aParametres.genreEspace,
                uuidRSA: GCryptage.cryptageRSA.encrypter(this.getCommunication().ivAESTemp)
            });
            this.getCommunication().setIvAES();
        };
        ObjetApplicationPN.prototype.surRequeteParametres = function(aParametres, aJSON) {
            try {
                GParametres = new ObjetParametres(aJSON);
                this.initialisationApresParametres(aParametres);
            } catch (e) {
                alert("Erreur : " + e.message);
            }
        };
        ObjetApplicationPN.prototype.initialisationApresParametres = function() {
            function _surUnload() {
                this.getCommunication().desactiverPresence();
            }
            Invocateur.abonner(ObjetInvocateur.events.surRechargementPage, _surUnload.bind(this));
            GDate.SetDonnees(GParametres.PremierLundi, GParametres.PremiereDate, GParametres.DerniereDate, GParametres.PlacesParJour, GParametres.PlacesParHeure, GParametres.DureeSequence, GParametres.PremiereHeure, GParametres.LibellesHeures, GParametres.LibellesHeuresFin, GParametres.JoursOuvres);
            var lJourFerie, I, lNb, lIndiceJour;
            GParametres.ensembleJoursFeries = new TypeEnsembleNombre();
            for (I = 0, lNb = GParametres.listeJoursFeries.GetNbrElements(); I < lNb; I++) {
                lJourFerie = GParametres.listeJoursFeries.GetElement(I);
                for (lIndiceJour = GDate.getNbrJoursEntreDeuxDates(GParametres.dateDebutPremierCycle, lJourFerie.dateDebut); lIndiceJour <= GDate.getNbrJoursEntreDeuxDates(GParametres.dateDebutPremierCycle, lJourFerie.dateFin); lIndiceJour++) {
                    GParametres.ensembleJoursFeries.add(lIndiceJour + 1);
                }
            }
            IE.Cycles = new ObjetCycles();
            IE.Cycles.init({
                premiereDate: GParametres.PremiereDate,
                derniereDate: GParametres.DerniereDate,
                dateDebutPremierCycle: GParametres.dateDebutPremierCycle,
                joursOuvresParCycle: GParametres.joursOuvresParCycle,
                premierJourSemaine: GParametres.premierJourSemaine,
                joursOuvres: GParametres.setOfJoursCycleOuvre,
                cyclesSansFeries: GParametres.grillesEDTEnCycle === TypeModeGrillesEDT.TMG_CycleSansFeries,
                cyclesHebdomadaire: GParametres.grillesEDTEnCycle === TypeModeGrillesEDT.TMG_CycleHebdomadaire,
                joursFeries: GParametres.ensembleJoursFeries
            });
            this.actualiserTitle();
        };
        ObjetApplicationPN.prototype.destructionInterface = function() {
            if (window.GInterface && GInterface.free) {
                GInterface.free();
            }
        };
        ObjetApplicationPN.prototype.getJeton = function(aFrames) {
            var lJeton;
            for (var i = 0; i < aFrames.length && (!lJeton); i++) {
                try {
                    lJeton = aFrames[i].frames[0].GJeton;
                } catch (e) {}
                try {
                    if (!lJeton && aFrames[i].frames.length > 0) {
                        lJeton = this.getJeton(aFrames[i].frames);
                    }
                } catch (e) {}
            }
            return lJeton;
        };
        ObjetApplicationPN.prototype.creerFenetreDebug = function() {};
        ObjetApplicationPN.prototype.getOptionsDebug = function() {
            return null;
        };
        ObjetApplicationPN.prototype.getConstructeursDebug = function() {
            return {
                constructeurFenetre: null,
                constructeurTraitements: null
            };
        };
        ObjetApplicationPN.prototype._verificationAjoutObjetDansTableau = function(aTableau, aGenre, aNom) {
            if (this.estDebug()) {}
        };
        ObjetApplicationPN.prototype.avecGestionModeExclusif = function() {
            return false;
        };
        ObjetApplicationPN.prototype.entreeModeExclusif = function() {
            if (!this.avecGestionModeExclusif()) {
                return;
            }
            this.inherited('entreeModeExclusif');
            this.getMessage().afficher({
                type: EGenreBoiteMessage.Information,
                titre: GTraductions.getValeur('ModeExclusif.UsageExclusif'),
                message: GTraductions.getValeur('ModeExclusif.EntrerModeExclusif'),
                delaiFermeture: true
            });
            uGestionPresence.modeExclusif = true;
            _modificationTimerPresence.bind(this)();
        };
        ObjetApplicationPN.prototype.sortieModeExclusif = function() {
            if (!this.avecGestionModeExclusif()) {
                return;
            }
            this.inherited('sortieModeExclusif');
            this.getMessage().afficher({
                type: EGenreBoiteMessage.Information,
                titre: GTraductions.getValeur('ModeExclusif.UsageExclusif'),
                message: GTraductions.getValeur('ModeExclusif.SortieModeExclusif'),
                delaiFermeture: true
            });
            uGestionPresence.modeExclusif = false;
            _modificationTimerPresence.bind(this)();
        };

        function _modificationTimerPresence() {
            var lTimer = _ObjetCommunication.cDureeTimerPresence;
            if (uGestionPresence.modeExclusif) {
                lTimer = 1000 * 30;
            } else if (uGestionPresence.compteurAffichageMessagerie > 0) {
                lTimer = 1000 * 30;
            }
            this.getCommunication().setDureeTimerPresence(lTimer);
        }

        function _surNotificationAffichageMessagerie(aEntreeSurAffichage) {
            uGestionPresence.compteurAffichageMessagerie = Math.max(uGestionPresence.compteurAffichageMessagerie + (aEntreeSurAffichage ? 1 : -1), 0);
            _modificationTimerPresence.bind(this)();
        }
        ObjetApplicationPN.prototype.finSession = function(aParametres) {
            this.getCommunication().desactiverPresence();
            this.destructionInterface();
            this.inherited('finSession', aParametres);
            global.GInterface = null;
        };
        ObjetApplicationPN.prototype.construireEnTetePageFinSession = function(aParametres) {
            var T = [];
            if (window.GParametres && (GParametres.NomEspace || GParametres.NomEtablissementConnexion)) {
                T.push('<div class="Texte" style="font-size:20px; padding:5px;', GStyle.composeCouleurTexte(aParametres.couleur.texte), '">');
                if (GParametres.NomEspace) {
                    T.push('<div class="Gras" style="float:left;', '">', GParametres.NomEspace, '</div>');
                }
                if (GParametres.NomEtablissementConnexion) {
                    T.push('<div style="float:right">', GParametres.NomEtablissementConnexion, '</div>');
                }
                T.push('</div>');
            }
            return T.join('');
        };
        ObjetApplicationPN.prototype.actualiserTitle = function() {
            document.title = GTraductions.getValeur('title', [GParametres.NomEtablissementConnexion, GParametres.NomEspace]);
        };
        module.exports = ObjetApplicationPN;
    },
    fn: "objetapplicationpn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var IEHtml = require('IEHtml.js');
        require('DeclarationJQuery.js');
        require('jInputDisabled.js');
        require('jInputChecked.js');
        var MethodesObjet = require('MethodesObjet.js');
        require('iehtml.checkboxradio.js');
        var Support = require('ObjetSupport.js');
        (function($) {
            $.fn.jIECheckBox = function(aOptions) {
                var lInputs = [],
                    lInput;
                this.each(function() {
                    var lJqthis = $(this);
                    var lEstCB = lJqthis.is(':checkbox');
                    var lEstRB = lJqthis.is(':radio');
                    if (!lEstCB && !lEstRB) {
                        return;
                    }
                    if (lJqthis.parent().hasClass('iecb') || lJqthis.parent().hasClass('ieswitch')) {
                        lInputs.push(this);
                        return;
                    }
                    if (lEstCB) {
                        lJqthis.attr('ie-checkbox', '');
                    } else {
                        lJqthis.attr('ie-radio', '');
                    }
                    if (aOptions) {
                        var lCss = {};
                        if (MethodesObjet.isNumber(aOptions.marginLeftMin)) {
                            lCss['margin-left'] = aOptions.marginLeftMin + 'px';
                        }
                        if (MethodesObjet.isNumber(aOptions.marginRightMin)) {
                            lCss['margin-right'] = aOptions.marginRightMin + 'px';
                        }
                        if (MethodesObjet.isNumber(aOptions.marginTopMin)) {
                            lCss['margin-top'] = aOptions.marginTopMin + 'px';
                        }
                        if (MethodesObjet.isNumber(aOptions.marginBottomMin)) {
                            lCss['margin-bottom'] = aOptions.marginBottomMin + 'px';
                        }
                        lJqthis.css(lCss);
                    }
                    var lNodeParent = lJqthis.parent().get(0);
                    var lNode = IEHtml.injectHTML(lNodeParent, this, null, true, this.nextSibling);
                    lInput = $(lNode).find('input').get(0);
                    if (lInput) {
                        lInputs.push(lInput);
                        lJqthis = $(lInput);
                        lJqthis.addClass(this.className);
                    }
                });
                return $(lInputs);
            };
            $.fn.jIEInterdireSelectionTexte = function() {
                var lSupport = IE ? Support : null,
                    lFunction = function onSelectStart(event) {
                        var lName = event.target.tagName.toLowerCase();
                        return lName === 'input' || lName === 'textarea' || (event.originalEvent && event.originalEvent.__marqueurAutoriserSelection === true);
                    },
                    lFunctionAutoriser = function onSelectStartAutoriser(event) {
                        event.originalEvent.__marqueurAutoriserSelection = true;
                        return true;
                    };
                if ((lSupport && lSupport.avecUserSelect) || !lSupport) {
                    this.addClass('SansSelectionTexte');
                }
                if ((lSupport && !lSupport.avecUserSelect) || !lSupport) {
                    this.off('selectstart.jIEInterdireSelectionTexte1 selectstart.jIEInterdireSelectionTexte2').on('selectstart.jIEInterdireSelectionTexte1', lFunction).on({
                        'selectstart.jIEInterdireSelectionTexte2': lFunctionAutoriser
                    }, '.AvecSelectionTexte');
                }
            };
            $.fn.jIEDesactiverMenuContextuel = function() {
                if (IE.estMobile) {
                    return this;
                }
                return this.off('contextmenu.AvecMenuContextuel1 contextmenu.AvecMenuContextuel2').on('contextmenu.AvecMenuContextuel1', $.fn.jIEDesactiverMenuContextuel.accepteContextMenuNatif).on({
                    'contextmenu.AvecMenuContextuel2': function(event) {
                        event.originalEvent.__marqueurAutoriserMenuContextuel = true;
                        return true;
                    }
                }, '.AvecMenuContextuel');
            };
            $.fn.jIEDesactiverMenuContextuel.accepteContextMenuNatif = function(event) {
                if (event.type !== 'contextmenu') {
                    return false;
                }
                var lName = event.target && event.target.tagName ? event.target.tagName.toLowerCase() : '',
                    lType = event.target.type || '';
                lType = lType.toLowerCase();
                var lInputConcerne = (lName === 'input' && lType !== 'checkbox' && lType !== 'radio' && lType !== 'button') || (lName === 'textarea');
                return (lInputConcerne && !$(event.target).hasClass('SansMenuContextuel')) || (event.originalEvent && event.originalEvent.__marqueurAutoriserMenuContextuel === true) || $(event.target).hasClass('AvecMenuContextuel');
            };
        }(jQuery));
        (function($) {
            $.fn.jIEBracketize = function(aOptions) {
                var lOptions = {
                    genre: 'bracket',
                    style: 'curly',
                    direction: 'left',
                    fontSize: 25,
                    ratio: 0.5,
                    marginBottomMin: 0,
                    forced: false,
                    height: undefined
                };
                $.extend(lOptions, aOptions);
                return this.each(function() {
                    var lHeight = $(this).height();
                    if (lOptions.height) {
                        lHeight = lOptions.height;
                    }
                    if (lHeight < 3 * lOptions.fontSize) {
                        if (!lOptions.forced) {
                            return $(this);
                        } else {
                            lHeight = 3 * lOptions.fontSize;
                        }
                    }
                    var lSymbole = {
                        top: '&#x23a7;',
                        middle: '&#x23a8;',
                        bottom: '&#x23a9;',
                        line: '&#x23aa;'
                    };
                    if (lOptions.genre === 'bracket') {
                        if (lOptions.style === 'curly') {
                            if (lOptions.direction === 'right') {
                                lSymbole = {
                                    top: '&#x23ab;',
                                    middle: '&#x23ac;',
                                    bottom: '&#x23ad;',
                                    line: '&#x23aa;'
                                };
                            }
                        } else if (lOptions.style === 'square') {
                            if (lOptions.direction === 'right') {
                                lSymbole = {
                                    top: '&#x23a4;',
                                    middle: '&#x23a5;',
                                    bottom: '&#x23a6;',
                                    line: '&#x23a5;'
                                };
                            } else if (lOptions.direction === 'left') {
                                lSymbole = {
                                    top: '&#x23a1;',
                                    middle: '&#x23a2;',
                                    bottom: '&#x23a3;',
                                    line: '&#x23a2;'
                                };
                            }
                        }
                    } else if (lOptions.genre === 'parenthesis') {
                        if (lOptions.direction === 'left') {
                            lSymbole = {
                                top: '&#x239b;',
                                middle: '&#x239c;',
                                bottom: '&#x239d;',
                                line: '&#x239c;'
                            };
                        } else if (lOptions.direction === 'right') {
                            lSymbole = {
                                top: '&#x239e;',
                                middle: '&#x239f;',
                                bottom: '&#x23a0;',
                                line: '&#x239f;'
                            };
                        }
                    }
                    var lPositionMiddle = (lHeight * lOptions.ratio) - (lOptions.fontSize / 2);
                    var lHeightLineTop = lPositionMiddle - lOptions.fontSize;
                    var lHeightLineBottom = lHeight - lPositionMiddle - (2 * lOptions.fontSize);
                    var lHtml = [];
                    var i;
                    lHtml.push('<span style="font-size:', lOptions.fontSize, 'px;line-height:', lOptions.fontSize, 'px;">');
                    lHtml.push(lSymbole.top, '<br />');
                    if (lHeightLineTop > 0) {
                        var lNbLineTop = Math.floor(lHeightLineTop / lOptions.fontSize);
                        for (i = 0; i < lNbLineTop; i++) {
                            lHtml.push(lSymbole.line, '<br />');
                        }
                        if (lNbLineTop * lOptions.fontSize < lHeightLineTop) {
                            lHtml.push('<span style="line-height:', (lHeightLineTop % lOptions.fontSize), 'px">', lSymbole.line, '</span><br />');
                        }
                    }
                    lHtml.push(lSymbole.middle, '<br />');
                    if (lHeightLineBottom > 0) {
                        var lNbLineBottom = Math.floor(lHeightLineBottom / lOptions.fontSize);
                        for (i = 0; i < lNbLineBottom; i++) {
                            lHtml.push(lSymbole.line, '<br />');
                        }
                        if (lNbLineBottom * lOptions.fontSize < lHeightLineBottom) {
                            lHtml.push('<span style="line-height:', (lHeightLineBottom % lOptions.fontSize), 'px">', lSymbole.line, '</span><br />');
                        }
                    }
                    lHtml.push(lSymbole.bottom);
                    lHtml.push('</span>');
                    $(this).html(lHtml.join(''));
                    return $(this);
                });
            };
        }(jQuery));
        module.exports = $;
    },
    fn: "jiecheckbox.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var TypeEnsembleNombre = require('TypeEnsembleNombre.js');
        global.GEtatUtilisateur = null;

        function ObjetEtatUtilisateurCP() {
            this.ModeAccessibleActif = false;
            this.EtatSaisie = false;
            this.parametres = {
                ratioFicheEleve: 1
            };
            this.reglesSaisieMotDePasse = {
                min: 0,
                max: 0,
                regles: new TypeEnsembleNombre(),
                init: false
            };
            Invocateur.abonner(ObjetInvocateur.events.etatSaisie, this.setEtatSaisie.bind(this), this);
        }
        ObjetEtatUtilisateurCP.prototype.setEtatSaisie = function(aEtat) {
            this.EtatSaisie = aEtat;
        };
        ObjetEtatUtilisateurCP.prototype.getRatioFicheEleve = function() {
            return this.parametres.ratioFicheEleve;
        };
        ObjetEtatUtilisateurCP.prototype.actualiserRatioFicheEleve = function() {
            this.parametres.ratioFicheEleve = this.parametres.ratioFicheEleve === 1 ? 2 : 1;
            return this.parametres.ratioFicheEleve;
        };
        ObjetEtatUtilisateurCP.prototype.avecO365 = function() {
            return false;
        };
        ObjetEtatUtilisateurCP.prototype.avecImports = function() {
            return false;
        };
        ObjetEtatUtilisateurCP.prototype.avecFicheEtablissement = function() {
            return false;
        };
        ObjetEtatUtilisateurCP.prototype.getModeAccessible = function() {
            return this.ModeAccessibleActif;
        };
        ObjetEtatUtilisateurCP.prototype.setTriListe = function(aParams) {
            var lParams = $.extend({
                liste: null,
                tri: undefined,
                colonnesTriables: true,
                identifiant: 'id',
                onglet: ''
            }, aParams);
            if (!lParams.liste || !lParams.liste.setOptionsListe || !lParams.identifiant || !lParams.colonnesTriables) {
                return;
            }
            if (!this._trisListe_) {
                this._trisListe_ = {};
            }
            var lCle = lParams.onglet + '|' + lParams.identifiant;
            if (!this._trisListe_[lCle]) {
                this._trisListe_[lCle] = lParams.tri;
            }
            var lThis = this;
            aParams.liste.setOptionsListe({
                colonnesTriables: lParams.colonnesTriables,
                numeroColonneTriDefaut: function() {
                    return this._trisListe_[lCle];
                }.bind(this),
                evenementSurTri: function(aColonnesTris) {
                    lThis._trisListe_[lCle] = aColonnesTris;
                }
            });
            return this;
        };
        ObjetEtatUtilisateurCP.prototype.setReglesSaisieMotDePasse = function(aJSON) {
            if (aJSON && aJSON.reglesSaisieMDP) {
                $.extend(this.reglesSaisieMotDePasse, aJSON.reglesSaisieMDP);
                this.reglesSaisieMotDePasse.init = true;
            }
        };
        ObjetEtatUtilisateurCP.prototype.espacesAvecBoutonsTimeLine = function() {
            return true;
        };
        module.exports = ObjetEtatUtilisateurCP;
    },
    fn: "objetetatutilisateurcp.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        function ObjetIdentification(aRessource, aListeRessources) {
            this.ressource = aRessource;
            this.SetListeRessources(aListeRessources);
        }
        ObjetIdentification.prototype.getMembre = function() {
            return this.NumeroEleve ? this.ListeRessources.GetElementParNumero(this.NumeroEleve) : this.ressource;
        };
        ObjetIdentification.prototype.SetListeRessources = function(AListeRessources) {
            this.ListeRessources = AListeRessources;
            this.NumeroEleve = null;
            for (var I = 0;
                (I < this.ListeRessources.GetNbrElements()) && (this.NumeroEleve === null || this.NumeroEleve === undefined); I++) {
                if (this.ListeRessources.GetElement(I).AvecSelection !== false) {
                    this.NumeroEleve = this.ListeRessources.GetNumero(I);
                }
            }
        };
        ObjetIdentification.prototype.GetLibelleClasse = function() {
            var LEleve = this.getMembre();
            return (LEleve && LEleve.Classe) ? LEleve.Classe.GetLibelle() : '';
        };
        ObjetIdentification.prototype.GetNumeroClasse = function() {
            var LEleve = this.getMembre();
            return (LEleve && LEleve.Classe) ? LEleve.Classe.GetNumero() : '';
        };
        ObjetIdentification.prototype.GetLibelleGroupes = function() {
            var LEleve = this.getMembre();
            if (LEleve) {
                var LListeGroupes = LEleve.ListeGroupes;
                var N = !!LListeGroupes ? LListeGroupes.GetNbrElements() : 0;
                var T = [];
                for (var I = 0; I < N; I++) {
                    T.push(LListeGroupes.GetLibelle(I));
                }
                return T.join(', ');
            }
            return '';
        };
        module.exports = ObjetIdentification;
    },
    fn: "objetidentification.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var ObjetElement = require('ObjetElement.js');
        var ObjetListeElements = require('ObjetListeElements.js');

        function ObjetNavigation() {
            this.TableauxRessources = {};
            this.Classe = null;
            this.Groupe = null;
            this.Periode = null;
            this.Eleve = null;
            this.Service = null;
            this.Appreciation = null;
            this.avecCoursAnnule = true;
            this.Niveau = -1;
            this.NumeroMatiereCahierDeTextes = 0;
            this.afficherFicheService = true;
            this.triDevoirs = false;
        }
        ObjetNavigation.prototype.SetRessource = function(AGenreRessource, AParametre, ANumero, AGenre) {
            if (AParametre instanceof ObjetListeElements) {
                this.TableauxRessources[AGenreRessource] = MethodesObjet.dupliquer(AParametre);
            } else if (MethodesObjet.isObject(AParametre)) {
                this.TableauxRessources[AGenreRessource] = new ObjetListeElements().AddElement(MethodesObjet.dupliquer(AParametre));
            } else {
                this.TableauxRessources[AGenreRessource] = new ObjetListeElements().AddElement(new ObjetElement(AParametre, ANumero, AGenre));
            }
        };
        ObjetNavigation.prototype.GetRessource = function(AGenreRessource) {
            return this.TableauxRessources[AGenreRessource] ? this.TableauxRessources[AGenreRessource].GetElement(0) : null;
        };
        ObjetNavigation.prototype.getRessources = function(AGenreRessource) {
            return this.TableauxRessources[AGenreRessource];
        };
        ObjetNavigation.prototype.GetNumeroRessource = function(AGenreRessource) {
            return this.GetRessource(AGenreRessource) ? this.GetRessource(AGenreRessource).GetNumero() : null;
        };
        ObjetNavigation.prototype.GetGenreRessource = function(AGenreRessource) {
            return this.GetRessource(AGenreRessource) ? this.GetRessource(AGenreRessource).GetGenre() : null;
        };
        ObjetNavigation.prototype.GetLibelleRessource = function(AGenreRessource) {
            return this.GetRessource(AGenreRessource) ? this.GetRessource(AGenreRessource).GetLibelle() : null;
        };
        module.exports = ObjetNavigation;
    },
    fn: "objetnavigation.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GChaine = require('GChaine.js');
        var GHtml = require('GHtml.js');
        var GTraductions = require('ObjetTraduction.js');
        var TUtilitaireUrl = (function() {
            return {
                construireListeUrls: function(aParams) {
                    var lParams = Object.assign({
                        liste: null,
                        genreFiltre: null,
                        genreRessource: TUtilitaireUrl.genreRessourceDefault,
                        avecLien: true,
                        separateur: ', ',
                        IEModelBtnSupp: '',
                        argsControleur: null,
                        maxWidth: 0
                    }, aParams);
                    if (!lParams.liste || !lParams.liste.parcourir) {
                        return '';
                    }
                    var T = [],
                        lLibelle, lBtnSupp;
                    lParams.liste.parcourir(function(aElement, aIndex) {
                        if (aElement.Existe()) {
                            if (lParams.genreFiltre === null || lParams.genreFiltre === undefined || (aElement.GetGenre() === lParams.genreFiltre)) {
                                lBtnSupp = '';
                                if (lParams.IEModelBtnSupp) {
                                    lBtnSupp = '<ie-btnimage class="Image_CroixFermer InlineBlock AlignementMilieuVertical"' +
                                        GHtml.composeAttr('ie-model', lParams.IEModelBtnSupp, Array.isArray(lParams.argsControleur) ? [aIndex].concat(lParams.argsControleur) : [aIndex]) + ' style="width:16px; margin-left:3px;"' + ' title="' + GChaine.toTitle(GTraductions.getValeur('selecteurPJ.supprimerDocument')) + '">' + '</ie-btnimage>';
                                }
                                var lObjURL = {
                                    documentJoint: aElement,
                                    genreRessource: lParams.genreRessource,
                                    maxWidth: lParams.maxWidth
                                };
                                if (aElement.hint) {
                                    lObjURL.title = aElement.hint;
                                }
                                lLibelle = GChaine.composerUrlLienExterne(lObjURL);
                                T.push(lLibelle + lBtnSupp);
                            }
                        }
                    });
                    return T.join(lParams.separateur);
                },
                genreRessourceDefault: null
            };
        }());
        module.exports = TUtilitaireUrl;
    },
    fn: "utilitaireurl.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeGenreObservationVS = {
            OVS_DefautCarnet: 0,
            OVS_ObservationParent: 1,
            OVS_Encouragement: 2,
            OVS_Autres: 3
        };
        module.exports.TypeGenreObservationVS = TypeGenreObservationVS;
    },
    fn: "typegenreobservationvs.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeGenrePunition = {
            GP_ExclusionCours: 0,
            GP_Retenues: 1,
            GP_Devoir: 2,
            GP_Autre: 3
        };
        module.exports.TypeGenrePunition = TypeGenrePunition;
    },
    fn: "typegenrepunition.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GTraductions = require('ObjetTraduction.js');
        var TUtilitaireUrl = require('UtilitaireUrl.js');
        var EGenreEspace = require('Enumere_Espace.js');
        var TypeGenreObservationVS = require('TypeGenreObservationVS.js').TypeGenreObservationVS;
        var TypeGenrePunition = require('TypeGenrePunition.js').TypeGenrePunition;
        var EGenreRessource = {
            Aucune: 0,
            Classe: 1,
            Groupe: 2,
            Enseignant: 3,
            Eleve: 4,
            Responsable: 5,
            Niveau: 6,
            Orientation: 7,
            Specialite: 8,
            OptionSpecialite: 9,
            Etablissement: 10,
            Periode: 11,
            Service: 12,
            Absence: 13,
            Retard: 14,
            Exclusion: 15,
            Matiere: 16,
            Salle: 17,
            CoEnseignant: 18,
            Suivis: 19,
            Cours: 20,
            Infirmerie: 21,
            AbsenceRepas: 22,
            Pilier: 23,
            ElementPilier: 24,
            Competence: 25,
            _DisciplineBrevet: 26,
            Palier: 27,
            SousItem: 28,
            Evaluation: 29,
            Stage: 30,
            SousMatiere: 31,
            MaitreDeStage: 32,
            InspecteurPedagogique: 33,
            Personnel: 34,
            EvaluationHistorique: 35,
            DossierProgression: 36,
            ContenuDeCours: 37,
            TravailAFaire: 38,
            Progression: 39,
            Dispense: 40,
            Punition: 41,
            Sanction: 42,
            Communication: 43,
            AbsenceInternat: 44,
            Observation: 45,
            ObservationProfesseurEleve: 46,
            ConvocationVS: 47,
            DocumentJoint: 48,
            InternetCategorie: 49,
            DocJointEtablissement: 50,
            Option: 51,
            ProgrammationPunition: 52,
            ReportPunition: 53,
            DisciplineLivretScolaire: 54,
            QCM: 55,
            ExecutionQCM: 56,
            QCMEditeur: 57,
            PartieDeClasse: 58,
            DocJointEleve: 59,
            Devoir: 60,
            InternetEnumere: 61,
            AppreciationBulletinCompetence: 62,
            Entreprise: 63,
            DomaineProfessionnel: 64,
            OffreDeStage: 65,
            SujetDeStage: 66,
            DocumentCasier: 67,
            Message: 68,
            PossessionMessage: 69,
            RelationMessageDocJointEtablissement: 70,
            Engagement: 71,
            MesureConservatoire: 72,
            SousCategorieObjetDossier: 73,
            Incident: 74,
            ProtagonisteIncident: 75,
            RelationIncidentFichierExterne: 76,
            RegimeEleve: 77,
            RepasAPreparer: 78,
            SessionDeStage: 79,
            Materiel: 80,
            Bourse: 81,
            RelationTravailAFaireEleve: 82,
            LieuDossier: 83,
            ElementProgramme: 84,
            ChapitreEltPgm: 85,
            EltPgmTravailleCDT: 86,
            Appreciation: 87,
            ExecutionDevoirKiosque: 88,
            PanierRessourceKiosque: 89,
            RessourceNumeriqueKiosque: 90,
            MetaMatiere: 91,
            EvaluationSujet: 92,
            EvaluationCorrige: 93,
            LibelleCours: 94,
            Site: 95,
            QuestionQCM: 96,
            RelationElevePilierDeCompetence: 97
        };
        EGenreRessource.correspondAuGenreUtilisateurEspaceCourant = function(aGenre) {
            switch (GEtatUtilisateur.GenreEspace) {
                case EGenreEspace.Academie:
                    return (aGenre === EGenreRessource.InspecteurPedagogique);
                case EGenreEspace.Eleve:
                case EGenreEspace.Mobile_Eleve:
                case EGenreEspace.PrimEleve:
                case EGenreEspace.Mobile_PrimEleve:
                    return (aGenre === EGenreRessource.Eleve);
                case EGenreEspace.Entreprise:
                    return (aGenre === EGenreRessource.MaitreDeStage);
                case EGenreEspace.Etablissement:
                    return (aGenre === EGenreRessource.Personnel);
                case EGenreEspace.Parent:
                case EGenreEspace.Mobile_Parent:
                case EGenreEspace.PrimParent:
                case EGenreEspace.Mobile_PrimParent:
                    return (aGenre === EGenreRessource.Responsable);
                case EGenreEspace.Accompagnant:
                case EGenreEspace.Mobile_Accompagnant:
                case EGenreEspace.PrimAccompagnant:
                case EGenreEspace.Mobile_PrimAccompagnant:
                    return (aGenre === EGenreRessource.Personnel);
                case EGenreEspace.Professeur:
                case EGenreEspace.Mobile_Professeur:
                case EGenreEspace.PrimProfesseur:
                case EGenreEspace.Mobile_PrimProfesseur:
                    return (aGenre === EGenreRessource.Enseignant);
                case EGenreEspace.Administrateur:
                case EGenreEspace.Mobile_Administrateur:
                    return (aGenre === EGenreRessource.Personnel);
                default:
                    return false;
            }
        };
        EGenreRessource.getNiveauDeploiementCompetence = function(aCompetence) {
            switch (aCompetence.GetGenre()) {
                case EGenreRessource.Pilier:
                    return 4;
                case EGenreRessource.ElementPilier:
                    return 3;
                case EGenreRessource.Competence:
                    return 2;
                case EGenreRessource.SousItem:
                    return 1;
                case EGenreRessource.Evaluation:
                case EGenreRessource.EvaluationHistorique:
                    return 0;
            }
        };
        EGenreRessource.getGenrePereCompetence = function(aGenre, aGenrePourEvaluation) {
            switch (aGenre) {
                case EGenreRessource.ElementPilier:
                    return null;
                case EGenreRessource.Competence:
                    return EGenreRessource.ElementPilier;
                case EGenreRessource.SousItem:
                    return EGenreRessource.Competence;
                case EGenreRessource.Evaluation:
                    return aGenrePourEvaluation;
            }
        };
        EGenreRessource.getNiveauDeploiementSelectionQCM = function(aObjet) {
            switch (aObjet.GetGenre()) {
                case EGenreRessource.Matiere:
                    return 3;
                case EGenreRessource.Niveau:
                    return 2;
                case EGenreRessource.QCM:
                    return 1;
                case EGenreRessource.Aucune:
                    return 0;
            }
        };
        EGenreRessource.getNomImageAbsence = function(aObjet) {
            switch (aObjet.genre) {
                case EGenreRessource.ObservationProfesseurEleve:
                    switch (aObjet.genreObservation) {
                        case TypeGenreObservationVS.OVS_DefautCarnet:
                            return 'Color_RecapVS_Lue icon_Defaut_de_carnet';
                        case TypeGenreObservationVS.OVS_Autres:
                            if (aObjet.estLue === false) {
                                return 'Color_RecapVS_NonLue icon_asterisk';
                            }
                            return 'Color_RecapVS_Lue icon_asterisk';
                        case TypeGenreObservationVS.OVS_ObservationParent:
                            if (aObjet.estLue === false) {
                                return 'Color_RecapVS_NonLue icon_observation';
                            }
                            return 'Color_RecapVS_Lue icon_observation';
                        case TypeGenreObservationVS.OVS_Encouragement:
                            if (aObjet.estLue === false) {
                                return 'Color_RecapVS_NonLue icon_smile';
                            }
                            return 'Color_RecapVS_Lue icon_smile';
                        default:
                            return '';
                    }
                    case EGenreRessource.Absence:
                        if (aObjet.justifie === false) {
                            return 'Color_RecapVS_NonLue icon_absences';
                        }
                        return 'Color_RecapVS_Lue icon_absences';
                    case EGenreRessource.AbsenceRepas:
                        return 'Color_RecapVS_Lue icon_food';
                    case EGenreRessource.AbsenceInternat:
                        return 'Color_RecapVS_Lue icon_internat';
                    case EGenreRessource.Retard:
                        return 'Color_RecapVS_Lue icon_retard';
                    case EGenreRessource.Infirmerie:
                        return 'Color_RecapVS_Lue icon_f0fe';
                    case EGenreRessource.Incident:
                        return 'Color_RecapVS_Lue icon_incident';
                    case EGenreRessource.Exclusion:
                        return 'Color_RecapVS_Lue icon_punition_exclusion';
                    case EGenreRessource.Punition:
                        if (aObjet.estProgrammation) {
                            return 'Color_RecapVS_Lue icon_recap_vs_programmation';
                        }
                        switch (aObjet.genreNature) {
                            case TypeGenrePunition.GP_ExclusionCours:
                                return 'Color_RecapVS_Lue icon_punition_exclusion';
                            case TypeGenrePunition.GP_Retenues:
                            case TypeGenrePunition.GP_Devoir:
                            case TypeGenrePunition.GP_Autre:
                                return 'Color_RecapVS_Lue icon_punition';
                            default:
                                return 'Color_RecapVS_Lue icon_punition';
                        }
                        case EGenreRessource.Sanction:
                            if (aObjet.avecSursis === true) {
                                return 'Color_RecapVS_Lue icon_legal';
                            }
                            return 'Color_RecapVS_Lue icon_legal';
                        case EGenreRessource.MesureConservatoire:
                            return 'Color_RecapVS_Lue icon_mesure_conservatoire';
            }
            return '';
        };
        EGenreRessource.getPositionAbsence = function(aObjet) {
            var lResult = 0;
            switch (aObjet.genre) {
                case EGenreRessource.ObservationProfesseurEleve:
                    switch (aObjet.genreObservation) {
                        case TypeGenreObservationVS.OVS_ObservationParent:
                            lResult = 0;
                            break;
                        case TypeGenreObservationVS.OVS_Encouragement:
                            lResult = 1;
                            break;
                        case TypeGenreObservationVS.OVS_DefautCarnet:
                            lResult = 2;
                            break;
                        case TypeGenreObservationVS.OVS_Autres:
                            lResult = 60;
                            break;
                        default:
                            ;
                            lResult = 60;
                            break;
                    }
                    break;
                case EGenreRessource.Absence:
                    lResult = 10;
                    break;
                case EGenreRessource.AbsenceRepas:
                    lResult = 12;
                    break;
                case EGenreRessource.AbsenceInternat:
                    lResult = 13;
                    break;
                case EGenreRessource.Retard:
                    lResult = 21;
                    break;
                case EGenreRessource.Infirmerie:
                    lResult = 20;
                    break;
                case EGenreRessource.Incident:
                    lResult = 25;
                    break;
                case EGenreRessource.Exclusion:
                    ;
                    lResult = 30;
                    break;
                case EGenreRessource.Punition:
                    lResult = 30;
                    break;
                case EGenreRessource.MesureConservatoire:
                    lResult = 40;
                    break;
                case EGenreRessource.Sanction:
                    lResult = 50;
                    break;
                default:
                    lResult = 9999;
                    break;
            }
            return lResult;
        };
        EGenreRessource.getTitreFenetreSelectionRessource = function(aGenre) {
            switch (aGenre) {
                case EGenreRessource.Eleve:
                    return GTraductions.getValeur('Fenetre_SelectionRessource.CocherEleves');
                case EGenreRessource.Enseignant:
                    return GTraductions.getValeur('Fenetre_SelectionRessource.CocherProfesseurs');
                case EGenreRessource.Responsable:
                    return GTraductions.getValeur('Fenetre_SelectionRessource.CocherResponsables');
                case EGenreRessource.Personnel:
                    return GTraductions.getValeur('Fenetre_SelectionRessource.CocherPersonnel');
                case EGenreRessource.MaitreDeStage:
                    return GTraductions.getValeur('Fenetre_SelectionRessource.CocherMaitresDeStage');
                case EGenreRessource.InspecteurPedagogique:
                    return GTraductions.getValeur('Fenetre_SelectionRessource.CocherInspecteurs');
                case EGenreRessource.Periode:
                    return GTraductions.getValeur('Fenetre_SelectionRessource.CocherPeriodes');
                default:
                    return null;
            }
        };
        TUtilitaireUrl.genreRessourceDefault = EGenreRessource.DocumentJoint;
        module.exports = EGenreRessource;
    },
    fn: "enumere_ressource.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreConnexion = {
            Normale: 0,
            Allegee: 1
        };
        module.exports = EGenreConnexion;
    },
    fn: "enumere_connexion.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetEtatUtilisateurCP = require('ObjetEtatUtilisateurCP.js');
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var ObjetElement = require('ObjetElement.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var GChaine = require('GChaine.js');
        var ObjetTri = require('ObjetTri.js').ObjetTri;
        var ObjetIdentification = require('ObjetIdentification.js');
        var GTraductions = require('ObjetTraduction.js');
        var ObjetNavigation = require('ObjetNavigation.js');
        var EGenreRessource = require('Enumere_Ressource.js');
        var EGenreEspace = require('Enumere_Espace.js');
        var EGenreOnglet = require('Enumere_Onglet.js');
        var EGenreConnexion = require('enumere_connexion.js');
        var TypeDroits = require('ObjetDroitsPN.js').TypeDroits;

        function ObjetEtatUtilisateur(aGenreEspace) {
            this.inheritedCreate();
            this.GenreEspace = aGenreEspace;
            this.Navigation = new ObjetNavigation();
            this.genreOnglet = null;
            this.o365 = {
                compteActif: false,
                upn: ''
            };
        }
        MethodesObjet.heritagePrototype(ObjetEtatUtilisateur, ObjetEtatUtilisateurCP);
        ObjetEtatUtilisateur.prototype.initAuthentification = function(aParam) {
            this.avecRessourcesGranulaire = aParam.avecRessourcesGranulaire;
            this.avecRessourcesRenduTAF = aParam.avecRessourcesRenduTAF;
            this.avecRessourcesEnvoiNote = aParam.avecRessourcesEnvoiNote;
            this.activerKiosqueRenduTAF = aParam.activerKiosqueRenduTAF && !this.pourPrimaire();
            this.activerKiosqueEnvoiNote = aParam.activerKiosqueEnvoiNote && !this.pourPrimaire();
            if (aParam.messagesDyn) {
                GApplication.donneesCentraleNotifications.addMessagesDynamiques(aParam.messagesDyn);
            }
            this.listeRessourcesRecherche = aParam.listeRessourcesRecherche;
            this.deserialiserOnglets(aParam);
            this.deserialiserRessources(aParam);
            this.deserialiserInfosSupp(aParam);
            this.deserialiserO365(aParam);
            this.deserialiserPage(aParam);
            this.setReglesSaisieMotDePasse(aParam);
        };
        ObjetEtatUtilisateur.prototype.deserialiserOnglets = function(aParam) {
            var i;
            this.listeOngletsInvisibles = aParam.listeOngletsInvisibles;
            this.listeGenreOngletsNotification = aParam.listeOngletsNotification;
            if (aParam.listeOnglets) {
                this.listeOnglets = new ObjetListeElements();
                this.listeOngletsNotification = new ObjetListeElements();
                for (i = 0; i < aParam.listeOnglets.length; i++) {
                    _ajouterOnglet.call(this, aParam.listeOnglets[i], 0, null);
                }
            }
        };

        function _ajouterOnglet(aJSON, aProfondeur, aOngletPere) {
            var lOnglet = new ObjetElement().fromJSON(aJSON);
            if (this.listeOngletsInvisibles && MethodesTableau.existe(lOnglet.GetGenre(), this.listeOngletsInvisibles)) {
                lOnglet.Actif = false;
            }
            lOnglet.Libelle = GChaine.ToHTML(GTraductions.getValeur('Onglet.Libelle')[lOnglet.GetGenre()]);
            lOnglet.libelleLong = GTraductions.getValeur('Onglet.LibelleLong')[lOnglet.GetGenre()] !== ' ' ? GTraductions.getValeur('Onglet.LibelleLong')[lOnglet.GetGenre()] : lOnglet.Libelle;
            if (lOnglet.Actif !== false && this.listeGenreOngletsNotification && MethodesTableau.existe(lOnglet.GetGenre(), this.listeGenreOngletsNotification)) {
                var lElementNotification = MethodesObjet.dupliquer(lOnglet);
                lElementNotification.profondeur = 0;
                lElementNotification.avecClic = true;
                this.listeOngletsNotification.AddElement(lElementNotification);
            }
            lOnglet.profondeur = aProfondeur;
            if (aOngletPere) {
                lOnglet.onglet = aOngletPere;
            }
            this.listeOnglets.AddElement(lOnglet);
            var i, lAvecFilsActifs = false;
            if (aJSON.Onglet) {
                for (i = 0; i < aJSON.Onglet.length; i++) {
                    lAvecFilsActifs = _ajouterOnglet.call(this, aJSON.Onglet[i], aProfondeur + 1, lOnglet) || lAvecFilsActifs;
                }
                if (!lAvecFilsActifs) {
                    lOnglet.Actif = false;
                }
            }
            return lOnglet.Actif;
        }
        ObjetEtatUtilisateur.prototype.deserialiserRessources = function(aJSON) {
            var lRessource = new ObjetElement().fromJSON(aJSON.ressource);
            lRessource.libelleLong = lRessource.GetLibelle();
            if (!!aJSON && !!aJSON.ressource) {
                lRessource.estDelegue = aJSON.ressource.estDelegue;
                lRessource.estMembreCA = aJSON.ressource.estMembreCA;
                lRessource.avecDiscussionResponsables = aJSON.ressource.avecDiscussionResponsables;
                lRessource.listeClassesDelegue = aJSON.ressource.listeClassesDelegue;
            }
            var i;
            var lMembreJSON, lMembre;
            var lListeRessources = new ObjetListeElements();
            if (!!aJSON && !!aJSON.ressource && !!aJSON.ressource.listeRessources) {
                for (i = 0; i < aJSON.ressource.listeRessources.length; i++) {
                    lMembreJSON = aJSON.ressource.listeRessources[i];
                    lMembre = new ObjetElement().fromJSON(lMembreJSON);
                    this._traiterUtilisateur(lMembre, lMembreJSON, aJSON);
                    lListeRessources.AddElement(lMembre);
                }
            } else if (!!aJSON && !!aJSON.ressource && !!aJSON.ressource.listeDisciplines) {
                for (i = 0; i < aJSON.ressource.listeDisciplines.length; i++) {
                    var lDisciplineJSON = aJSON.ressource.listeDisciplines[i];
                    var lDiscipline = new ObjetElement().fromJSON(lDisciplineJSON);
                    lListeRessources.AddElement(lDiscipline);
                    lDiscipline.ClassAffichage = 'Gras';
                    lDiscipline.AvecSelection = false;
                    lDiscipline.estGroupeDeRessource = true;
                    lDiscipline.Numero = 0;
                    if (!!lDisciplineJSON.listeRessources) {
                        for (var j = 0; j < lDisciplineJSON.listeRessources.length; j++) {
                            lMembreJSON = lDisciplineJSON.listeRessources[j];
                            lMembre = new ObjetElement().fromJSON(lMembreJSON);
                            this._traiterUtilisateur(lMembre, lMembreJSON, aJSON);
                            lListeRessources.AddElement(lMembre);
                            lMembre.pere = lDiscipline;
                            lMembre.ClassAffichage = 'GrandEspaceGauche';
                        }
                    }
                }
            } else {
                this._traiterUtilisateur(lRessource, aJSON.ressource, aJSON);
            }
            lListeRessources.setTri([
                ObjetTri.init(function(D) {
                    return (D.Genre === EGenreRessource.Eleve) && D.Classe && D.Classe.existeNumero() ? false : true;
                }), ObjetTri.init(function(D) {
                    return D.pere ? D.pere.GetLibelle() : D.Position > 0 ? D.Position : D.GetLibelle();
                }), ObjetTri.init(function(D) {
                    return !D.estGroupeDeRessource;
                }), ObjetTri.init(function(D) {
                    return D.Position > 0 ? D.Position : D.GetLibelle();
                })
            ]);
            lListeRessources.trier();
            this.SetIdentification(lRessource, lListeRessources);
        };
        ObjetEtatUtilisateur.prototype._traiterUtilisateur = function(aUtilisateur, aUtilisateurJSON, aJSONReponse) {
            if (!!aUtilisateurJSON.listeSessions) {
                aUtilisateur.listeSessionsRencontreDesiderataIndispo = aUtilisateurJSON.listeSessions.getListeElements(function(D) {
                    return D.visibleDesiderataIndispo;
                });
                aUtilisateur.listeSessionsRencontrePlanning = aUtilisateurJSON.listeSessions.getListeElements((function(D) {
                    return D.visiblePlanning;
                }).bind(this));
            }
            if (aUtilisateurJSON.autoriserConnexionIManuel !== undefined) {
                aUtilisateur.autoriserConnexionIManuel = aUtilisateurJSON.autoriserConnexionIManuel;
            }
            if (aUtilisateurJSON.destinatairesCarnetLiaison) {
                aUtilisateur.destinatairesCarnetLiaison = aUtilisateurJSON.destinatairesCarnetLiaison;
                aUtilisateur.destinatairesCarnetLiaison.setTri([ObjetTri.init('Genre'), ObjetTri.init('Libelle')]).trier();
            }
            if (!!aUtilisateurJSON.listeProfesseurs && !!aJSONReponse.listeClasses) {
                aUtilisateur.listeProfesseurs = aUtilisateurJSON.listeProfesseurs;
                aUtilisateur.listeProfesseurs.parcourir(_traiterListeProfesseurs.bind(this, aJSONReponse.listeClasses));
                aUtilisateur.listeProfesseurs.trier();
            }
            if (aUtilisateurJSON.Etablissement !== undefined) {
                aUtilisateur.Etablissement = aUtilisateurJSON.Etablissement;
            }
            if (aUtilisateurJSON.notificationsPush !== undefined) {
                aUtilisateur.notificationsPush = aUtilisateurJSON.notificationsPush;
            }
            if (aUtilisateurJSON.autoriserImage !== undefined) {
                aUtilisateur.autoriserImage = aUtilisateurJSON.autoriserImage;
            }
            aUtilisateur.avecPhoto = !!aUtilisateurJSON.avecPhoto;
            if (this.estEspacePourEleve()) {
                aUtilisateur.Classe = new ObjetElement().fromJSON(aUtilisateurJSON.classeDEleve);
                aUtilisateur.libelleLong = aUtilisateur.GetLibelle();
                if (!!aUtilisateur.Classe && aUtilisateur.Classe.GetLibelle()) {
                    aUtilisateur.libelleLong += ' (' + aUtilisateur.Classe.GetLibelle() + ')';
                }
                if (aUtilisateurJSON.listeClassesHistoriques !== undefined) {
                    aUtilisateur.listeClasseHistorique = aUtilisateurJSON.listeClassesHistoriques;
                }
                if (aUtilisateurJSON.listeGroupes !== undefined) {
                    aUtilisateur.ListeGroupes = aUtilisateurJSON.listeGroupes;
                }
                if (aUtilisateurJSON.autoriserImage !== undefined) {
                    aUtilisateur.autoriserImage = aUtilisateurJSON.autoriserImage;
                }
                aUtilisateur.tableauOnglets = [];
                if (!!aUtilisateurJSON.listeOngletsPourPeriodes) {
                    aUtilisateurJSON.listeOngletsPourPeriodes.parcourir(function(aOnglet) {
                        aUtilisateur.tableauOnglets[aOnglet.GetGenre()] = aOnglet;
                    });
                }
                if (!!aUtilisateurJSON.listeOngletsPourPiliers) {
                    aUtilisateurJSON.listeOngletsPourPiliers.parcourir(function(aOnglet) {
                        aUtilisateur.tableauOnglets[aOnglet.GetGenre()] = aOnglet;
                    });
                }
            }
            if (!!aUtilisateurJSON.acces) {
                aUtilisateur.acces = aUtilisateurJSON.acces;
            }
        };

        function _traiterListeProfesseurs(aListeClasses, aProfesseur) {
            var lArrayClasse = aProfesseur.listeClasses;
            aProfesseur.listeClasses = new ObjetListeElements();
            var lClasse, lClasseCopie, i;
            if (aProfesseur.GetGenre() === 0) {
                aProfesseur.Position = 0;
            }
            if (lArrayClasse) {
                for (i = 0; i < lArrayClasse.length; i++) {
                    lClasse = aListeClasses.GetElement(lArrayClasse[i]);
                    if (lClasse) {
                        lClasseCopie = new ObjetElement(lClasse.GetLibelle(), lClasse.GetNumero(), lClasse.GetGenre());
                        lClasseCopie.estResponsable = lClasse.estResponsable;
                        aProfesseur.listeClasses.AddElement(lClasseCopie);
                    }
                }
            }
        }
        ObjetEtatUtilisateur.prototype.deserialiserInfosSupp = function(aParam) {
            this.infosSupp = {};
            this.urlInstallClient = aParam.UrlInstallClient;
            this.urlParamClient = aParam.UrlParamClient;
            this.designationClient = aParam.designationClient;
            this.listeMotifsAbsences = aParam.listeMotifsAbsences;
            this.listeMotifsRetards = aParam.listeMotifsRetards;
            this.autorisationIManuel = !!aParam.autorisationIManuel;
            this.autorisationKiosque = !!aParam.autorisationKiosque;
            this.autorisationCloud = !!aParam.autorisationCloud;
            this.derniereConnexion = aParam.derniereConnexion;
            this.cloudIndexActif = !!aParam.cloudIndexActif;
            this.avecCloudIndex = !!aParam.avecCloudIndex;
            this.listeCloud = aParam.listeCloud || new ObjetListeElements();
            this.listeClasses = aParam.listeClasses;
            this.listeMatieres = aParam.listeMatieres;
            this.listeNiveaux = aParam.listeNiveaux;
            this.existeCDTsDetaches = aParam.existeCDTsDetaches;
            this.tabEtablissementsModeleGrille = aParam.tabEtablissementsModeleGrille;
            this.listeInformationsEtablissements = aParam.listeInformationsEtablissements;
        };
        ObjetEtatUtilisateur.prototype.deserialiserO365 = function(aParam) {
            var LJO365 = aParam.O365;
            if (LJO365) {
                this.o365.compteActif = LJO365.compteActif;
                this.o365.upn = LJO365.upn;
            }
        };
        ObjetEtatUtilisateur.prototype.deserialiserPage = function(aParam) {
            var lPage = aParam.page;
            if (lPage && this.existeGenreOnglet) {
                lPage.membre = lPage.Membre ? new ObjetElement('', lPage.Membre) : null;
                lPage.periode = new ObjetElement('', lPage.Periode);
                lPage.competence = new ObjetElement('', lPage.Competence);
                lPage.service = new ObjetElement('', lPage.Service);
                if (this.existeGenreOnglet && this.existeGenreOnglet(lPage.Onglet)) {
                    this.setPage(lPage);
                }
            }
        };
        ObjetEtatUtilisateur.prototype.SetIdentification = function(aRessource, aListeRessources) {
            this.Identification = new ObjetIdentification(aRessource, aListeRessources);
            this.Identification.indiceEleve = 0;
            if (this.page && this.page.membre) {
                this.SetNumeroEleve(this.page.membre.GetNumero());
            }
        };
        ObjetEtatUtilisateur.prototype.getUtilisateur = function() {
            return this.Identification.ressource;
        };
        ObjetEtatUtilisateur.prototype.getMembre = function() {
            return this.Identification.getMembre();
        };
        ObjetEtatUtilisateur.prototype.SetNumeroEleve = function(aNumeroEleve) {
            var lIndice = false;
            for (var I = 0; I < this.Identification.ListeRessources.GetNbrElements(); I++) {
                var lEleve = this.Identification.ListeRessources.GetElement(I);
                if (lEleve.GetNumero() === aNumeroEleve) {
                    lIndice = I;
                }
            }
            if (lIndice === false) {
                return;
            }
            this.Identification.indiceEleve = lIndice;
            this.Identification.NumeroEleve = aNumeroEleve;
            this.Navigation.SetRessource(EGenreRessource.Eleve, GEtatUtilisateur.getMembre().GetLibelle(), aNumeroEleve);
            this.Navigation.SetRessource(EGenreRessource.Classe, GEtatUtilisateur.Identification.GetLibelleClasse(), GEtatUtilisateur.Identification.GetNumeroClasse(), EGenreRessource.Classe);
        };
        ObjetEtatUtilisateur.prototype.getClasse = function() {
            return this.listeClasses.GetElementParNumeroEtGenre(this.Navigation.GetNumeroRessource(EGenreRessource.Classe), this.Navigation.GetGenreRessource(EGenreRessource.Classe));
        };
        ObjetEtatUtilisateur.prototype.setClasse = function(aClasse) {
            this.Navigation.SetRessource(EGenreRessource.Classe, aClasse);
        };
        ObjetEtatUtilisateur.prototype.getPage = function() {
            return this.page;
        };
        ObjetEtatUtilisateur.prototype.resetPage = function() {
            this.page = null;
        };
        ObjetEtatUtilisateur.prototype.setPage = function(aPage) {
            this.page = aPage;
            if (this.page && this.page.Onglet > 0) {
                this.setGenreOnglet(this.page.Onglet);
            }
            if (this.page && this.page.ressource !== null && this.page.ressource !== undefined) {
                this.setGenreRessource(this.page.ressource);
            }
        };
        ObjetEtatUtilisateur.prototype.getGenreOnglet = function() {
            return this.genreOnglet;
        };
        ObjetEtatUtilisateur.prototype.setGenreOnglet = function(aGenreOnglet) {
            this.genreOnglet = aGenreOnglet;
        };
        ObjetEtatUtilisateur.prototype.estModeAccessible = function() {
            return this.ModeAccessibleActif;
        };
        ObjetEtatUtilisateur.prototype.setModeAccessible = function(aActif) {
            this.ModeAccessibleActif = aActif;
            if (IE.optionsEspaceLocal) {
                IE.optionsEspaceLocal.setModeAccessible(aActif);
            }
        };
        ObjetEtatUtilisateur.prototype.existeGenreOnglet = function(aGenreOnglet) {
            var lGenreOnglet = this.listeOnglets.GetElementParGenre(aGenreOnglet);
            return lGenreOnglet && lGenreOnglet.Actif;
        };
        ObjetEtatUtilisateur.prototype.getEtablissement = function() {
            if (MethodesTableau.existe(this.GenreEspace, [
                    EGenreEspace.Parent, EGenreEspace.Mobile_Parent, EGenreEspace.PrimParent, EGenreEspace.Mobile_PrimParent, EGenreEspace.Accompagnant, EGenreEspace.Mobile_Accompagnant, EGenreEspace.PrimAccompagnant, EGenreEspace.Mobile_PrimAccompagnant, EGenreEspace.Entreprise, EGenreEspace.Academie
                ])) {
                return !!GEtatUtilisateur.getMembre().Etablissement ? this.listeInformationsEtablissements.GetElementParNumero(GEtatUtilisateur.getMembre().Etablissement.GetNumero()) : null;
            } else {
                return !!GEtatUtilisateur.getUtilisateur().Etablissement ? this.listeInformationsEtablissements.GetElementParNumero(GEtatUtilisateur.getUtilisateur().Etablissement.GetNumero()) : null;
            }
        };
        ObjetEtatUtilisateur.prototype.ongletEstVisible = function() {
            return false;
        };
        ObjetEtatUtilisateur.prototype.desactiverPageAccueil = function() {
            this.sansPageAccueil = true;
        };
        ObjetEtatUtilisateur.prototype.avecPageAccueil = function() {
            if (this.sansPageAccueil) {
                return false;
            }
            var lOnglet = this.listeOnglets.GetElementParGenre(EGenreOnglet.Accueil);
            return MethodesTableau.existe(this.GenreEspace, [
                EGenreEspace.Parent, EGenreEspace.Mobile_Parent, EGenreEspace.Eleve, EGenreEspace.Mobile_Eleve, EGenreEspace.Professeur, EGenreEspace.Mobile_Professeur, EGenreEspace.Etablissement, EGenreEspace.Mobile_Etablissement, EGenreEspace.Administrateur, EGenreEspace.Mobile_Administrateur, EGenreEspace.PrimProfesseur, EGenreEspace.Mobile_PrimProfesseur, EGenreEspace.PrimParent, EGenreEspace.Mobile_PrimParent, EGenreEspace.PrimEleve, EGenreEspace.Mobile_PrimEleve, EGenreEspace.Accompagnant, EGenreEspace.Mobile_Accompagnant, EGenreEspace.PrimAccompagnant, EGenreEspace.Mobile_PrimAccompagnant
            ]) && lOnglet && lOnglet.Actif;
        };
        ObjetEtatUtilisateur.prototype.estOngletActif = function(aGenreOnglet) {
            var lOnglet = this.listeOnglets.GetElementParGenre(aGenreOnglet);
            return lOnglet ? lOnglet.Actif : false;
        };
        ObjetEtatUtilisateur.prototype.espacesAvecBoutonsTimeLine = function() {
            return MethodesTableau.existe(this.GenreEspace, [EGenreEspace.Professeur, EGenreEspace.PrimProfesseur, EGenreEspace.PrimParent, EGenreEspace.PrimAccompagnant, EGenreEspace.PrimEleve, EGenreEspace.Administrateur]);
        };
        ObjetEtatUtilisateur.prototype.avecO365 = function() {
            return GParametres.avecO365 && MethodesTableau.existe(this.GenreEspace, [EGenreEspace.Eleve, EGenreEspace.Professeur, EGenreEspace.Etablissement]) && (this.o365.compteActif === true) && this.genreConnexion === EGenreConnexion.Normale;
        };
        ObjetEtatUtilisateur.prototype.estEspacePourEleve = function() {
            return MethodesTableau.existe(GEtatUtilisateur.GenreEspace, [
                EGenreEspace.Parent, EGenreEspace.Mobile_Parent, EGenreEspace.Eleve, EGenreEspace.Mobile_Eleve, EGenreEspace.Entreprise, EGenreEspace.PrimParent, EGenreEspace.Mobile_PrimParent, EGenreEspace.PrimEleve, EGenreEspace.Mobile_PrimEleve, EGenreEspace.Accompagnant, EGenreEspace.Mobile_Accompagnant, EGenreEspace.PrimAccompagnant, EGenreEspace.Mobile_PrimAccompagnant
            ]);
        };
        ObjetEtatUtilisateur.prototype.estEspaceEleve = function() {
            return MethodesTableau.existe(GEtatUtilisateur.GenreEspace, [
                EGenreEspace.Eleve, EGenreEspace.Mobile_Eleve, EGenreEspace.PrimEleve, EGenreEspace.Mobile_PrimEleve
            ]);
        };
        ObjetEtatUtilisateur.prototype.estEspacePourProf = function() {
            return MethodesTableau.existe(GEtatUtilisateur.GenreEspace, [
                EGenreEspace.Professeur, EGenreEspace.Mobile_Professeur, EGenreEspace.Academie
            ]);
        };
        ObjetEtatUtilisateur.prototype.estEspaceMobile = function() {
            return MethodesTableau.existe(GEtatUtilisateur.GenreEspace, [
                EGenreEspace.Mobile_Administrateur, EGenreEspace.Mobile_Commun, EGenreEspace.Mobile_Professeur, EGenreEspace.Mobile_Eleve, EGenreEspace.Mobile_Etablissement, EGenreEspace.Mobile_Parent, EGenreEspace.Mobile_PrimParent, EGenreEspace.Mobile_PrimEleve, EGenreEspace.Mobile_PrimProfesseur, EGenreEspace.Mobile_Accompagnant, EGenreEspace.Mobile_PrimAccompagnant
            ]);
        };
        ObjetEtatUtilisateur.prototype.estEspaceAvecMembre = function() {
            return GParametres.avecMembre;
        };
        ObjetEtatUtilisateur.prototype.pourPrimaire = function() {
            return MethodesTableau.existe(this.GenreEspace, [
                EGenreEspace.PrimProfesseur, EGenreEspace.Mobile_PrimProfesseur, EGenreEspace.PrimParent, EGenreEspace.Mobile_PrimParent, EGenreEspace.PrimEleve, EGenreEspace.Mobile_PrimEleve, EGenreEspace.PrimAccompagnant, EGenreEspace.Mobile_PrimAccompagnant
            ]);
        };
        ObjetEtatUtilisateur.prototype.pourThemePrimaire = function() {
            return MethodesTableau.existe(this.GenreEspace, [
                EGenreEspace.PrimParent, EGenreEspace.PrimEleve, EGenreEspace.Mobile_PrimParent, EGenreEspace.Mobile_PrimEleve, EGenreEspace.PrimAccompagnant, EGenreEspace.Mobile_PrimAccompagnant
            ]);
        };
        ObjetEtatUtilisateur.prototype.getListeClasses = function(aParams) {
            if (GApplication.droits.get(TypeDroits.eleves.voirTousLesEleves) && !GApplication.parametresUtilisateur.get('masquerDonneesAutresProfesseurs')) {
                aParams.uniquementClasseEnseignee = false;
            }
            var lListeClasses = new ObjetListeElements(),
                lRecupererClasse = false;
            if (aParams.avecToutes) {
                lListeClasses.AddElement(new ObjetElement(GTraductions.getValeur('toutes'), 0));
            }
            for (var I = 0; I < this.listeClasses.GetNbrElements(); I++) {
                var lClasse = this.listeClasses.GetElement(I);
                if ((aParams.avecClasse && (lClasse.GetGenre() === EGenreRessource.Classe)) || (aParams.avecGroupe && (lClasse.GetGenre() === EGenreRessource.Groupe))) {
                    lRecupererClasse = true;
                    if (aParams.uniquementClassePrincipal) {
                        lRecupererClasse = lClasse.estPrincipal;
                    } else if (aParams.uniquementClasseEnseignee) {
                        lRecupererClasse = lClasse.estResponsable || lClasse.enseigne;
                    }
                    if (aParams.sansClasseDeRegroupement && lClasse.dansRegroupement) {
                        lRecupererClasse = false;
                    }
                    if (lRecupererClasse) {
                        lListeClasses.AddElement(lClasse);
                        if (aParams.avecGroupeEtClasseDeRegroupement && lClasse.listeComposantes) {
                            var lComposante;
                            for (var j = 0; j < lClasse.listeComposantes.GetNbrElements(); j++) {
                                lComposante = lClasse.listeComposantes.GetElement(j);
                                lListeClasses.AddElement(lComposante);
                            }
                        }
                    }
                }
            }
            return lListeClasses;
        };
        module.exports = ObjetEtatUtilisateur;
    },
    fn: "objetetatutilisateur.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GDate = require('ObjetDate.js').GDate;
        var ObjetEtatUtilisateur = require('ObjetEtatUtilisateur.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var EGenreRessource = require('Enumere_Ressource.js');
        var ObjetTri = require('ObjetTri.js').ObjetTri;
        var TypeDroits = require('ObjetDroitsPN.js').TypeDroits;
        var MethodesTableau = require('MethodesTableau.js');
        var EGenreEspace = require('Enumere_Espace.js');

        function ObjetEtatUtilisateur_Mobile(AGenreEspace) {
            this.inheritedCreate(AGenreEspace);
            this.historiqueNavigation = [];
            this.derniereDate = null;
        }
        MethodesObjet.heritagePrototype(ObjetEtatUtilisateur_Mobile, ObjetEtatUtilisateur);
        ObjetEtatUtilisateur_Mobile.prototype.Initialiser = function() {
            this.historiqueNavigation = [];
        };
        ObjetEtatUtilisateur_Mobile.prototype.getOngletInfosPeriodes = function() {
            return this.Identification.getMembre().tableauOnglets[this.genreOnglet];
        };
        ObjetEtatUtilisateur_Mobile.prototype.getListeClasses = function(aParams) {
            if (GApplication.droits.get(TypeDroits.eleves.voirTousLesEleves) && !GApplication.parametresUtilisateur.get('masquerDonneesAutresProfesseurs')) {
                aParams.uniquementClasseEnseignee = false;
            }
            var lAvecClasse = aParams.avecClasse;
            var lAvecGroupe = aParams.avecGroupe;
            var lSeuleMesClasses = aParams.uniquementClasseEnseignee;
            var result = new ObjetListeElements();
            var lListeClasses;
            if (!!this.listeClasses) {
                lListeClasses = this.listeClasses;
            } else if (!!this.Identification && !!this.Identification.getMembre()) {
                lListeClasses = this.Identification.getMembre().listeClasses;
            }
            if (!!lListeClasses) {
                var _EGenreClasse = {
                    principal: 0,
                    enseigne: 1,
                    autre: 2
                };
                lListeClasses.parcourir(function(aClasse) {
                    if (aClasse.estPrincipal) {
                        aClasse.genreClasse = _EGenreClasse.principal;
                    } else if (aClasse.enseigne) {
                        aClasse.genreClasse = _EGenreClasse.enseigne;
                    } else {
                        aClasse.genreClasse = _EGenreClasse.autre;
                    }
                    var lAccepteClasse = (lAvecClasse && (aClasse.GetGenre() === EGenreRessource.Classe)) || (lAvecGroupe && (aClasse.GetGenre() === EGenreRessource.Groupe));
                    if (lAccepteClasse) {
                        lAccepteClasse = (!lSeuleMesClasses || !!aClasse.estResponsable || !!aClasse.enseigne);
                    }
                    if (aParams.sansClasseDeRegroupement && aClasse.dansRegroupement) {
                        lAccepteClasse = false;
                    }
                    if (lAccepteClasse) {
                        result.AddElement(aClasse);
                    }
                });
            }
            result.setTri([
                ObjetTri.init(function(D) {
                    return D.genreClasse;
                }), ObjetTri.init(function(D) {
                    return D.GetNumero() !== -1;
                }), ObjetTri.init('Libelle')
            ]);
            result.trier();
            return result;
        };
        ObjetEtatUtilisateur_Mobile.prototype.getDerniereDate = function() {
            if (this.derniereDate === null || this.derniereDate === undefined) {
                return GDate.getDateCourante();
            } else {
                return this.derniereDate;
            }
        };
        ObjetEtatUtilisateur_Mobile.prototype.setDerniereDate = function(aDate) {
            this.derniereDate = aDate;
        };
        ObjetEtatUtilisateur_Mobile.prototype.setGenreAffichage = function(aGenreAff) {
            this.genreAffichage = aGenreAff;
        };
        ObjetEtatUtilisateur_Mobile.prototype.getGenreAffichage = function() {
            return this.genreAffichage;
        };
        ObjetEtatUtilisateur_Mobile.prototype.setPeriodePourReleve = function(aPeriode) {
            this.periodePourReleve = aPeriode;
        };
        ObjetEtatUtilisateur_Mobile.prototype.getPeriodePourReleve = function() {
            return this.periodePourReleve;
        };
        ObjetEtatUtilisateur_Mobile.prototype.setPeriodePourBulletin = function(aPeriode) {
            this.periodePourBulletin = aPeriode;
        };
        ObjetEtatUtilisateur_Mobile.prototype.getPeriodePourBulletin = function() {
            return this.periodePourBulletin;
        };
        ObjetEtatUtilisateur_Mobile.prototype.setNavigationDate = function(aDate) {
            this.historiqueNavigation['Date'] = aDate;
        };
        ObjetEtatUtilisateur_Mobile.prototype.getNavigationDate = function() {
            return !!this.historiqueNavigation['Date'] ? this.historiqueNavigation['Date'] : false;
        };
        ObjetEtatUtilisateur_Mobile.prototype.setNavigationCours = function(aCours) {
            this.historiqueNavigation['Cours'] = aCours;
        };
        ObjetEtatUtilisateur_Mobile.prototype.getNavigationCours = function() {
            return !!this.historiqueNavigation['Cours'] ? this.historiqueNavigation['Cours'] : false;
        };
        ObjetEtatUtilisateur_Mobile.prototype.getNavigationTableauDeBord = function() {
            return this.historiqueNavigation['TableauDeBord'];
        };
        ObjetEtatUtilisateur_Mobile.prototype.setNavigationTableauDeBord = function(aObjet) {
            this.historiqueNavigation['TableauDeBord'] = aObjet;
        };
        ObjetEtatUtilisateur_Mobile.prototype.avecFicheEtablissement = function() {
            var lEtablissement, lAvecInfo = false;
            if (this.listeInformationsEtablissements) {
                if (MethodesTableau.existe(GEtatUtilisateur.GenreEspace, [EGenreEspace.Mobile_Parent, EGenreEspace.Mobile_Accompagnant, EGenreEspace.Mobile_PrimParent, EGenreEspace.Mobile_PrimAccompagnant])) {
                    if (!!this.getMembre().Etablissement) {
                        lEtablissement = this.listeInformationsEtablissements.GetElementParNumero(this.getMembre().Etablissement.GetNumero());
                        if (!!lEtablissement && lEtablissement.avecInformations) {
                            lAvecInfo = true;
                        }
                    }
                } else {
                    for (var i = 0, lNbr = this.listeInformationsEtablissements.GetNbrElements(); i < lNbr; i++) {
                        lEtablissement = this.listeInformationsEtablissements.GetElement(i);
                        if (lEtablissement.avecInformations) {
                            lAvecInfo = true;
                        }
                    }
                }
            }
            return lAvecInfo;
        };
        ObjetEtatUtilisateur.prototype.ongletEstVisible = function(aGenreOnglet) {
            return this.existeGenreOnglet(aGenreOnglet);
        };
        module.exports = ObjetEtatUtilisateur_Mobile;
    },
    fn: "objetetatutilisateur_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreErreurAcces = {
            Aucune: 0,
            Identification: 1,
            Autorisation: 2,
            ConnexionClasse: 3,
            AucuneRessource: 4,
            Connexion: 5,
            BloqueeEleve: 6,
            FonctionAccompagnant: 7,
            AccompagnantAucunEleve: 8
        };
        module.exports = EGenreErreurAcces;
    },
    fn: "enumere_erreuracces.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeCommandeSecurisationCompteHttp = {
            csch_VerifierPIN: 0,
            csch_VerifierMotDePassePersonnalise: 1,
            csch_LibellesSourceConnexionDejaConnus: 2,
            csch_EnregistrerChoixUtilisateur: 3,
            csch_AffecterModeDoubleAuthentification: 4,
            csch_AffecterCodePIN: 5,
            csch_RenommerSourceConnexionConnue: 6,
            csch_SupprimerSourceConnexionConnue: 7,
            csch_AffecterMotDePassePersonnalise: 8,
            csch_ModifierLogin: 9
        };
        module.exports.TypeCommandeSecurisationCompteHttp = TypeCommandeSecurisationCompteHttp;
        var TypeActionIHMSecurisationCompte = {
            AIHMSC_PersonnalisationMotDePasse: 0,
            AIHMSC_ChoixStrategie: 1,
            AIHMSC_ChoixCodePINetSource: 2,
            AIHMSC_SaisieCodePINetSource: 3,
            AIHMSC_SaisieSourcePourNotifSeulement: 4
        };
        module.exports.TypeActionIHMSecurisationCompte = TypeActionIHMSecurisationCompte;
        var TypeModeGestionDoubleAuthentification = {
            MGDA_PasEncoreChoisi: 0,
            MGDA_Inactive: 1,
            MGDA_NotificationSeulement: 2,
            MGDA_SaisieCodePIN: 3
        };
        module.exports.TypeModeGestionDoubleAuthentification = TypeModeGestionDoubleAuthentification;
        var TypeGenreSourceConnexion = {
            GSC_ClientLourd: 0,
            GSC_ApplicationMobile: 1,
            GSC_Navigateur: 2
        };
        module.exports.TypeGenreSourceConnexion = TypeGenreSourceConnexion;
        module.exports.C_MaxPinRetry = 3;
        module.exports.C_MinPinLength = 4;
        module.exports.C_LibelleAppareilMaxLength = 30;
    },
    fn: "typesecurisationcompte.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var Requetes = require('CollectionRequetes.js');
        var TypeCommandeSecurisationCompteHttp = require('TypeSecurisationCompte.js').TypeCommandeSecurisationCompteHttp;

        function ObjetRequeteSecurisationCompteDoubleAuth() {
            this.inheritedCreate(arguments);
        }
        Requetes.inscrire('SecurisationCompteDoubleAuth', ObjetRequeteSecurisationCompteDoubleAuth, ObjetRequeteConsultation);
        ObjetRequeteSecurisationCompteDoubleAuth.prototype.lancerRequete = function(aParams) {
            this.JSON.action = aParams.action;
            var lComm = GApplication.getCommunication();
            switch (this.JSON.action) {
                case TypeCommandeSecurisationCompteHttp.csch_VerifierMotDePassePersonnalise:
                    this.JSON.nouveauMDP = lComm.getChaineChiffreeAES(aParams.nouveauMDP);
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_VerifierPIN:
                    this.JSON.codePin = lComm.getChaineChiffreeAES(aParams.codePin);
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_LibellesSourceConnexionDejaConnus:
                    this.JSON.libelle = aParams.libelle;
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_EnregistrerChoixUtilisateur:
                    this.JSON.mode = aParams.mode;
                    if (aParams.nouveauMDP) {
                        this.JSON.nouveauMDP = lComm.getChaineChiffreeAES(aParams.nouveauMDP);
                    }
                    if (aParams.codePin) {
                        this.JSON.codePin = lComm.getChaineChiffreeAES(aParams.codePin);
                    }
                    this.JSON.avecIdentification = aParams.avecIdentification;
                    this.JSON.strIdentification = aParams.strIdentification;
                    break;
                default:
                    ;
            }
            return this.appelAsynchrone();
        };

        function ObjetRequeteSecurisationComptePreference() {
            this.inheritedCreate(arguments);
        }
        Requetes.inscrire('SecurisationComptePreference', ObjetRequeteSecurisationComptePreference, ObjetRequeteConsultation);
        ObjetRequeteSecurisationComptePreference.prototype.lancerRequete = function(aParams) {
            this.JSON.action = aParams.action;
            var lComm = GApplication.getCommunication();
            switch (this.JSON.action) {
                case TypeCommandeSecurisationCompteHttp.csch_AffecterMotDePassePersonnalise:
                    this.JSON.ancienMDP = lComm.getChaineChiffreeAES(aParams.ancienMDP);
                    this.JSON.nouveauMDP = lComm.getChaineChiffreeAES(aParams.nouveauMDP);
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_ModifierLogin:
                    this.JSON.ancienMDP = lComm.getChaineChiffreeAES(aParams.ancienMDP);
                    this.JSON.identifiant = lComm.getChaineChiffreeAES(aParams.nouveauMDP);
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_VerifierPIN:
                    this.JSON.codePin = lComm.getChaineChiffreeAES(aParams.codePin);
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_AffecterModeDoubleAuthentification:
                    this.JSON.mode = aParams.mode;
                    if (aParams.ancienCodePin) {
                        this.JSON.ancienCodePin = lComm.getChaineChiffreeAES(aParams.ancienCodePin);
                    }
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_AffecterCodePIN:
                    this.JSON.codePin = lComm.getChaineChiffreeAES(aParams.codePin);
                    if (aParams.ancienCodePin) {
                        this.JSON.ancienCodePin = lComm.getChaineChiffreeAES(aParams.ancienCodePin);
                    }
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_SupprimerSourceConnexionConnue:
                    this.JSON.identifiantSysteme = aParams.identifiantSysteme;
                    this.JSON.genreSource = aParams.genreSource;
                    break;
                case TypeCommandeSecurisationCompteHttp.csch_RenommerSourceConnexionConnue:
                    this.JSON.identifiantSysteme = aParams.identifiantSysteme;
                    this.JSON.genreSource = aParams.genreSource;
                    this.JSON.libelleSaisi = aParams.libelleSaisi;
                    break;
                default:
                    ;
            }
            return this.appelAsynchrone();
        };
        module.exports.ObjetRequeteSecurisationCompteDoubleAuth = ObjetRequeteSecurisationCompteDoubleAuth;
        module.exports.ObjetRequeteSecurisationComptePreference = ObjetRequeteSecurisationComptePreference;
    },
    fn: "objetrequetesecurisationcompte.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var IELocalStorage = require('LocalStorage.js');
        var ObjetElement = require('ObjetElement.js');
        var Requetes = require('CollectionRequetes.js');
        var EGenreCryptage = require('Enumere_Cryptage.js');
        var GCryptage = require('ObjetCryptage.js');
        var GTraductions = require('ObjetTraduction.js');
        var EGenreErreurAcces = require('Enumere_ErreurAcces.js');
        var SecurisationCompte = require('TypeSecurisationCompte.js');
        var TypeActionIHMSecurisationCompte = SecurisationCompte.TypeActionIHMSecurisationCompte;
        var TypeCommandeSecurisationCompteHttp = SecurisationCompte.TypeCommandeSecurisationCompteHttp;
        var UtilitaireDeconnexion = require('UtilitaireDeconnexion.js');
        var ObjetRequeteSecurisationCompteDoubleAuth = require('ObjetRequeteSecurisationCompte.js').ObjetRequeteSecurisationCompteDoubleAuth;

        function ObjetMoteurConnexion() {
            this.const = {};
            this.const.Cookie_Identification = GApplication.nomProduit + '_Identification';
            this.const.Cookie_Authentification = GApplication.nomProduit + '_Authentification';
            this.const.Cookie_Espace = GApplication.nomProduit + '_Espace';
            this.const.Cookie_estCAS = GApplication.nomProduit + '_EstCas';
            this.genreEtat = {
                aucun: 0,
                malInitialise: 1,
                autoInitialise: 8,
                enIdentification: 2,
                identifie: 3,
                nonIdentifie: 4,
                enAuthentification: 5,
                authentifie: 6,
                nonAuthentifie: 7,
                erreur: 9
            };
            this.reset(true);
        }
        ObjetMoteurConnexion.prototype.reset = function(aFull) {
            this.stockageMDPActif = IELocalStorage.actif && !GApplication.getDemo();
            this.avecStockageMDP = false;
            this.estAppliMobile = GApplication.estAppliMobile;
            this.modeValidationAppliMobile = $.isFunction(GParametres.getCookieValidationAppli) && document.cookie.indexOf(GParametres.getCookieValidationAppli() + '=') > -1;
            this.modeValidationAppliMobileJeton = false;
            this.nomRessource = '';
            this.ressourceInternet = new ObjetElement();
            this.genreConnexion = 0;
            this.login = new ObjetElement();
            this.motDePasse = new ObjetElement();
            this.alea = '';
            this.pourENT = false;
            this.demandeConnexionAuto = false;
            this.enConnexionAuto = false;
            this.demandeConnexionAppliMobile = false;
            this.demandeConnexionAppliMobileJeton = false;
            this.enConnexionAppliMobile = false;
            this.uuidAppliMobile = '';
            this.loginTokenSAV = '';
            this.tokenSAV = '';
            this.erreurCode = EGenreErreurAcces.Aucune;
            this.erreur = {
                erreurTitre: null,
                erreurMessage: null,
                erreurBandeau: null
            };
            if (aFull) {
                this.stockageMDPActive = false;
                this.genreEspace = null;
                this.callback = null;
                this.requetes = {};
                this.requetes.parametres = null;
                this.requetes.listeRessources = null;
                this.requetes.identification = null;
                this.requetes.authentification = null;
            }
            this.etat = this.genreEtat.aucun;
        };
        ObjetMoteurConnexion.prototype.init = function(aParam) {
            this.callback = aParam.callback;
            this.requetes.listeRessources = aParam.requetes.listeRessources || null;
            this.requetes.identification = aParam.requetes.identification || null;
            this.requetes.authentification = aParam.requetes.authentification || null;
            this.stockageMDPActive = aParam.stockageMDPActive || false;
            this.etat = this.genreEtat.aucun;
            this.genreEspace = GEtatUtilisateur.GenreEspace;
            if (this.stockageMDPActif && this.stockageMDPActive) {
                this.login = new ObjetElement(IELocalStorage.getItem(this.const.Cookie_Identification));
                this.motDePasse = new ObjetElement(IELocalStorage.getItem(this.const.Cookie_Authentification));
                this.avecStockageMDP = !!this.getLogin() && !!this.getMotDePasse() && (parseInt(IELocalStorage.getItem(this.const.Cookie_Espace)) === this.genreEspace);
                if (!this.avecStockageMDP) {
                    this.setStockageMdp(false);
                } else {
                    this.etat = this.genreEtat.autoInitialise;
                    this.callback();
                }
            }
            if (window && window.opener) {
                window.addEventListener('message', this.messageTokenSAV.bind(this), false);
                window.opener.postMessage(JSON.stringify({
                    loaded: true
                }), '*');
            } else if (GNavigateur.IsIE && window.location && window.location.search && window.location.search.indexOf('tokenSAV') > -1) {
                this.tokenSAV = window.prompt('tokenSAV : ');
                if (this.tokenSAV !== '') {
                    this._authentificationTokenSAV();
                }
            }
        };
        ObjetMoteurConnexion.prototype.setLogin = function(aLogin) {
            this.login.Libelle = aLogin;
        };
        ObjetMoteurConnexion.prototype.getLogin = function(aPourVisu) {
            var lLoginBrut = this.login.GetLibelle(),
                lLogin = lLoginBrut;
            if (lLogin && !this.pourENT && (this.login.GetGenre() > 0)) {
                lLogin = lLogin.toLowerCase();
            }
            return aPourVisu ? lLoginBrut : lLogin;
        };
        ObjetMoteurConnexion.prototype.setMotDePasse = function(aMdp) {
            this.motDePasse.Libelle = aMdp;
        };
        ObjetMoteurConnexion.prototype.getMotDePasse = function(aPourVisu) {
            var lMotDePasse = this.motDePasse.GetLibelle();
            if (lMotDePasse && !this.pourENT && (this.motDePasse.GetGenre() > 0)) {
                lMotDePasse = lMotDePasse.toLowerCase();
            }
            return aPourVisu && this.avecStockageMDP && !!lMotDePasse ? '********' : aPourVisu && !!lMotDePasse ? lMotDePasse : !!lMotDePasse ? forge.md.sha256.create().update(this.alea).update(forge.util.encodeUtf8(lMotDePasse)).digest().toHex().toUpperCase() : '';
        };
        ObjetMoteurConnexion.prototype.setGenreConnexion = function(aGenre) {
            if (GEtatUtilisateur.setGenreConnexion) {
                GEtatUtilisateur.setGenreConnexion(aGenre);
            }
            this.genreConnexion = aGenre;
        };
        ObjetMoteurConnexion.prototype.getGenreConnexion = function() {
            return this.genreConnexion;
        };
        ObjetMoteurConnexion.prototype.aMotDePasseStocke = function() {
            return !!IELocalStorage.getItem(this.const.Cookie_Authentification);
        };
        ObjetMoteurConnexion.prototype.getCle = function() {
            return (this.tokenSAV ? this.tokenSAV : (this.pourENT ? '' : this.getLogin()) + this.getMotDePasse());
        };
        ObjetMoteurConnexion.prototype.setStockageMdp = function(aActif) {
            if (this.stockageMDPActif && this.stockageMDPActive && this.avecStockageMDP === true && aActif === false) {
                this.avecStockageMDP = false;
                this.reset();
                this.viderStockageMDP();
            } else if (this.stockageMDPActif && this.stockageMDPActive) {
                this.avecStockageMDP = aActif;
            }
        };
        ObjetMoteurConnexion.prototype.setTokenSAV = function(aToken) {
            var lMsg = forge.random.generate(Math.max(2, Math.floor(Math.random() * 100) % 10));
            var lTotal = 0;
            for (var i = 0; i < lMsg.length; i++) {
                lTotal += lMsg.charCodeAt(i);
            }
            if (lTotal % 255 !== 0) {
                lMsg += String.fromCharCode(255 - (lTotal % 255));
            }
            this.tokenSAV = aToken;
            this.stockageMDPActive = false;
            this.demandeConnexionAuto = false;
            this.enConnexionAuto = false;
            this.demandeConnexionAppliMobile = false;
            this.demandeConnexionAppliMobileJeton = false;
            this.enConnexionAppliMobile = false;
            this.modeValidationAppliMobile = false;
            this.loginTokenSAV = GCryptage.encrypter({
                genreCryptage: EGenreCryptage.AES,
                chaine: lMsg,
                cle: GCryptage.getBuffer(this.tokenSAV),
                iv: GApplication.getCommunication().ivAES
            });
        };
        ObjetMoteurConnexion.prototype.viderStockageMDP = function() {
            IELocalStorage.removeItem(this.const.Cookie_Identification);
            IELocalStorage.removeItem(this.const.Cookie_Authentification);
            IELocalStorage.removeItem(this.const.Cookie_Espace);
            IELocalStorage.removeItem(this.const.Cookie_estCAS);
        };
        ObjetMoteurConnexion.prototype.supprimerCookieValidationAppli = function() {
            document.cookie = GApplication.getCookieValidationAppli() + '=;expires=' + new Date(0).toUTCString();
        };
        ObjetMoteurConnexion.prototype.setChallenge = function(aChallenge) {
            var lChallenge = GCryptage.decrypter({
                genreCryptage: EGenreCryptage.AES,
                chaine: aChallenge,
                cle: GCryptage.getBuffer(this.getCle()),
                iv: GApplication.getCommunication().ivAES,
                avecAlea: true
            });
            this.challenge = GCryptage.encrypter({
                genreCryptage: EGenreCryptage.AES,
                chaine: lChallenge,
                cle: GCryptage.getBuffer(this.getCle()),
                iv: GApplication.getCommunication().ivAES
            });
        };
        ObjetMoteurConnexion.prototype.validationLoginMdp = function() {
            this.demandeConnexionAuto = !this.modeValidationAppliMobile && !this.estAppliMobile && !this.aMotDePasseStocke() && this.avecStockageMDP;
            this.enConnexionAuto = !this.modeValidationAppliMobile && !this.estAppliMobile && this.aMotDePasseStocke() && this.avecStockageMDP;
            this.demandeConnexionAppliMobile = this.modeValidationAppliMobile;
            this.demandeConnexionAppliMobileJeton = this.modeValidationAppliMobile && this.modeValidationAppliMobileJeton;
            this.enConnexionAppliMobile = GApplication.estAppliMobile;
            return $.isFunction(this.callback) && ((!!this.getLogin() && !!this.getMotDePasse() && (!this.estAppliMobile || !!this.uuidAppliMobile)) || (this.tokenSAV && this.loginTokenSAV));
        };
        ObjetMoteurConnexion.prototype.identification = function() {
            if (this.validationLoginMdp()) {
                this.etat = this.genreEtat.enIdentification;
                Requetes(this.requetes.identification, this).lancerRequete({
                    genreConnexion: this.genreConnexion,
                    genreEspace: this.genreEspace,
                    identifiant: this.getLogin(),
                    pourENT: this.pourENT,
                    enConnexionAuto: this.enConnexionAuto,
                    demandeConnexionAuto: this.demandeConnexionAuto,
                    enConnexionAppliMobile: this.enConnexionAppliMobile,
                    demandeConnexionAppliMobile: this.demandeConnexionAppliMobile,
                    demandeConnexionAppliMobileJeton: this.demandeConnexionAppliMobileJeton,
                    uuidAppliMobile: this.uuidAppliMobile,
                    loginTokenSAV: this.loginTokenSAV
                }).then(this.apresIdentification.bind(this));
            } else {
                this.etat = this.genreEtat.malInitialise;
                this.callback();
            }
        };
        ObjetMoteurConnexion.prototype.apresIdentification = function(aParam) {
            this.etat = this.genreEtat.identifie;
            if (this.demandeConnexionAppliMobile && aParam.login) {
                this.login = new ObjetElement(aParam.login);
            }
            this.ressourceInternet = aParam.utilisateur || new ObjetElement('');
            this.login.Genre = aParam.modeCompLog || 0;
            this.motDePasse.Genre = aParam.modeCompMdp || 0;
            this.alea = aParam.alea || '';
            this.setChallenge(aParam.challenge);
            if (this.getMotDePasse() || (this.tokenSAV && this.loginTokenSAV)) {
                this.authentification();
            }
        };
        ObjetMoteurConnexion.prototype.authentification = function() {
            this.etat = this.genreEtat.enAuthentification;
            Requetes(this.requetes.authentification, this).lancerRequete({
                genreConnexion: this.genreConnexion,
                identifiant: this.getLogin(),
                pourENT: this.pourENT,
                ressourceInternet: this.ressourceInternet,
                nomRessource: this.nomRessource,
                genreRecherche: this.genreRecherche,
                enConnexionAuto: this.enConnexionAuto,
                demandeConnexionAuto: this.demandeConnexionAuto,
                enConnexionAppliMobile: this.enConnexionAppliMobile,
                demandeConnexionAppliMobile: this.demandeConnexionAppliMobile,
                demandeConnexionAppliMobileJeton: this.demandeConnexionAppliMobileJeton,
                uuidAppliMobile: this.uuidAppliMobile,
                loginTokenSAV: this.loginTokenSAV,
                challenge: this.challenge
            }).then(this.apresAuthentification.bind(this));
        };
        ObjetMoteurConnexion.prototype.apresAuthentification = function(aParam) {
            if ($.isNumeric(aParam.Acces)) {
                this.etat = this.genreEtat.erreur;
                this.setMessageErreur(aParam.Acces);
                if (window && window.opener && this.tokenSAV) {
                    window.removeEventListener('message', this.messageTokenSAV.bind(this), false);
                    window.opener.postMessage(JSON.stringify({
                        result: aParam.Acces,
                        erreur: this.erreur
                    }), '*');
                }
                this.callback(aParam);
            } else if (aParam.cle) {
                GApplication.getCommunication().cleAES = GCryptage.decrypter({
                    genreCryptage: EGenreCryptage.AES,
                    chaine: aParam.cle,
                    cle: GCryptage.getBuffer(this.getCle()),
                    iv: GApplication.getCommunication().ivAES,
                    enBytes: true
                });
                if (this.requetes.URL_SSO_O365 && this.JSONReponse.O365ReturnURL && this.JSONReponse.O365ReturnURL !== '') {
                    GEtatUtilisateur.deserialiserRessources(aParam);
                    Requetes(this.requetes.URL_SSO_O365, this).lancerRequete({
                        service: this.JSONReponse.O365ReturnURL
                    }).then(function(aUrl) {
                        location.assign(aUrl);
                    }, _apresAuthentificationReussie.bind(this, aParam));
                } else {
                    _apresAuthentificationReussie.call(this, aParam);
                }
            } else {
                this.etat = this.genreEtat.nonAuthentifie;
                if (window && window.opener && this.tokenSAV) {
                    window.removeEventListener('message', this.messageTokenSAV.bind(this), false);
                    window.opener.postMessage(JSON.stringify({
                        result: -1
                    }), '*');
                }
                this.callback(aParam);
            }
        };

        function _avecSecurisationDoubleAuth(aParam) {
            return aParam && aParam.actionsDoubleAuth && aParam.actionsDoubleAuth.contains && (aParam.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_ChoixStrategie) || aParam.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_SaisieCodePINetSource) || aParam.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_SaisieSourcePourNotifSeulement));
        }

        function _avecPersonnalisationMDP(aParam) {
            return aParam && aParam.actionsDoubleAuth && aParam.actionsDoubleAuth.contains && aParam.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_PersonnalisationMotDePasse);
        }

        function _requeteSecurisationCompteEnregistrementPromise(aParams) {
            var lParams = Object.assign({
                action: TypeCommandeSecurisationCompteHttp.csch_EnregistrerChoixUtilisateur
            }, aParams.valeursSecurisationCompte);
            return new ObjetRequeteSecurisationCompteDoubleAuth(this).lancerRequete(lParams).catch(function(aReponse) {
                return Promise.resolve().then(function() {
                    if (aReponse && aReponse.promiseMessage) {
                        return aReponse.promiseMessage;
                    }
                }).then(function() {
                    return Promise.reject();
                });
            });
        }

        function _securisationCompte_promise(aParam) {
            this.securisationCompte.callbackInitSecurisationCompte(aParam);
            aParam.valeursSecurisationCompte = {};
            return Promise.resolve().then(function() {
                if (_avecPersonnalisationMDP(aParam)) {
                    return this.securisationCompte.callbackPersonnalisationMDP_promise(aParam).then(function(aResult) {
                        if (aResult.reussite && aResult.paramForcerMDP) {
                            if (aResult.paramForcerMDP.nouveauMDP) {
                                aParam.valeursSecurisationCompte.nouveauMDP = aResult.paramForcerMDP.nouveauMDP;
                            }
                            Object.assign(aParam, aResult.paramForcerMDP);
                        } else {
                            return Promise.reject();
                        }
                    });
                }
            }.bind(this)).then(function() {
                if (_avecSecurisationDoubleAuth(aParam)) {
                    return this.securisationCompte.callbackSecurisationDoubleAuth_promise(aParam).then(function(aResult) {
                        if (aResult && aResult.suivant && aResult.donnees) {
                            Object.assign(aParam.valeursSecurisationCompte, aResult.donnees);
                        } else {
                            return Promise.reject();
                        }
                    });
                }
            }.bind(this)).then(function() {
                if (_avecSecurisationDoubleAuth(aParam) || _avecPersonnalisationMDP(aParam) || aParam.changementStrategieImpose) {
                    return _requeteSecurisationCompteEnregistrementPromise.call(this, aParam);
                }
            }.bind(this));
        }

        function _apresAuthentificationReussie(aParam) {
            if (aParam.login) {
                this.login.Libelle = aParam.login;
            }
            this.jetonConnexionAppliMobile = aParam.jetonConnexionAppliMobile;
            this.jetonConnexionAuto = aParam.jetonConnexionAuto;
            if (this.jetonConnexionAuto) {
                IELocalStorage.setItem(this.const.Cookie_Authentification, this.jetonConnexionAuto);
                IELocalStorage.setItem(this.const.Cookie_Identification, this.getLogin());
                IELocalStorage.setItem(this.const.Cookie_Espace, this.genreEspace);
            }
            if (window && window.opener && this.tokenSAV) {
                window.removeEventListener('message', this.messageTokenSAV.bind(this), false);
                window.opener.postMessage(JSON.stringify({
                    result: 0
                }), '*');
            }
            if (this.modeValidationAppliMobile || document.cookie.indexOf('validationAppliMobile=') > -1) {
                window.loginState = {
                    status: 0,
                    libelle: aParam.libelleUtil,
                    login: this.getLogin(true),
                    mdp: this.jetonConnexionAppliMobile
                };
                if (document.cookie.indexOf('validationAppliMobile=') > -1) {
                    document.cookie = 'validationAppliMobile=;expires=' + new Date(0).toUTCString();
                    document.cookie = "appliMobile=1;expires=" + new Date(new Date().getTime() + (365 * 24 * 60 * 60 * 1000)).toUTCString();
                }
                return;
            }
            if (GApplication.estAppliMobile) {
                window.messageData.push({
                    action: 'surAuth',
                    data: this.jetonConnexionAppliMobile
                });
            }
            Promise.resolve().then(function() {
                if (aParam.actionsDoubleAuth) {
                    return _securisationCompte_promise.call(this, aParam);
                }
            }.bind(this)).then(function() {
                _authentifieTotalement.call(this, aParam);
            }.bind(this), function(aArg) {
                if (aArg) {}
                UtilitaireDeconnexion.deconnexion().then(function() {
                    window.location.reload();
                });
            });
        }

        function _authentifieTotalement(aParam) {
            this.etat = this.genreEtat.authentifie;
            this.callback(aParam);
        }
        ObjetMoteurConnexion.prototype.setMessageErreur = function(AGenreErreur) {
            this.erreur = {
                erreurTitre: null,
                erreurMessage: null,
                erreurBandeau: null
            };
            this.erreurCode = AGenreErreur;
            switch (AGenreErreur) {
                case EGenreErreurAcces.Identification:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurIdentification')
                    };
                    break;
                case EGenreErreurAcces.Autorisation:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurAutorisation', [GParametres.GetNomEspace()]),
                        erreurTitre: GTraductions.getValeur('connexion.AccesRefuse')
                    };
                    break;
                case EGenreErreurAcces.ConnexionClasse:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurConnexionClasse')
                    };
                    break;
                case EGenreErreurAcces.AucuneRessource:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurAucuneRessource', [GParametres.GetNomEspace()]),
                        erreurTitre: GTraductions.getValeur('connexion.AccesRefuse')
                    };
                    break;
                case EGenreErreurAcces.Connexion:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurConnexion')
                    };
                    break;
                case EGenreErreurAcces.BloqueeEleve:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurBloqueeEleve')
                    };
                    break;
                case EGenreErreurAcces.FonctionAccompagnant:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurFonctionAccompagnant')
                    };
                    break;
                case EGenreErreurAcces.AccompagnantAucunEleve:
                    this.erreur = {
                        erreurMessage: GTraductions.getValeur('connexion.ErreurAccompagnantAucunEleve')
                    };
                    break;
                default:
                    break;
            }
        };
        ObjetMoteurConnexion.prototype._authentificationTokenSAV = function() {
            this.setTokenSAV(this.tokenSAV);
            this.identification();
        };
        ObjetMoteurConnexion.prototype.messageTokenSAV = function(aEvent) {
            if (aEvent && aEvent.data) {
                var lData = JSON.parse(aEvent.data);
                if (lData && lData.tokenSAV) {
                    this.tokenSAV = lData.tokenSAV;
                    this._authentificationTokenSAV.call(this);
                }
            }
        };
        module.exports = ObjetMoteurConnexion;
    },
    fn: "objetmoteurconnexion.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        function UtilitaireRedirection() {
            this.parametresAConserver = ['login', 'fd', 'redirect', 'O365_ReturnURL', 'redirect_sauthm'];
            this.parametres = [];
            var lSearches = window.location.search.replace(/^\?/, '').toLowerCase().split('&');
            for (var i in lSearches) {
                var lItems = lSearches[i].split('=');
                if (lItems.length === 2) {
                    this.parametres.push({
                        parametre: lItems[0],
                        valeur: lItems[1]
                    });
                }
            }
        }
        UtilitaireRedirection.prototype.getParametresUrl = function(aObjet) {
            var lParamUrl = '';
            var lParametres = [];
            var i;
            var lParametre;
            if (aObjet && aObjet.parametresAConserver) {
                this.parametresAConserver = aObjet.parametresAConserver;
            }
            for (i in this.parametres) {
                lParametre = this.parametres[i];
                if ((($.inArray(lParametre.parametre, this.parametresAConserver) > -1) || ($.inArray(lParametre.parametre.toUpperCase(), this.parametresAConserver) > -1)) && (!aObjet || !aObjet.parametresASupprimer || (($.inArray(lParametre.parametre, aObjet.parametresASupprimer) === -1) && ($.inArray(lParametre.parametre.toUpperCase(), aObjet.parametresASupprimer) === -1)))) {
                    lParametres.push(lParametre);
                }
            }
            if (aObjet && aObjet.parametres) {
                for (i in aObjet.parametres) {
                    lParametre = aObjet.parametres[i];
                    if (!this.existParametre(lParametre.parametre)) {
                        lParametres.push(lParametre);
                    }
                }
            }
            for (i in lParametres) {
                lParametre = lParametres[i];
                lParamUrl += (lParamUrl ? '&' : '') + lParametre.parametre + '=' + lParametre.valeur;
            }
            return (lParamUrl ? '?' : '') + lParamUrl;
        };
        UtilitaireRedirection.prototype.existParametre = function(aParametre) {
            var obj = this.parametres.filter(function(aItem) {
                return aItem.parametre === aParametre;
            });
            return (obj !== undefined) && (obj.length > 0);
        };
        UtilitaireRedirection.prototype.getValeurParametre = function(aParametre) {
            var obj = this.parametres.filter(function(aItem) {
                return aItem.parametre === aParametre;
            });
            if ((obj !== undefined) && (obj.length === 1)) {
                return decodeURIComponent(obj[0].valeur);
            }
        };
        module.exports = UtilitaireRedirection;
    },
    fn: "utilitaireredirection.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GChaine = require('GChaine.js');
        var EStructureAffichage = require('Enumere_StructureAffichage.js');
        var ObjetAbstraitInterface = require('ObjetInterface.js');
        var GTraductions = require('ObjetTraduction.js');
        var ObjetMoteurConnexion = require('ObjetMoteurConnexion.js');
        var GUID = require('GUID.js');
        var EGenreBoiteMessage = require('Enumere_BoiteMessage.js');
        var ToucheClavier = require('ToucheClavier.js');
        var EGenreErreurAcces = require('Enumere_ErreurAcces.js');
        var UtilitaireRedirection = require('UtilitaireRedirection.js');

        function _InterfaceConnexion() {
            this.inheritedCreate(arguments);
            this.options = {
                avecAnimation: true,
                genreImageConnexion: 0,
                urlImageConnexion: '',
                avecChoixConnexion: false,
                avecRetourEspace: false,
                stockageMDPActive: false,
                avecO365: false,
                infosO365: {},
                avecRecupIdMdp: false,
                pourInscription: false,
                texteExplicatifIdentifiant: '',
                texteExplicatifMotdepasse: '',
                requetes: {
                    identification: '',
                    authentification: '',
                    URL_SSO_O365: ''
                }
            };
            this.moteurConnexion = null;
            this.id = {
                bandeau: GUID.getId(),
                btnConnexion: GUID.getId(),
                checkBox: GUID.getId(),
                choixLangue: GUID.getId(),
                connect: GUID.getId(),
                inscription: GUID.getId(),
                image: GUID.getId(),
                imageSuite: GUID.getId(),
                thisNom: this.Nom,
                waiModeAccessible: GUID.getId(),
                wrapper: GUID.getId(),
                wrapperConnect: GUID.getId(),
                nameRadio: GUID.getId(),
                identification: GUID.getId(),
                motDePasse: GUID.getId(),
                UPN: GUID.getId(),
                checkSouvenir: GUID.getId(),
                pageConnexionAuto: GUID.getId()
            };
        }
        MethodesObjet.heritagePrototype(_InterfaceConnexion, ObjetAbstraitInterface);
        _InterfaceConnexion.prototype.SetParametresGeneraux = function() {
            this.GenreStructure = EStructureAffichage.Autre;
        };
        _InterfaceConnexion.prototype.setOptions = function(aOptions) {
            Object.assign(this.options, aOptions);
            if (window.location.search.search("redirect=1") > 0 && GParametres.URLEspace) {
                this.options.avecRetourEspace = true;
            } else {
                this.options.avecRetourEspace = false;
            }
        };
        _InterfaceConnexion.prototype.ConstruireStructureAffichageAutre = function() {
            if (this.estConnexionSansInterface()) {
                return '<div class="GrandEspaceHaut GrandEspaceGauche Gras" id="' + this.id.pageConnexionAuto + '">' + GTraductions.getValeur('connexion.ConnexionCAS') + '</div>';
            } else {
                return this.construirePage(this);
            }
        };
        _InterfaceConnexion.prototype.construirePage = function() {
            return '';
        };
        _InterfaceConnexion.prototype.RecupererDonnees = function() {
            this.moteurConnexion = new ObjetMoteurConnexion();
            this.moteurConnexion.init({
                callback: this.callbackMoteur.bind(this),
                requetes: {
                    identification: this.options.requetes.identification,
                    authentification: this.options.requetes.authentification,
                    URL_SSO_O365: this.options.requetes.URL_SSO_O365
                },
                stockageMDPActive: this.options.stockageMDPActive
            });
            if (this.callbackInitSecurisationCompte) {
                this.moteurConnexion.securisationCompte = {
                    callbackInitSecurisationCompte: this.callbackInitSecurisationCompte.bind(this),
                    callbackPersonnalisationMDP_promise: this.callbackPersonnalisationMDP_promise.bind(this),
                    callbackSecurisationDoubleAuth_promise: this.callbackSecurisationDoubleAuth_promise.bind(this)
                };
            }
            if (GApplication.getDemo()) {
                this.moteurConnexion.setLogin(GTraductions.getValeur('Demo.Identifiant'));
                this.moteurConnexion.setMotDePasse(GTraductions.getValeur('Demo.MotDePasse'));
                $('#' + this.id.identification).attr('readonly', true);
                $('#' + this.id.motDePasse).attr('readonly', true);
                this.preremplir();
            } else {
                if (!GNavigateur.isIpad) {
                    $('#' + this.id.identification).focus();
                }
            }
            if (window.hookAccesDepuisAppli) {
                window.hookAccesDepuisAppli.call(this);
            } else if (GApplication.smartAppBanner) {
                GApplication.smartAppBanner.show();
            }
            $('body').on('keyup', this.switchModeAccessible);
        };
        _InterfaceConnexion.prototype.switchModeAccessible = function(event) {
            if (event.which === ToucheClavier.X && event.originalEvent.ctrlKey && event.originalEvent.shiftKey) {
                GEtatUtilisateur.setModeAccessible(!IE.optionsEspaceLocal.getModeAccessible());
                setTimeout(function() {
                    window.location.reload();
                }, 500);
            }
        };
        _InterfaceConnexion.prototype.free = function() {
            this.inherited('free');
            $('body').off('keyup', this.switchModeAccessible);
        };
        _InterfaceConnexion.prototype.callbackMoteur = function() {
            switch (this.moteurConnexion.etat) {
                case this.moteurConnexion.genreEtat.aucun:
                    break;
                case this.moteurConnexion.genreEtat.malInitialise:
                    break;
                case this.moteurConnexion.genreEtat.autoInitialise:
                    this.preremplir();
                    break;
                case this.moteurConnexion.genreEtat.enIdentification:
                    break;
                case this.moteurConnexion.genreEtat.identifie:
                    break;
                case this.moteurConnexion.genreEtat.nonIdentifie:
                    break;
                case this.moteurConnexion.genreEtat.enAuthentification:
                    break;
                case this.moteurConnexion.genreEtat.authentifie:
                    this._reussiteAuthentification.apply(this, arguments);
                    break;
                case this.moteurConnexion.genreEtat.nonAuthentifie:
                    break;
                case this.moteurConnexion.genreEtat.erreur:
                    var lAction;
                    if (this.moteurConnexion.erreurCode === EGenreErreurAcces.Identification) {
                        lAction = (function() {
                            this.moteurConnexion.setMotDePasse('');
                            this.moteurConnexion.setStockageMdp(false);
                        }).bind(this);
                    } else {
                        lAction = (function() {
                            this.moteurConnexion.setLogin('');
                            this.moteurConnexion.setMotDePasse('');
                            this.moteurConnexion.setStockageMdp(false);
                        }).bind(this);
                    }
                    this.signalerErreur();
                    GApplication.getMessage().afficher({
                        type: EGenreBoiteMessage.Information,
                        titre: this.moteurConnexion.erreur.erreurTitre,
                        message: this.moteurConnexion.erreur.erreurMessage,
                        callback: lAction
                    });
                    this._echecAuthentification.apply(this, arguments);
                    break;
                default:
                    ;
                    break;
            }
        };
        _InterfaceConnexion.prototype.getControleur = function() {
            return {
                getHint: function(aMessage) {
                    switch (aMessage) {
                        case 'texteExplicatifIdentifiant':
                            return this.instance.options.texteExplicatifIdentifiant;
                        case 'texteExplicatifMotdepasse':
                            return this.instance.options.texteExplicatifMotdepasse;
                        case 'texteExplicatifModeConnexion':
                            return '<strong>' + GTraductions.getValeur('connexion.modeConnexionTitre') + '</strong><br />' + GTraductions.getValeur('connexion.modeConnexionMessage');
                        case 'texteExplicatifUPN':
                            return GTraductions.getValeur('connexion.upn.texte');
                        case 'texteExplicatifRecupIdMdp':
                            return GTraductions.getValeur('connexion.RecuperationMDP.titre');
                        case 'texteExplicatifValidation':
                            return GChaine.toTitle(GTraductions.getValeur('connexion.seConnecterTitre'));
                        default:
                            return '';
                    }
                },
                choixConnexion: {
                    getValue: function(aMode) {
                        return this.instance.moteurConnexion ? aMode === this.instance.moteurConnexion.genreConnexion : 0;
                    },
                    setValue: function(aValue) {
                        if (!!this.instance.moteurConnexion) {
                            this.instance.moteurConnexion.setGenreConnexion(aValue);
                        }
                    }
                },
                login: {
                    getValue: function() {
                        return !!this.instance.moteurConnexion ? this.instance.moteurConnexion.getLogin(true) : '';
                    },
                    setValue: function(aValue) {
                        if (!!this.instance.moteurConnexion) {
                            this.instance.moteurConnexion.setLogin(aValue);
                        }
                    }
                },
                motDePasse: {
                    getValue: function() {
                        return !!this.instance.moteurConnexion ? this.instance.moteurConnexion.getMotDePasse(true) : '';
                    },
                    setValue: function(aValue) {
                        if (!!this.instance.moteurConnexion) {
                            this.instance.moteurConnexion.setMotDePasse(aValue);
                        }
                    },
                    interrompreEvent: function(aEvent) {
                        if (aEvent.type === 'keyup' && aEvent.which === ToucheClavier.RetourChariot) {
                            if (!!this.instance.moteurConnexion && !GApplication.getCommunication().requeteEnCours()) {
                                this.instance.moteurConnexion.identification();
                            }
                            return true;
                        }
                    }
                },
                getClassLabelLogin: function() {
                    var lLogin = this.controleur.login.getValue.call(this);
                    return !!lLogin ? 'active' : '';
                },
                getClassLabelMotDePasse: function() {
                    var lMotDePasse = this.controleur.motDePasse.getValue.call(this);
                    return !!lMotDePasse ? 'active' : '';
                },
                stockageMDP: {
                    getValue: function() {
                        return !!this.instance.moteurConnexion ? this.instance.moteurConnexion.avecStockageMDP : false;
                    },
                    setValue: function(aValue) {
                        if (!!this.instance.moteurConnexion) {
                            this.instance.moteurConnexion.setStockageMdp(aValue);
                        }
                    }
                },
                boutonRedirigerParent: {
                    getDisabled: function() {
                        return false;
                    },
                    event: function() {
                        if (GParametres && GParametres.infosInscription && GParametres.infosInscription.espace && GParametres.infosInscription.espace.url) {
                            var lUrl = window.location.href.split('/');
                            lUrl.pop();
                            lUrl.push(GParametres.infosInscription.espace.url);
                            lUrl = lUrl.join('/');
                            window.location.href = lUrl;
                        }
                    }
                },
                boutonCreation: {
                    getDisabled: function() {
                        return false;
                    },
                    event: function() {
                        this.instance.eventCreation();
                    }
                },
                btnConnexionInscription: {
                    getDisabled: function() {
                        return false;
                    },
                    event: function() {
                        this.instance.options.pourInscription = false;
                    }
                },
                boutonValidation: {
                    getDisabled: function() {
                        return !this.instance.moteurConnexion || !this.instance.moteurConnexion.getLogin() || !this.instance.moteurConnexion.getMotDePasse();
                    },
                    event: function() {
                        if (!!this.instance.moteurConnexion && !GApplication.getCommunication().requeteEnCours()) {
                            this.instance.moteurConnexion.identification();
                        }
                    }
                },
                choixLangue: function() {
                    return this.instance.options.utilitaireChangementLangue.construire(this.instance.controleur);
                },
                visibiliteChangementLangue: function() {
                    return this.instance.options.utilitaireChangementLangue.avecChoixLangues();
                },
                visibiliteModeConnexion: function() {
                    return this.instance.options.avecChoixConnexion;
                },
                visibiliteUPN: function() {
                    return this.instance.options.avecO365;
                },
                visibiliteRecupIdMdp: function() {
                    return this.instance.options.avecRecupIdMdp;
                },
                visibiliteConnexion: function() {
                    return !this.instance.options.pourInscription;
                },
                visibiliteInscription: function() {
                    return this.instance.options.pourInscription;
                },
                visibiliteRedirigerParent: function() {
                    return this.instance.options.pourInscription && GParametres && GParametres.infosInscription && GParametres.infosInscription.espace;
                },
                visibiliteRetourEspace: function() {
                    return this.instance.options.avecRetourEspace;
                }
            };
        };
        _InterfaceConnexion.prototype.retourEspaceBureau = function() {
            window.location.assign(GParametres.URLEspace + new UtilitaireRedirection().getParametresUrl({
                parametres: [{
                    parametre: 'fd',
                    valeur: '1'
                }],
                parametresASupprimer: ['redirect']
            }));
        };
        _InterfaceConnexion.prototype.signalerErreur = function() {};
        _InterfaceConnexion.prototype.preremplir = function() {};
        _InterfaceConnexion.prototype.traiterEvenementValidation = function(aLogin, aMotDePasse, aPourENT, aUuidAppliMobile) {
            this.moteurConnexion.genreEspace = GEtatUtilisateur.GenreEspace;
            if (!!aLogin) {
                this.moteurConnexion.login.Libelle = aLogin;
            }
            if (!!aMotDePasse) {
                this.moteurConnexion.motDePasse.Libelle = aMotDePasse;
            }
            this.moteurConnexion.pourENT = aPourENT ? aPourENT : false;
            this.moteurConnexion.avecStockageMDP = false;
            this.moteurConnexion.uuidAppliMobile = this.uuidAppliMobile || aUuidAppliMobile;
            this.moteurConnexion.identification();
        };
        _InterfaceConnexion.prototype.estConnexionSansInterface = function() {
            return GApplication.acces && (GApplication.acces.estConnexionCAS() || GApplication.acces.estConnexionCookie());
        };
        _InterfaceConnexion.prototype._reussiteAuthentification = function() {};
        _InterfaceConnexion.prototype._echecAuthentification = function() {};
        module.exports = _InterfaceConnexion;
    },
    fn: "_interfaceconnexion.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var Requetes = require('CollectionRequetes.js');
        var GTraductions = require('ObjetTraduction.js');

        function ObjetRequeteIdentification() {
            this.inheritedCreate(arguments);
        }
        Requetes.inscrire('Identification', ObjetRequeteIdentification, ObjetRequeteConsultation);
        ObjetRequeteIdentification.prototype.lancerRequete = function(aParam) {
            Object.assign(this.JSON, aParam);
            return this.appelAsynchrone({
                messageDetail: GTraductions.getValeur('Identification')
            });
        };
        ObjetRequeteIdentification.prototype.actionApresRequete = function() {
            this.callbackReussite.appel(this.JSONReponse);
        };
        module.exports = ObjetRequeteIdentification;
    },
    fn: "objetrequeteidentification.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var Callback = require('Callback.js');
        var MethodesObjet = require('MethodesObjet.js');
        var Requetes = require('CollectionRequetes.js');
        var GTraductions = require('ObjetTraduction.js');
        MethodesObjet.heritagePrototype(ObjetRequeteAuthentificationPN, ObjetRequeteConsultation);

        function ObjetRequeteAuthentificationPN(aPere, aEvenementSurReussite, aEvenementSurEchec, aActionAvantDeserialisation) {
            this.inheritedCreate(aPere, aEvenementSurReussite, aEvenementSurEchec);
            if (aActionAvantDeserialisation) {
                this.callbackAvantDeserialisation = new Callback(aPere, aActionAvantDeserialisation);
            }
        }
        Requetes.inscrire('Authentification', ObjetRequeteAuthentificationPN, ObjetRequeteConsultation);
        ObjetRequeteAuthentificationPN.prototype.lancerRequete = function(aParam) {
            this.JSON.connexion = aParam.genreConnexion;
            this.JSON.challenge = aParam.challenge;
            this.JSON.espace = GEtatUtilisateur.GenreEspace;
            return this.appelAsynchrone({
                messageDetail: GTraductions.getValeur('Authentification')
            });
        };
        ObjetRequeteAuthentificationPN.prototype.actionApresRequete = function() {
            if (this.callbackAvantDeserialisation) {
                this.callbackAvantDeserialisation.appel();
            }
            this.callbackReussite.appel(this.JSONReponse);
        };
        module.exports = ObjetRequeteAuthentificationPN;
    },
    fn: "objetrequeteauthentificationpn.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeArrierePlanAuthentification = {
            Photo: 0,
            _Rebus: 1,
            Neutre: 2,
            Personnalise: 3,
            Louvre: 4,
            Arbre: 5
        };
        module.exports.TypeArrierePlanAuthentification = TypeArrierePlanAuthentification;
    },
    fn: "typearriereplanauthentification.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeArrierePlanAuthentification = require('TypeArrierePlanAuthentification.js').TypeArrierePlanAuthentification;
        var MethodesObjet = require('MethodesObjet.js');
        var imagesConnexion = require('imagesconnexion.js');

        function ObjetImageConnexion() {
            this.definitionImages = [];
            this.definitionImagesExtra = {};
        }
        ObjetImageConnexion.prototype.getClassImage = function() {
            return '';
        };
        ObjetImageConnexion.prototype.getObjetImagePronote = function(aGenreImageConnexion) {
            var lDate = new Date();
            if (location && location.search && location.search.search(/dateCnx=[0-9]{4}-[0-9]{2}-[0-9]{2}/) > -1) {
                var lDateMatch = location.search.match(/dateCnx=([0-9]{4}-[0-9]{2}-[0-9]{2})/);
                lDate = new Date(lDateMatch[1]);
            }
            var lResult = {};
            try {
                switch (aGenreImageConnexion) {
                    case TypeArrierePlanAuthentification.Photo:
                        lResult = this.definitionImages[TypeArrierePlanAuthentification.Photo][lDate.getMonth() % this.definitionImages[TypeArrierePlanAuthentification.Photo].length];
                        break;
                    case TypeArrierePlanAuthentification.Louvre:
                        if (this.definitionImages[TypeArrierePlanAuthentification.Louvre].length === 12) {
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Louvre][(lDate.getMonth()) % this.definitionImages[TypeArrierePlanAuthentification.Louvre].length];
                        } else if (this.definitionImages[TypeArrierePlanAuthentification.Louvre].length === 53) {
                            var lDate = new Date();
                            lDate.setHours(0, 0, 0, 0);
                            lDate.setDate(lDate.getDate() + 3 - (lDate.getDay() + 6) % 7);
                            var lWeek1 = new Date(lDate.getFullYear(), 0, 4);
                            var lSemaine = 1 + Math.round(((lDate.getTime() - lWeek1.getTime()) / 86400000 - 3 + (lWeek1.getDay() + 6) % 7) / 7);
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Louvre][(lSemaine - 1) % this.definitionImages[TypeArrierePlanAuthentification.Louvre].length];
                        } else {
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Louvre][GDate.getNbrJoursEntreDeuxDates(new Date(lDate.getFullYear(), 0, 1), lDate) % this.definitionImages[TypeArrierePlanAuthentification.Louvre].length];
                        }
                        if (this.definitionImagesExtra[lDate.getMonth() + '-' + lDate.getDate()]) {
                            lResult = this.definitionImagesExtra[lDate.getMonth() + '-' + lDate.getDate()];
                            if (lResult.suiviLogo1) lResult.suiviLien = lResult.suiviLogo1;
                        }
                        if (new Date() >= lResult.dateMaxLien) {
                            lResult.lien = '';
                        }
                        break;
                    case TypeArrierePlanAuthentification.Arbre:
                        lDate.setFullYear(1900);
                        if (lDate < new Date(1900, 2, 20)) {
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Arbre][0];
                        } else if (lDate < new Date(1900, 5, 21)) {
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Arbre][1];
                        } else if (lDate < new Date(1900, 8, 23)) {
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Arbre][2];
                        } else if (lDate < new Date(1900, 11, 21)) {
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Arbre][3];
                        } else {
                            lResult = this.definitionImages[TypeArrierePlanAuthentification.Arbre][0];
                        }
                        break;
                    default:
                        lResult = {};
                        break;
                }
            } catch (e) {
                lResult = {};
            }
            return lResult;
        };
        ObjetImageConnexion.prototype.getClassFond = function() {
            return 'Image_Connexion_Fond Repeat';
        };
        ObjetImageConnexion.prototype.setDefinitionImages = function(aArray) {
            this.definitionImages = aArray;
        };
        ObjetImageConnexion.prototype.setDefinitionImagesExtra = function(aObjet) {
            this.definitionImagesExtra = aObjet;
        };
        var lObjetImageConnexion = new ObjetImageConnexion();
        if (MethodesObjet.isFunction(imagesConnexion)) {
            imagesConnexion(lObjetImageConnexion);
        }
        module.exports = lObjetImageConnexion;
    },
    fn: "objetimageconnexion.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreEvenementObjetSaisie = {
            selection: 0,
            deploiement: 1,
            fermeture: 2
        };
        module.exports = EGenreEvenementObjetSaisie;
    },
    fn: "enumere_evenementobjetsaisie.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('produit/css/ChangementLangue.css');
        var uNomCookieLangue = 'ielang';
        var UtilitaireChangementLangueProduit = {
            affecterLangue: function(aIdLang) {
                var lDate = new Date();
                lDate.setDate(lDate.getDate() + 365);
                document.cookie = uNomCookieLangue + '=' + aIdLang + '; expires=' + lDate.toGMTString() + '; path=/;';
                window.location.reload();
            },
            getImageCss: function(aLangId) {
                switch (aLangId) {
                    case 12:
                    case 1036:
                        return 'Image_flagFR';
                    case 1033:
                        return 'Image_flagGB';
                    case 1031:
                        return 'Image_flagDE';
                    case 9:
                    case 2057:
                        return 'Image_flagGB';
                    case 2060:
                        return 'Image_flagBE';
                    case 3084:
                        return 'Image_flagCA';
                    case 4108:
                        return 'Image_flagCH';
                    case 16:
                    case 1040:
                        return 'Image_flagIT';
                    case 2067:
                        return 'Image_flagNL';
                    case 6145:
                        return 'Image_flagMA';
                    case 10:
                    case 3082:
                        return 'Image_flagES';
                    default:
                        ;
                        return 'Image_flagFR';
                }
            }
        };
        module.exports = UtilitaireChangementLangueProduit;
    },
    fn: "utilitairechangementlangueproduit.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var EGenreSaisie = {
            Combo: 2,
            SaisieRecherche: 3
        };
        module.exports = EGenreSaisie;
    },
    fn: "enumere_saisie.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GLog = require('IELog.js');
        var GHtml = require('GHtml.js');
        var GStyle = require('GStyle.js');
        var UtilitaireCss = require('UtilitaireCss.js');

        function ObjetImage() {}
        ObjetImage.prototype.compose = function(aClass, aLargeur) {
            return '<div' + (aClass ? ' class="' + aClass + '"' : '') + ' style="margin-left:auto; margin-right:auto; width:' + (aLargeur ? aLargeur + 'px' : '100%;') + '">&nbsp;</div>';
        };
        ObjetImage.prototype.composeImage = function(aClass, aLargeur, aPourImpression) {
            if (!aClass) {
                GLog.addLog('ObjetImage.prototype.composeImage : aClass non definie');
                return '';
            }
            if (aPourImpression) {
                var lRegleCss = '.' + aClass;
                var lUrl = UtilitaireCss.extraireUrlReglesCss(lRegleCss);
                if (!lUrl) {
                    GLog.addLog('ObjetImage.prototype.composeImage : lUrl non trouvé dans la regle Css : ' + aClass);
                    return '';
                }
                var lPosition = UtilitaireCss.chercherAttributReglesCss(lRegleCss, 'position');
                var lHeight = UtilitaireCss.chercherAttributReglesCss(lRegleCss, 'height');
                if (!lPosition) {
                    lPosition = 'relative';
                }
                var lLargeur = aLargeur;
                if (!lLargeur) {
                    lLargeur = parseInt(UtilitaireCss.chercherAttributReglesCss(lRegleCss, 'width'));
                }
                var lLeft, lTop = 0;
                var lBackGroundPosition = UtilitaireCss.chercherAttributReglesCss(lRegleCss, 'backgroundPosition');
                if (lBackGroundPosition) {
                    var lTab = lBackGroundPosition.split(' ');
                    if (lTab.length === 2) {
                        lLeft = lTab[0];
                        lTop = lTab[1];
                    }
                } else {
                    lLeft = UtilitaireCss.chercherAttributReglesCss(lRegleCss, 'left');
                    lTop = UtilitaireCss.chercherAttributReglesCss(lRegleCss, 'top');
                }
                var lStyle = '';
                if (lPosition) {
                    lStyle += 'position:' + lPosition + ';';
                }
                if (lHeight) {
                    lStyle += 'height:' + lHeight + ';';
                }
                if (lLeft) {
                    lStyle += 'left:' + lLeft + ';';
                }
                if (lTop) {
                    lStyle += 'top:' + lTop + ';';
                }
                return '<div style="' + GStyle.composeWidth(lLargeur) + 'margin-left:auto; margin-right:auto; overflow: hidden">' + '<img src="' + lUrl + '" style="' + lStyle + '" ></img></div>';
            } else {
                return '<div class="' + aClass + '" style="' + (aLargeur ? GStyle.composeWidth(aLargeur) : '') + 'margin-left:auto; margin-right:auto;">&nbsp;</div>';
            }
        };
        ObjetImage.prototype.setImage = function(aId, aClass) {
            GHtml.setHtml(aId, this.compose(aClass));
        };
        ObjetImage.prototype.retailler = function(aId, aWidth, aHeight) {
            if (document.images[aId].width > document.images[aId].height) {
                document.images[aId].width = aWidth;
            } else {
                document.images[aId].height = aHeight;
            }
        };
        module.exports = new ObjetImage();
    },
    fn: "objetimage.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Produit/Css/Form-components.css');
        var MethodesObjet = require('MethodesObjet.js');
        var GChaine = require('GChaine.js');
        var GHtml = require('GHtml.js');
        var GPosition = require('GPosition.js');
        var EEvent = require('Enumere_Event.js');
        var Identite = require('ObjetIdentite.js');
        var GImage = require('ObjetImage.js');
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        var EGenreAttribut = require('ObjetWAI.js').EGenreAttribut;
        var EGenreBoutonCellule = {
            Aucun: 0,
            Fleche: 1,
            Loupe: 2,
            Points: 3,
            Image: 4
        };
        MethodesObjet.heritagePrototype(ObjetCelluleBouton, Identite);

        function ObjetCelluleBouton() {
            this.inheritedCreate(arguments);
            this.idZone = this.Nom + '_Zone';
            this.NomEdit = this.Nom + '_Edit';
            this.NomDescr = this.Nom + '_Descr';
            this.idTexte = this.NomEdit;
            this.idBouton = this.Nom + '_Bouton';
            this.libelle = '';
            this._options = {
                hauteur: 18,
                largeur: 80,
                largeurBouton: null,
                genreBouton: EGenreBoutonCellule.Aucun,
                classImageBouton: '',
                avecBordures: true,
                couleurFondSurvol: null,
                avecCouleurFondBouton: true,
                avecFocusVisibleTexte: true,
                avecZoneSaisie: true,
                estSaisissable: false,
                selectionSaisieSurFocus: false,
                taillePolice: 10,
                classeZone: 'FondBlanc',
                classTexte: '',
                classBackground: '',
                styleZoneTexte: '',
                styleBouton: '',
                placeHolder: '',
                libelleHaut: '',
                withTabulation: true,
                roleWAIZone: '',
                labelWAIEdit: '',
                describedByWAI: false,
                desactiverAideSaisie: false,
                titleForce: '',
                setValue: null,
                editAvecTrim: false
            };
            this.setOptions_ObjetCelluleBouton({
                estSaisissable: true,
                genreBouton: EGenreBoutonCellule.Fleche
            });
            this.IdPremierElement = this.NomEdit;
        }
        ObjetCelluleBouton.prototype.getControleur = function(aInstance) {
            return {
                ifLibelleHaut: function() {
                    return !!aInstance._options.libelleHaut;
                },
                htmlLibelleHaut: function() {
                    return aInstance._options.libelleHaut;
                },
                surZoneMouseenterMouseleave: function(aEvent) {
                    if (!this.instance.Actif) {
                        return;
                    }
                    this.instance._enSurvol = aEvent.type === 'mouseenter';
                    this.controleur.$refreshSelf();
                },
                getClassZone: function() {
                    return 'Texte' + this.instance._options.taillePolice + ' ' + this.instance._options.classeZone + ' CelluleBoutonZoneJQ' + (this.instance.Actif ? ' AvecMain' : '');
                },
                getStyleZone: function() {
                    return {
                        'background-color': this.instance.Actif && this.instance._options.couleurFondSurvol ? this.instance._enSurvol ? this.instance._options.couleurFondSurvol : '' : '',
                        'width': (this.instance._options.largeur && this.instance._options.largeur !== '100%' ? this.instance._options.largeur + 'px' : '')
                    };
                },
                getTitleDescriptionEdit: function() {
                    return !this.instance._options.titleForce ? this.instance.estLibelleHTML ? '' : (this.instance.libelle && GChaine.GetLongueurChaineDansDiv(this.instance.libelle, this.instance._options.taillePolice, false) >= this.instance._getLargeurTexte()) ? GChaine.enleverEntites(this.instance.libelle) : '' : this.instance._options.titleForce;
                },
                edit: {
                    getValue: function() {
                        return aInstance.libelle;
                    },
                    setValue: function(aValue) {
                        aInstance.libelle = aValue;
                        if (aInstance._options.setValue) {
                            aInstance._options.setValue(aValue, aInstance);
                        }
                    },
                    getDisabled: function() {
                        return !aInstance.Actif;
                    },
                    node: function() {
                        if (!aInstance._options.estSaisissable) {
                            $(this.node).on('focus', function() {
                                GHtml.setFocus(this, false);
                            });
                        }
                        $(this.node).on('keyup blur focusout', function(aEvent) {
                            _surEventEdit(aInstance, aEvent);
                        });
                    },
                    getNodeSansSaisie: function() {
                        $(this.node).on('mousedown click keyup blur focusout', function(aEvent) {
                            _surEventEdit(aInstance, aEvent);
                        });
                    },
                    getClassEdit: function() {
                        return 'CelluleBoutonNomEditJQ Texte' + this.instance._options.taillePolice + ' ' + (this.instance._options.classTexte || '') + (this.instance.Actif ? (this.instance._options.estSaisissable ? ' AvecTexte' : ' AvecMain') : '') + ' ' + (this.instance._options.classBackground || '');
                    },
                    getStyleEdit: function() {
                        return {
                            width: this.instance._getLargeurTexte()
                        };
                    },
                    getStylePourBoutonNonEditable: function() {
                        return {
                            'background-color': this.instance.Actif ? '' : GCouleur.nonEditable.fond
                        };
                    }
                },
                getHtmlConsult: function() {
                    return this.instance.libelle || !this.instance._options.placeHolder ? GChaine.AvecEspaceSiVide(this.instance.estLibelleHTML ? this.instance.libelle : GChaine.Insecable(this.instance.libelle)) : '<span class="as-placeholder">' + this.instance._options.placeHolder || '' + '</span>';
                },
                htmlBouton: function() {
                    switch (this.instance._options.genreBouton) {
                        case EGenreBoutonCellule.Aucun:
                            return '';
                        case EGenreBoutonCellule.Fleche:
                            return '<img src="images/fle_bas.gif" alt=""></img>';
                        case EGenreBoutonCellule.Loupe:
                            return GImage.compose('Image_Loupe');
                        case EGenreBoutonCellule.Points:
                            return '<span class="PetitEspaceGauche PetitEspaceDroit Gras" ie-style="styleBoutonPoints">' + '...' + '</span>';
                        case EGenreBoutonCellule.Image:
                            return this.instance._options.classImageBouton ? GImage.compose(this.instance._options.classImageBouton) : '';
                    }
                    return '';
                },
                getStyleBouton: function() {
                    return {
                        'background-color': this.instance._options.avecCouleurFondBouton ? this.instance.Actif ? this.instance._enSurvol ? GCouleur.themeNeutre.moyen2 : GCouleur.blanc : GCouleur.nonEditable.fond : '',
                        'width': _getLargeur.call(this.instance) + 'px'
                    };
                },
                getClassBouton: function() {
                    switch (this.instance._options.genreBouton) {
                        case EGenreBoutonCellule.Aucun:
                            return 'as-input ' + (this.instance.Actif ? ' actif' : '');
                        case EGenreBoutonCellule.Fleche:
                            return 'as-input as-select ';
                        case EGenreBoutonCellule.Loupe:
                            return 'as-input as-search';
                        case EGenreBoutonCellule.Points:
                            return 'as-input  as-multi-choix';
                        case EGenreBoutonCellule.Image:
                            return 'as-input  as-date-picker';
                    }
                    return '';
                },
                surEventBouton: function(aEvent) {
                    if (!aInstance.Actif) {
                        return;
                    }
                    var lEvent = null;
                    switch (aEvent.type) {
                        case 'mousedown':
                            lEvent = EEvent.SurMouseDown;
                            break;
                        case 'click':
                            lEvent = EEvent.SurClick;
                            break;
                        case 'keyup':
                            lEvent = EEvent.SurKeyUp;
                            break;
                    }
                    if (lEvent !== null) {
                        aInstance.callback.appel(lEvent, aEvent, false);
                        if (aInstance.Pere && aInstance.Pere.$refreshSelf) {
                            aInstance.Pere.$refreshSelf();
                        }
                    }
                },
                styleBoutonPoints: function() {
                    return {
                        color: this.instance.Actif ? GCouleur.noir : GCouleur.themeNeutre.moyen2
                    };
                }
            };
        };

        function _surEventEdit(aInstance, aEvent) {
            if (!aInstance.Actif) {
                return;
            }
            var lEvent = null;
            switch (aEvent.type) {
                case 'keyup':
                    lEvent = EEvent.SurKeyUp;
                    break;
                case 'blur':
                    lEvent = EEvent.SurBlur;
                    break;
                case 'focusout':
                    lEvent = EEvent.SurFocusOut;
                    break;
                case 'mousedown':
                    lEvent = EEvent.SurMouseDown;
                    break;
                case 'click':
                    lEvent = EEvent.SurClick;
                    break;
                default:
                    ;
            }
            if (lEvent) {
                aInstance.callback.appel(lEvent, aEvent, true);
                if (aInstance.Pere && aInstance.Pere.$refreshSelf) {
                    aInstance.Pere.$refreshSelf();
                }
            }
        }
        ObjetCelluleBouton.prototype.setWithTabulation = function(aValeur) {
            this.setOptions_ObjetCelluleBouton({
                withTabulation: aValeur
            });
            GHtml.setTabIndex(this.idTexte, aValeur ? 0 : -1);
        };
        ObjetCelluleBouton.prototype.setParametres_PN = function(aAvecBouton, aLargeur, aHauteur, aClassTexte) {
            this.setOptions_ObjetCelluleBouton({
                genreBouton: aAvecBouton ? EGenreBoutonCellule.Fleche : EGenreBoutonCellule.Aucun,
                largeur: aLargeur,
                hauteur: aHauteur ? aHauteur : 15,
                classTexte: aClassTexte ? aClassTexte : 'Gras',
                estSaisissable: false,
                avecZoneSaisie: false
            });
        };
        ObjetCelluleBouton.prototype.setOptions_ObjetCelluleBouton = function(aOptions) {
            $.extend(this._options, aOptions);
            this.avecBouton = this._options.genreBouton !== EGenreBoutonCellule.Aucun;
            this.$refreshSelf();
        };
        ObjetCelluleBouton.prototype.SetInformationWAI = function(aGenreRoleWAI, aLabelFor) {
            this._options.roleWAIZone = aGenreRoleWAI === null || aGenreRoleWAI === undefined ? '' : aGenreRoleWAI;
            this._options.labelWAIZone = aLabelFor === null || aLabelFor === undefined ? '' : aLabelFor;
        };

        function _getLargeur() {
            return this._options.largeurBouton ? this._options.largeurBouton : this._options.hauteur + (this._options.avecZoneSaisie ? -1 : 0);
        }
        ObjetCelluleBouton.prototype.ConstruireAffichage = function() {
            var H = [];
            H.push('<div ie-if="ifLibelleHaut" ie-html="htmlLibelleHaut" class="LibelleHaut"></div>');
            if (this._options.avecZoneSaisie) {
                H.push('<div class="as-search"><input type="text" ie-model="edit"', (this._options.editAvecTrim ? ' ie-trim ' : ''), ' id="' + this.NomEdit + '" ', this._options.desactiverAideSaisie ? 'autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"' : '', 'ie-title="getTitleDescriptionEdit"', this._options.selectionSaisieSurFocus ? ' ie-selecttextfocus ' : '', (!this._options.estSaisissable ? 'readonly  aria-readonly="true" ' : ''), GObjetWAI.composeRole(EGenreRole.Combobox), ' ', GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.autocomplete,
                    valeur: 'list'
                }) + ' ', (this._options.owns ? GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.owns,
                    valeur: this._options.owns
                }) + ' ' : ''), (this._options.labelWAIEdit ? GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.label,
                    valeur: this._options.labelWAIEdit
                }) + ' ' : ''), (this._options.describedByWAI ? GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.describedby,
                    valeur: this._options.describedByWAI
                }) + ' ' : ''), ' placeholder="', this._options.placeHolder || '', '" />', '</div>');
            } else {
                H.push('<div', (this._options.withTabulation ? ' tabIndex="0"' : ''), ' id="', this.idTexte, '"', 'ie-html="getHtmlConsult" ', GHtml.composeAttr('ie-node', 'edit.getNodeSansSaisie'), ' ie-class="getClassBouton"', ' ie-style="edit.getStyleEdit"', !this._options.titleForce && !this.estLibelleHTML ? ' ie-ellipsis ' : '', this._options.titleForce ? ' title="' + GChaine.toTitle(this._options.titleForce) + '"' : '', ' ', GObjetWAI.composeRole(EGenreRole.Combobox), ' ' + GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.autocomplete,
                    valeur: 'list'
                }), (this._options.owns ? ' ' + GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.owns,
                    valeur: this._options.owns
                }) : ''), (this._options.labelWAIEdit ? ' ' + GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.label,
                    valeur: this._options.labelWAIEdit
                }) : ''), (this._options.describedByWAI ? ' ' + GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.describedby,
                    valeur: this._options.describedByWAI
                }) : ''), (GNavigateur.isTactile ? 'style="max-width:' + this._options.largeur + 'px"' : ''), ' placeholder="', this._options.placeHolder || '', '" >'), '</div>';
            }
            H.push('</div>');
            return H.join('');
        };
        ObjetCelluleBouton.prototype.RecupererDonnees = function() {
            if (!GHtml.elementExiste(this.idZone)) {
                return;
            }
            var lEventMap = {};
            if (this._options.avecFocusVisibleTexte) {
                lEventMap = {
                    'focusin': function() {
                        $(this).find('.CelluleBoutonNomEditJQ').css('outline', GCouleur.texte + ' dotted 1px');
                    },
                    'focusout': function() {
                        $(this).find('.CelluleBoutonNomEditJQ').css('outline', 'none');
                    }
                };
            }
            $('#' + this.Nom.escapeJQ()).on(lEventMap, {
                instance: this
            }).addClass('OmbreFocus').data('couleurFocus', GCouleur.texte);
        };
        ObjetCelluleBouton.prototype.SetActif = function(AActif) {
            this.inherited('SetActif', AActif);
            this.$refreshSelf();
        };
        ObjetCelluleBouton.prototype.setLibelle = function(aLibelle) {
            this.libelle = aLibelle;
            this.estLibelleHTML = false;
            this.$refreshSelf();
        };
        ObjetCelluleBouton.prototype.setLibelleHtml = function(aLibelleHtml) {
            if (this._options.avecZoneSaisie) {
                return;
            }
            this.estLibelleHTML = true;
            this.libelle = aLibelleHtml;
            this.$refreshSelf();
        };
        ObjetCelluleBouton.prototype.getLibelle = function() {
            return this.libelle;
        };
        ObjetCelluleBouton.prototype.setLargeur = function(aLargeur) {
            this.setOptions_ObjetCelluleBouton({
                largeur: aLargeur ? aLargeur : undefined
            });
        };
        ObjetCelluleBouton.prototype.setTitle = function(aTitle) {
            this.setOptions_ObjetCelluleBouton({
                titleForce: aTitle
            });
        };
        ObjetCelluleBouton.prototype.setFocus = function() {
            GHtml.setFocus(this.NomEdit);
        };
        ObjetCelluleBouton.prototype.setAvecBouton = function(aAvecBouton) {
            if (this.avecBouton === aAvecBouton) {
                return;
            }
            this.avecBouton = aAvecBouton;
            GPosition.setWidth(this.NomEdit, this._getLargeurTexte());
            this.$refreshSelf();
        };
        ObjetCelluleBouton.prototype._getLargeurTexte = function() {
            if (this._options.largeur === '100%') {
                return '100%';
            } else {
                return this._options.largeur - 6 - (this.avecBouton ? _getLargeur.call(this) + (this._options.avecBordures ? 1 : 0) : 0);
            }
        };
        module.exports = {
            EGenreBoutonCellule: EGenreBoutonCellule,
            ObjetCelluleBouton: ObjetCelluleBouton
        };
    },
    fn: "objetcellulebouton.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Produit/Css/Form-components.css');
        var GUID = require('GUID.js');
        var GLog = require('IELog.js');
        var MethodesObjet = require('MethodesObjet.js');
        var MethodesTableau = require('MethodesTableau.js');
        var GChaine = require('GChaine.js');
        var GHtml = require('GHtml.js');
        var GPosition = require('GPosition.js');
        var GStyle = require('GStyle.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');
        var EGenreEvenementObjetSaisie = require('Enumere_EvenementObjetSaisie.js');
        var EEvent = require('Enumere_Event.js');
        var EGenreSaisie = require('Enumere_Saisie.js');
        require('iehtml.bouton.js');
        require('iehtml.btnimage.js');
        require('IEHtmlComposants.js');
        var ObjetCelluleBouton = require('ObjetCelluleBouton.js').ObjetCelluleBouton;
        var Identite = require('ObjetIdentite.js');
        var ObjetElement = require('ObjetElement.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var GTraductions = require('ObjetTraduction.js');
        var GObjetWAI = require('ObjetWAI.js').GObjetWAI;
        var EGenreRole = require('ObjetWAI.js').EGenreRole;
        var EGenreAttribut = require('ObjetWAI.js').EGenreAttribut;
        var EGenreObjet = require('ObjetWAI.js').EGenreObjet;
        var EGenreBoutonCellule = require('ObjetCelluleBouton.js').EGenreBoutonCellule;
        var TypeThemeBouton = require('Type_ThemeBouton.js');
        var ToucheClavier = require('ToucheClavier.js');
        var ObjetTri = require('ObjetTri.js').ObjetTri;

        function ObjetSaisie() {
            this.inheritedCreate(arguments);
            this.NomListe = this.Nom + '_Liste';
            this.idContenu = this.Nom + '_Contenu';
            this.idContenuScroll = this.Nom + '_ContenuScroll';
            this.idWrapperBouton = this.Nom + '_wrapperbouton';
            this.NomLabel = this.Nom + '_Label';
            this.idBtnValidation = this.Nom + '_btnValidation';
            this.idBloc = this.Nom + '_bloc';
            this.withTabulation = true;
            this.Survolee = -1;
            this.Selection = -1;
            this.largeurBouton = 25;
            this.Timer = null;
            this._listeSelections = new ObjetListeElements();
            this.positionTouchStart = false;
            this.lastTouchEndScroll = 0;
            this.modeTactile = false;
            this.cache = {
                editionEnCours: false
            };
            this.init();
        }
        MethodesObjet.heritagePrototype(ObjetSaisie, Identite);
        var lClasseJQ = GUID.getClassCss(),
            c_decalageTopOuvertureInverse = 15;
        ObjetSaisie.prototype.init = function() {
            _initParseur.bind(this)();
            this.bouton = new ObjetCelluleBouton(this.Nom + '.bouton', null, this, _surEvenementBouton.bind(this));
            this.IdPremierElement = this.bouton.NomEdit;
            this.initialiserOptions_ObjetSaisie();
        };
        ObjetSaisie.prototype.DetruireInstances = function() {
            $('#' + this.idContenu.escapeJQ()).stop(true, true);
            clearTimeout(this.cache.timerMAJ);
            clearTimeout(this._timerInitParseur);
            clearTimeout(this._timerEditionRecherche);
        };
        ObjetSaisie.prototype.initialiserOptions_ObjetSaisie = function() {
            this._options = {
                mode: EGenreSaisie.Combo,
                multiSelection: false,
                longueur: 125,
                hauteur: null,
                hauteurLigneDefault: 18,
                hauteurLigneTactile: 36,
                largeurListe: null,
                estLargeurAuto: false,
                getTailleElementlargeurAuto: function(aElement, aEstGras) {
                    return Math.ceil(GChaine.GetLongueurChaineDansDiv(aElement.GetLibelle(), 10, aEstGras));
                },
                largeurAutoMin: 50,
                largeurAutoMax: 500,
                avecBouton: true,
                couleur: GCouleur,
                controlerNbrElements: false,
                accepterUnElement: false,
                avecGestionUnElement: true,
                avecTriListeElements: false,
                nbrLignes: 15,
                classTexte: 'Gras',
                classBackground: null,
                placeHolder: '',
                desactiverAideSaisie: false,
                classTexteReference: 'Texte10',
                couleurFondDeroulant: null,
                celluleAvecTexteHtml: false,
                getContenuCellule: null,
                texteEdit: '',
                couleurTexteEdit: null,
                styleTexteEdit: null,
                classTexteEdit: null,
                largeurTexteEdit: null,
                libelleHaut: '',
                avecEventSurFermetureListe: false,
                avecFondSelectionSurSurvol: true,
                avecGrasSurSurvol: false,
                modifierContenuCelluleSurSelection: true,
                avecReservationPlaceBarreScroll: false,
                desactiverScrollInfini: false,
                nbBlocsScrollInfini: 2,
                labelWAIZone: '',
                roleWAIZone: '',
                labelWAIEdit: '',
                roleWAIEdit: '',
                describedByWAI: false,
                roleWAIList: EGenreRole.Listbox,
                avecBoutonsPrecSuiv: false,
                avecBoutonsPrecSuivVisiblesInactifs: true,
                avecBoutonsPrecSuiv_boucle: false,
                optionsBouton: {},
                getPaddingLeftElement: null,
                getCouleurFondElement: null,
                getClassElement: null,
                getContenuElement: null,
                getEstElementNonSelectionnable: null,
                getElementSelectionnableParPrecSuiv: null,
                surValidation: null,
                getInfosElementCB: null,
                getLibelleCelluleMultiSelection: function(aListeSelections) {
                    return aListeSelections ? aListeSelections.getTableauLibelles().join(', ') : '';
                },
                surEditionRecherche: null,
                nbCarMinRecherche: 2,
                delaiSurEditionRecherche: 500,
                rechercheTout: ['', '*'],
                avecSurlignageSuggestion: true,
                couleurSurlignageSuggestion: GCouleur.surlignageTexte,
                avecSurlignageElement: null,
                callbackToutCalcule: null
            };
        };
        ObjetSaisie.prototype.setOptions_ObjetSaisie = function(aOptions) {
            $.extend(this._options, aOptions);
            this._options.couleur = GCouleur;
            var lEstListeOuCombo = MethodesTableau.existe(this._options.mode, [EGenreSaisie.Combo]),
                lAvecSaisieRechercheDynamique = _avecSaisieRechercheDynamique.call(this);
            var lOptionsBouton = $.extend({
                estSaisissable: !lEstListeOuCombo,
                avecZoneSaisie: !lEstListeOuCombo,
                genreBouton: this._options.avecBouton ? lEstListeOuCombo ? EGenreBoutonCellule.Fleche : EGenreBoutonCellule.Loupe : EGenreBoutonCellule.Aucun,
                largeur: $.isNumeric(this._options.longueur) ? this._options.longueur + this.largeurBouton : this._options.longueur,
                hauteur: this._options.hauteur || undefined,
                classTexte: this._options.classTexte,
                classBackground: this._options.classBackground,
                placeHolder: this._options.placeHolder,
                desactiverAideSaisie: this._options.desactiverAideSaisie || this._options.mode === EGenreSaisie.SaisieRecherche,
                roleWAIZone: this._options.roleWAIZone || undefined,
                roleWAIEdit: this._options.roleWAIEdit || undefined,
                labelWAIZone: this._options.labelWAIZone || undefined,
                describedByWAI: this._options.describedByWAI || undefined,
                owns: lEstListeOuCombo ? this.NomListe : '',
                setValue: this._options.mode === EGenreSaisie.SaisieRecherche ? _modificationSaisieBoutonRecherche.bind(this) : null,
                editAvecTrim: lAvecSaisieRechercheDynamique,
                selectionSaisieSurFocus: lAvecSaisieRechercheDynamique
            }, aOptions.optionsBouton);
            this.bouton.setOptions_ObjetCelluleBouton(lOptionsBouton);
            this.$refreshSelf();
            return this;
        };

        function _avecSaisieRechercheDynamique() {
            return this._options.mode === EGenreSaisie.SaisieRecherche && !this.modeTactile && !!this._options.surEditionRecherche;
        }

        function _trierElements() {
            if (this._options.avecTriListeElements && this.ListeElements) {
                this.ListeElements.trier();
            }
        }

        function _callbackRecherche(aParam) {
            var lParam = Object.assign({
                liste: null
            }, aParam);
            if (lParam.liste && lParam.liste.GetNbrElements() > 0) {
                this.ListeElements = lParam.liste;
                _trierElements.call(this);
                this.FermerListe(false);
                _deroulerListe.call(this, 0, false, true);
            } else {
                this.FermerListe(false);
            }
        }

        function _modificationSaisieBoutonRecherche(aValue) {
            this.ListeElements = new ObjetListeElements();
            this.Selection = -1;
            var lValue = (aValue + '').trim();
            clearTimeout(this._timerEditionRecherche);
            if (lValue.length < this._options.nbCarMinRecherche) {
                this.FermerListe(false);
            } else if (this._options.surEditionRecherche) {
                this.cache.editionEnCours = true;
                if (_avecSaisieRechercheDynamique.call(this)) {
                    if (this._options.delaiSurEditionRecherche >= 0) {
                        this._timerEditionRecherche = setTimeout(function() {
                            this.cache.surDemandeSaisieRechercheTout = false;
                            this._options.surEditionRecherche(lValue, _callbackRecherche.bind(this));
                        }.bind(this), this._options.delaiSurEditionRecherche);
                    } else {
                        this.cache.surDemandeSaisieRechercheTout = false;
                        this._options.surEditionRecherche(lValue, _callbackRecherche.bind(this));
                    }
                }
            }
        }

        function _chercherIndiceSelectionSelonSens(aIndice, aPrecedent, aEnBoucle, aMethodeSelec) {
            if (!this.ListeElements || !this.ListeElements.GetNbrElements) {
                return -1;
            }
            var lIndice = aIndice,
                lNbr = this.ListeElements.GetNbrElements();
            if (lIndice !== null && lIndice !== undefined) {
                while (lIndice < lNbr &&
                    lIndice >= 0 && (!_estSelectionnable.call(this, this.ListeElements.GetElement(lIndice)) || (aMethodeSelec && aMethodeSelec({
                        element: this.ListeElements.GetElement(lIndice)
                    }) !== true))) {
                    lIndice += aPrecedent ? -1 : 1;
                }
            } else {
                lIndice = -1;
            }
            if (lIndice >= lNbr) {
                lIndice = -1;
            }
            if (aEnBoucle && lIndice === -1) {
                return _chercherIndiceSelectionSelonSens.call(this, aPrecedent ? lNbr - 1 : 0, aPrecedent, false, aMethodeSelec);
            }
            return lIndice;
        }

        function _boutonPrecSuivOK(aPrecedent) {
            var lListe = this.ListeElements;
            if (!lListe || !lListe.GetElement) {
                return false;
            }
            var lIndice = this.Selection,
                lEnBoucle = this._options.avecBoutonsPrecSuiv_boucle;
            if (lIndice === -1) {
                if (aPrecedent) {
                    lIndice = lEnBoucle ? 0 : -1;
                } else {
                    return lListe.GetNbrElements() > 0;
                }
            }
            var lElement = lListe.GetElement(lIndice);
            if (!lElement) {
                return false;
            }
            if (aPrecedent && lListe.GetElement(_chercherIndiceSelectionSelonSens.call(this, lIndice - 1, true, lEnBoucle, this._options.getElementSelectionnableParPrecSuiv))) {
                return true;
            }
            if (!aPrecedent && lListe.GetElement(_chercherIndiceSelectionSelonSens.call(this, lIndice + 1, false, lEnBoucle, this._options.getElementSelectionnableParPrecSuiv))) {
                return true;
            }
            return false;
        }

        function _parcourirFilsDeCumul(aIndice, aFunction) {
            var lInfos = this._infosElementsCbs[aIndice];
            this.ListeElements.parcourir(function(D, aIndex) {
                if (aIndice !== aIndex &&
                    D.Visible !== false && (!lInfos.estFilsCumul || lInfos.estFilsCumul(D))) {
                    aFunction.call(this, D, aIndex);
                }
            }, this);
        }

        function _getSelectionElement(aInfos, aIndice) {
            var lResult = {
                selectionne: false,
                nbFils: 0,
                nbFilsSelectionne: 0
            };
            if (!aInfos.estCumul) {
                lResult.selectionne = aInfos.selectionne;
            } else {
                _parcourirFilsDeCumul.call(this, aIndice, function(D, aIndex) {
                    lResult.nbFils += 1;
                    var lInfosFils = this._infosElementsCbs[aIndex];
                    if (lInfosFils && lInfosFils.selectionne) {
                        lResult.nbFilsSelectionne += 1;
                    }
                });
                lResult.selectionne = lResult.nbFilsSelectionne > 0 && lResult.nbFilsSelectionne === lResult.nbFils;
            }
            return lResult;
        }

        function getValueElementCB(aIndice) {
            var lInfos = this._infosElementsCbs ? this._infosElementsCbs[aIndice] : null;
            if (lInfos) {
                return _getSelectionElement.call(this, lInfos, aIndice).selectionne;
            }
            return false;
        }

        function _modifierSelectionElement(aIndice, aValue, aProfondeur) {
            var lInfos = this._infosElementsCbs ? this._infosElementsCbs[aIndice] : null;
            if (lInfos) {
                lInfos.selectionne = aValue;
                var lElementSource = this.ListeElements.GetElement(aIndice),
                    lProfondeur = aProfondeur || 0;
                if (lProfondeur > 1) {
                    return;
                }
                this.ListeElements.parcourir(function(D, aIndex) {
                    var lInfosElement = this._infosElementsCbs ? this._infosElementsCbs[aIndex] : null;
                    if (aIndice !== aIndex &&
                        D.Visible !== false &&
                        lInfosElement &&
                        !lInfosElement.estCumul &&
                        lInfosElement.setModifierSelection) {
                        var lResult = lInfosElement.setModifierSelection({
                            elementCourantSelectionne: lInfosElement.selectionne,
                            elementSource: lElementSource,
                            elementSourceSelectionne: aValue
                        });
                        if ((lResult === true && lInfosElement.selectionne !== true) || (lResult === false && lInfosElement.selectionne !== false)) {
                            _modifierSelectionElement.call(this, aIndex, lResult, lProfondeur + 1);
                        }
                    }
                }, this);
            }
        }

        function _setValueElementCB(aIndice, aValue) {
            var lInfos = this._infosElementsCbs ? this._infosElementsCbs[aIndice] : null;
            if (lInfos) {
                if (lInfos.estCumul) {
                    _parcourirFilsDeCumul.call(this, aIndice, function(D, aIndex) {
                        _modifierSelectionElement.call(this, aIndex, aValue);
                    });
                } else {
                    _modifierSelectionElement.call(this, aIndice, aValue);
                }
            }
        }

        function _surPrecedentSuivant(aPrecedent) {
            var lIndice = this.Selection,
                lListe = this.ListeElements,
                lEnBoucle = this._options.avecBoutonsPrecSuiv_boucle,
                lMethodeSelec = this._options.getElementSelectionnableParPrecSuiv;
            if (this._options.multiSelection && lListe) {
                lListe.parcourir(function(D, aIndex) {
                    var lInfos = this._infosElementsCbs ? this._infosElementsCbs[aIndex] : null;
                    if (lInfos && !lInfos.estCumul && lInfos.selectionne) {
                        lIndice = aIndex;
                        if (aPrecedent) {
                            return false;
                        }
                    }
                }, this);
            }
            if (lIndice === -1 && aPrecedent) {
                lIndice = lEnBoucle ? 0 : -1;
            }
            if (MethodesObjet.isNumber(lIndice) && lListe && lListe.GetElement) {
                if (aPrecedent && (lListe.GetElement(lIndice - 1) || lEnBoucle)) {
                    lIndice = _chercherIndiceSelectionSelonSens.call(this, lIndice - 1, true, lEnBoucle, lMethodeSelec);
                } else if (!aPrecedent && (lListe.GetElement(lIndice + 1) || lEnBoucle)) {
                    lIndice = _chercherIndiceSelectionSelonSens.call(this, lIndice + 1, false, lEnBoucle, lMethodeSelec);
                }
                if (lIndice >= 0) {
                    if (this._options.multiSelection) {
                        lListe.parcourir(function(D, aIndex) {
                            var lInfos = this._infosElementsCbs ? this._infosElementsCbs[aIndex] : null;
                            if (lInfos && lInfos.selectionne) {
                                lInfos.selectionne = false;
                            }
                        }, this);
                        _setValueElementCB.call(this, lIndice, true);
                        this.SurValidation(true, lIndice);
                    } else {
                        this.SurValidation(true, lIndice);
                    }
                }
            }
        }
        ObjetSaisie.prototype.getControleur = function(aInstance) {
            return {
                ifLibelleHaut: function() {
                    return !!aInstance._options.libelleHaut;
                },
                htmlLibelleHaut: function() {
                    return aInstance._options.libelleHaut;
                },
                getTitleHtml: function(aChaine) {
                    return aChaine;
                },
                listeEventOut: function() {
                    if (aInstance.listeDeroulee && aInstance.activerEventOut) {
                        _declencherFermetureListe.call(aInstance);
                    }
                },
                getWidthListeRem: function() {
                    return {
                        width: (_getLargeurListe.call(aInstance) * 0.1) + 'rem'
                    };
                },
                getStyleListe: function() {
                    return {
                        width: _getLargeurListe.call(aInstance) + 'px'
                    };
                },
                btnSuivPrec: {
                    event: function(aPrecedent) {
                        _surPrecedentSuivant.call(this.instance, aPrecedent);
                    },
                    getDisabled: function(aPrecedent) {
                        return !_boutonPrecSuivOK.call(this.instance, aPrecedent);
                    },
                    getStyle: function(aPrecedent) {
                        if (this.instance._options.avecBoutonsPrecSuivVisiblesInactifs) {
                            return;
                        }
                        return {
                            visibility: _boutonPrecSuivOK.call(this.instance, aPrecedent) ? '' : 'hidden'
                        };
                    }
                },
                getClassesDynamiques: function() {
                    var lClasses = [];
                    if (!aInstance.getActif()) {
                        lClasses.push('input-wrapper-disabled');
                    }
                    return lClasses.join(' ');
                },
                getNodeContenu: function() {
                    if (aInstance.cache.scrollInfiniActif) {
                        $(this.node).on('scroll', function() {
                            if (aInstance.cache.surReinitScroll) {
                                return;
                            }
                            var lPosition = $('#' + aInstance.idContenuScroll.escapeJQ()).parent().position();
                            _majBlocsDeTop.call(aInstance, lPosition.top);
                        });
                    }
                },
                getAttrWAIOption: function(aLigne) {
                    var lResult = {};
                    if (this.instance._options.multiSelection) {
                        lResult[GObjetWAI.getAttribut(EGenreAttribut.selected)] = '' + (!!this.instance._listeSelections.GetElementParElement(this.instance.ListeElements ? this.instance.ListeElements.GetElement(aLigne) : null));
                    } else {
                        lResult[GObjetWAI.getAttribut(EGenreAttribut.selected)] = '' + (this.instance.Selection === aLigne);
                    }
                    return lResult;
                },
                cbElement: {
                    getValue: function(aIndice) {
                        return getValueElementCB.call(this.instance, aIndice);
                    },
                    setValue: function(aIndice, aValue) {
                        _setValueElementCB.call(this.instance, aIndice, aValue);
                    },
                    getIndeterminate: function(aIndice) {
                        var lInfos = this.instance._infosElementsCbs ? this.instance._infosElementsCbs[aIndice] : null;
                        if (lInfos) {
                            var lSelection = _getSelectionElement.call(this.instance, lInfos, aIndice);
                            return lSelection.nbFilsSelectionne > 0 && lSelection.nbFilsSelectionne < lSelection.nbFils;
                        }
                        return false;
                    },
                    getDisabled: function(aIndice) {
                        var lInfos = this.instance._infosElementsCbs ? this.instance._infosElementsCbs[aIndice] : null;
                        if (lInfos) {
                            return lInfos.nonEditable;
                        }
                        return false;
                    }
                },
                getNodeCBMulti: function() {
                    $(this.node).on({
                        'mouseup touchend pointerup': function(event) {
                            if (event.type === 'pointerup' && event.originalEvent.pointerType !== 'touch') {
                                return;
                            }
                            var lNode = _getNodeOrigineTouchend(event);
                            if (lNode && lNode !== this) {
                                return;
                            }
                            var lPositionFin = _getPositionTouchend(event);
                            if (aInstance.positionTouchStart) {
                                var lEstScrolle = !!lPositionFin && (Math.abs(lPositionFin.x - aInstance.positionTouchStart.x) > aInstance._options.hauteurLigneTactile || Math.abs(lPositionFin.y - aInstance.positionTouchStart.y) > aInstance._options.hauteurLigneTactile);
                                aInstance.positionTouchStart = false;
                                if (lEstScrolle) {
                                    aInstance.lastTouchEndScroll = new Date().getTime();
                                    return;
                                }
                            }
                            if (aInstance.modeTactile && event.type === 'mouseup' && new Date().getTime() - aInstance.lastTouchEndScroll < 500) {
                                return;
                            }
                        },
                        'mouseenter mouseleave': function(event) {
                            if (event.type === 'mouseenter') {
                                _selectionLigne.call(aInstance, aInstance.Survolee, false);
                                aInstance.Survolee = -1;
                            }
                        }
                    });
                },
                btnValidationCB: {
                    event: function(aEvent) {
                        aEvent.stopPropagation();
                        this.instance.SurValidation(true, -1, {
                            validationMultiSelection: true
                        });
                    },
                    getNode: function() {
                        $(this.node).on({
                            mouseover: function() {
                                _survolBoutonMultiSelection.call(aInstance);
                            },
                            focusin: function() {
                                _arreterFermetureListe.call(aInstance);
                            },
                            focusout: function() {
                                _declencherFermetureListe.call(aInstance);
                            }
                        });
                    }
                }
            };
        };
        ObjetSaisie.prototype.SetParametres = function(AMode, ALongueur, AAvecBouton, aAvecStyleSite, aControlerNbrElements, aHauteur, aClassTexte) {
            this.setOptions_ObjetSaisie({
                mode: AMode,
                longueur: ALongueur === null || ALongueur === undefined ? undefined : ALongueur,
                hauteur: aHauteur,
                avecBouton: AAvecBouton === null || AAvecBouton === undefined ? undefined : AAvecBouton,
                controlerNbrElements: aControlerNbrElements,
                classTexte: aClassTexte
            });
            GLog.addLog('ObjetSaisie.prototype.SetParametres deprecated!', null, GLog.genre.Avertissement);
        };
        ObjetSaisie.prototype.setLabel = function(aTexte, aClass, aStyle) {
            this._options.texteEdit = aTexte;
            $.extend(this._options, {
                classTexteEdit: aClass ? aClass : undefined,
                styleTexteEdit: aStyle ? aStyle : undefined
            });
            var lElementLabel = GHtml.getElement(this.NomLabel);
            if (GHtml.estElement(lElementLabel)) {
                GHtml.setHtml(lElementLabel, GChaine.Insecable(this._options.texteEdit) + '&nbsp;');
                if (this._options.classTexteEdit) {
                    GHtml.setClass(lElementLabel, this._options.classTexteReference + ' ' + this._options.classTexteEdit);
                }
                if (this._options.styleTexteEdit) {
                    GStyle.setStyle(lElementLabel, this._options.styleTexteEdit);
                }
            }
        };
        ObjetSaisie.prototype.setWithTabulation = function(aValeur) {
            this.withTabulation = aValeur;
            this.bouton.setWithTabulation(aValeur);
        };
        ObjetSaisie.prototype.RecupererDonnees = function() {
            this.bouton.Initialiser();
        };

        function _getLargeurListe() {
            return this.modeTactile ? (window.innerWidth || document.body.offsetWidth) / 2 : this._options.largeurListe ? this._options.largeurListe : $.isNumeric(this.cache.largeurCellule) ? this.cache.largeurCellule + this.largeurBouton + 1 : $('#' + this.bouton.GetNom().escapeJQ()).width();
        }
        ObjetSaisie.prototype.ConstruireAffichage = function() {
            $('#' + this.idContenu.escapeJQ()).stop(true, true);
            var H = '';
            var LFor = (this._options.labelWAIZone || MethodesTableau.existe(this._options.mode, [EGenreSaisie.Combo])) ? '' : 'for="' + this.bouton.NomEdit + '"';
            H += '<div ie-if="ifLibelleHaut" ie-html="htmlLibelleHaut" ></div>';
            H += '<div class="input-wrapper ObjetSaisie' + (this._options.longueur === '100%' ? ' ObjetSaisie_100P' : '') + '" ie-class="getClassesDynamiques" ' + GObjetWAI.composeRole(EGenreRole.Presentation) + ' id="' + this.idWrapperBouton + '">';
            if (this._options.texteEdit) {
                if (this._options.largeurTexteEdit) {
                    H += '<div style="' + GStyle.composeWidth(this._options.largeurTexteEdit) + '">';
                }
                var lStyleTextEdit = this._options.couleurTexteEdit ? 'style="' + GStyle.composeCouleurTexte(this._options.couleurTexteEdit) + '"' : this._options.styleTexteEdit ? 'style="' + this._options.styleTexteEdit + '"' : '';
                H += '<label id="' + this.NomLabel + '" class="' + this._options.classTexteReference + ' ' + ((this._options.classTexteEdit !== null && this._options.classTexteEdit !== undefined) ? this._options.classTexteEdit : ' Gras') + '" ' + LFor + ' ' + lStyleTextEdit + '>' + GChaine.Insecable(this._options.texteEdit) + '&nbsp;</label>';
                if (this._options.largeurTexteEdit) {
                    H += '</div>';
                }
            }
            if (this._options.avecBoutonsPrecSuiv) {
                H += '<ie-btnimage class="icon icon_angle_left" ie-model="btnSuivPrec(true)" ie-style="getStyle" title="' + GChaine.toTitle(GTraductions.getValeur('Precedent')) + '"></ie-btnImage>';
            }
            H += '<div class="ObjetSaisie_cont">';
            H += '<div  id="' + this.bouton.GetNom() + '"></div>';
            H += '<div ' + GObjetWAI.composeRole(this._options.roleWAIList) + ' ' + GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.labelledby,
                    valeur: this.bouton.NomEdit
                }) + ' ' + (this._options.multiSelection ? GObjetWAI.composeAttribut({
                    genre: EGenreAttribut.multiselectable,
                    valeur: 'true'
                }) : '') + ' id="' + this.NomListe + '"' +
                GHtml.composeAttr('ie-eventOut', 'listeEventOut') + ' class="deroulant-conteneur-show-hide" tabIndex="-1"' + ' style="display:none;"></div>';
            H += '</div>';
            if (this._options.avecBoutonsPrecSuiv) {
                H += '<ie-btnimage class="icon icon_angle_right" ie-model="btnSuivPrec(false)" ie-style="getStyle" title="' + GChaine.toTitle(GTraductions.getValeur('Suivant')) + '"></ie-btnImage>';
            }
            H += '</div>';
            H += '</div>';
            return H;
        };

        function _surEvenementBouton(aGenreEvent, aEvent, aEvenementSurEdit) {
            switch (aGenreEvent) {
                case EEvent.SurMouseDown:
                    if (aEvenementSurEdit) {
                        if (MethodesTableau.existe(this._options.mode, [EGenreSaisie.Combo])) {
                            this.SurSelection();
                        }
                    } else {
                        this.SurSelection({
                            surBoutonCellule: true
                        });
                    }
                    break;
                case EEvent.SurKeyDown:
                    if (MethodesTableau.existe(this._options.mode, [EGenreSaisie.Combo]) && (aEvent.which === ToucheClavier.FlecheBas || aEvent.which === ToucheClavier.FlecheHaut)) {
                        this.SurSelection();
                    }
                    break;
                case EEvent.SurKeyUp:
                    switch (this._options.mode) {
                        case EGenreSaisie.SaisieRecherche:
                            if (!this.listeDeroulee &&
                                aEvent.which === ToucheClavier.FlecheBas &&
                                this.ListeElements && this.ListeElements.GetNbrElements() > 0) {
                                _deroulerListe.call(this, 0, true);
                            } else {
                                _defilerFleches.call(this, aEvent);
                            }
                            if (ToucheClavier.estEventRetourChariot(aEvent)) {
                                if (this.listeDeroulee && this.ListeElements && this.ListeElements.GetNbrElements()) {
                                    this.SurValidation(true, this.Selection >= 0 ? this.Selection : 0);
                                } else if (this.ListeElements && this.ListeElements.GetNbrElements() && !this.ActualiserListe) {
                                    if (this.getNbElementsVisible() > 1) {
                                        _deroulerListe.call(this, false, true);
                                    } else {
                                        _gererCasUnSeulElement.call(this);
                                    }
                                } else {
                                    this.SurValidation(false, -1, {
                                        saisieRecherche: true
                                    });
                                }
                            }
                            return;
                    }
                    if (ToucheClavier.estEventRetourChariot(aEvent)) {
                        this.SurSelection();
                    }
                    break;
                case EEvent.SurFocusOut:
                    switch (this._options.mode) {
                        case EGenreSaisie.SaisieRecherche:
                            if (_avecSaisieRechercheDynamique.call(this)) {
                                _declencherFermetureListe.call(this);
                            }
                            break;
                    }
                    break;
            }
        }
        ObjetSaisie.prototype.SetSelection = function(ASelection) {
            var lIndice = _chercherIndiceSelectionSelonSens.call(this, ASelection, false);
            if (lIndice >= 0) {
                if (this._options.multiSelection) {
                    _selectionnerUnElementEnMultiSelection.call(this, lIndice);
                }
                this.SurValidation(false, lIndice);
            }
        };
        ObjetSaisie.prototype.SurSelection = function(aParams) {
            if (this.ListeElements && this.ListeElements.GetNbrElements() && !this.ActualiserListe) {
                _deroulerListe.call(this);
            } else {
                this.SurValidation(false, undefined, aParams);
            }
        };
        ObjetSaisie.prototype.DeroulerListe = function() {
            _deroulerListe.call(this);
        };

        function _appliquerGetContenuCellule(aElement) {
            var lContenuCellule = this._options.getContenuCellule(aElement, this);
            if (lContenuCellule && lContenuCellule.libelleHtml) {
                if (MethodesObjet.isString(lContenuCellule.libelleHtml)) {
                    this.bouton.setLibelleHtml(lContenuCellule.libelleHtml);
                }
            } else {
                var lLibelle = lContenuCellule && lContenuCellule.libelle ? lContenuCellule.libelle : lContenuCellule;
                if (lLibelle && MethodesObjet.isString(lLibelle)) {
                    this.SetContenu(lContenuCellule && lContenuCellule.libelle ? lContenuCellule.libelle : lContenuCellule);
                }
            }
        }
        ObjetSaisie.prototype.SurValidation = function(aInteractionUtilisateur, ASelection, aParams) {
            this.InteractionUtilisateur = aInteractionUtilisateur;
            this.cache.surDemandeSaisieRechercheTout = false;
            var lParams = Object.assign({
                saisieRecherche: false,
                validationMultiSelection: false,
                surBoutonCellule: false
            }, aParams);
            var lEstMultiSelection = this._options.multiSelection;
            if (!this.ListeElements ||
                lEstMultiSelection ||
                !this.ListeElements.GetElement(ASelection) ||
                _estSelectionnable.call(this, this.ListeElements.GetElement(ASelection))) {
                this.Selection = ASelection;
                this.FermerListe(true);
                this.$refreshSelf();
                clearTimeout(this._timerEditionRecherche);
                var LValeur;
                var lEditionEnCours = this.cache.editionEnCours;
                this.cache.editionEnCours = false;
                if (lEstMultiSelection) {
                    if (!this._listeSelections) {
                        this._listeSelections = new ObjetListeElements();
                    }
                    this._listeSelections.vider();
                    var lListeIndices = [];
                    if (this.ListeElements) {
                        this.ListeElements.parcourir(function(D, aIndex) {
                            var lInfos = this._infosElementsCbs ? this._infosElementsCbs[aIndex] : null;
                            if (lInfos && ASelection === aIndex && lInfos.estCumul) {
                                this.Selection = -1;
                            }
                            if (lInfos && !lInfos.estCumul && lInfos.selectionne) {
                                this._listeSelections.AddElement(D);
                                lListeIndices.push(aIndex);
                            }
                        }.bind(this));
                    }
                    var lMAJContenu = lParams.validationMultiSelection || this.Selection >= 0 || this._listeSelections.GetNbrElements() > 0;
                    if (lParams.surBoutonCellule && this._options.mode === EGenreSaisie.SaisieRecherche && !lEditionEnCours) {
                        LValeur = '';
                        lMAJContenu = false;
                        this.cache.surDemandeSaisieRechercheTout = true;
                    } else if (lParams.saisieRecherche || lEditionEnCours || (this._options.mode === EGenreSaisie.SaisieRecherche && this._listeSelections.GetNbrElements() === 0 && !lParams.validationMultiSelection)) {
                        LValeur = this.GetContenu();
                    } else {
                        LValeur = this._options.getLibelleCelluleMultiSelection(this._listeSelections);
                    }
                    if (this._options.modifierContenuCelluleSurSelection && lMAJContenu) {
                        this.SetContenu(LValeur);
                    }
                    $('#' + this.NomListe.escapeJQ() + ', #' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.activedescendant), this.Nom + '_' + lListeIndices.join(',' + this.Nom + '_'));
                    $('#' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.labelledby), this.Nom + '_' + lListeIndices.join(',' + this.Nom + '_'));
                } else if (ASelection >= 0) {
                    var lElement = this.ListeElements.GetElement(this.Selection);
                    LValeur = lElement ? lElement.GetLibelle() : '';
                    if (this._options.modifierContenuCelluleSurSelection) {
                        if (this._options.getContenuCellule) {
                            _appliquerGetContenuCellule.call(this, lElement);
                        } else if (this._options.celluleAvecTexteHtml && lElement && lElement.libelleHtml) {
                            this.bouton.setLibelleHtml(lElement.libelleHtml);
                        } else {
                            this.SetContenu(LValeur);
                        }
                        $('#' + this.NomListe.escapeJQ() + ', #' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.activedescendant), this.Nom + '_' + ASelection);
                        $('#' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.labelledby), this.Nom + '_' + ASelection);
                    }
                } else {
                    if (lParams.surBoutonCellule && this._options.mode === EGenreSaisie.SaisieRecherche && !lEditionEnCours) {
                        LValeur = '';
                        this.cache.surDemandeSaisieRechercheTout = true;
                    } else {
                        LValeur = MethodesTableau.existe(this._options.mode, [EGenreSaisie.Combo]) ? '*' : this.GetContenu();
                    }
                }
                if ((ASelection >= 0 || lEstMultiSelection) && this.ControleNavigation && ControleSaisieEvenement) {
                    ControleSaisieEvenement(_retourSurNavigation.bind(this, Object.assign({
                        valeur: LValeur,
                        retourSaisieAnnule: true
                    }, lParams)));
                } else {
                    _retourSurNavigation.call(this, Object.assign({
                        valeur: LValeur,
                        retourSaisieAnnule: false
                    }, lParams));
                }
            }
        };

        function _retourSurNavigation(aParams) {
            if (aParams.retourSaisieAnnule) {
                this.SetEtatSaisie(false);
            }
            var lSurSetDonnes = this._surSetDonnnes;
            var lParams = Object.assign({
                combo: this,
                genreEvenement: EGenreEvenementObjetSaisie.selection,
                element: this.Selection >= 0 ? this.ListeElements.GetElement(this.Selection) : null,
                indice: Math.max(this.Selection || 0, 0),
                genre: this.Genre,
                surSetDonnees: lSurSetDonnes,
                listeSelections: this._listeSelections,
                estComboMultiSelection: this._options.multiSelection,
                interactionUtilisateur: this.InteractionUtilisateur,
                editionEnCours: this.cache.editionEnCours
            }, aParams);
            delete this._surSetDonnnes;
            this.callback.appel(EGenreEvenementObjetSaisie.selection, this.Selection >= 0 ? this.ListeElements.GetElement(this.Selection) : null, Math.max(this.Selection || 0, 0), this.Genre, aParams.valeur, lSurSetDonnes, this._listeSelections, lParams);
            if (this._options.surValidation) {
                this._options.surValidation.call(this.Pere, lParams);
            }
            if (this.Pere && this.Pere.$refreshSelf) {
                this.Pere.$refreshSelf();
            }
            if (this._options.mode === EGenreSaisie.SaisieRecherche) {
                this.ListeElements = new ObjetListeElements();
            }
        }

        function _survolBoutonMultiSelection() {
            _selectionLigne.call(this, this.Survolee, false);
            this.Survolee += 1;
        }

        function _defilerFleches(aEvent) {
            if (this.listeDeroulee) {
                if (aEvent.which === ToucheClavier.FlecheBas) {
                    if (_chercherSuivantSelectionnable.bind(this)(this.Survolee, true) < this.getNbElementsVisible()) {
                        this.SurLigne(_chercherSuivantSelectionnable.bind(this)(this.Survolee, true));
                        return true;
                    }
                    if (this._options.multiSelection && this.Survolee < this.getNbElementsVisible()) {
                        _survolBoutonMultiSelection.call(this);
                        GHtml.setFocus(this.idBtnValidation, true);
                        return true;
                    }
                }
                if (aEvent.which === ToucheClavier.FlecheHaut) {
                    if (_chercherSuivantSelectionnable.bind(this)(this.Survolee, false) > -1) {
                        this.SurLigne(_chercherSuivantSelectionnable.bind(this)(this.Survolee, false));
                    } else {
                        this.FermerListe(true);
                    }
                    return true;
                }
            }
            return false;
        }

        function _defiler(aEvent, aIgnorerFleches) {
            if (!this.listeDeroulee && (MethodesTableau.existe(this._options.mode, [EGenreSaisie.Combo]))) {
                if (ToucheClavier.estEventRetourChariot(aEvent) || aEvent.which === ToucheClavier.FlecheBas) {
                    _deroulerListe.call(this);
                }
            }
            if (this.listeDeroulee) {
                if (ToucheClavier.estEventRetourChariot(aEvent) || ToucheClavier.estEventEspace(aEvent)) {
                    if (this._options.multiSelection) {
                        _setValueElementCB.call(this, this.Survolee, !getValueElementCB.call(this, this.Survolee));
                        this.$refreshSelf();
                    } else {
                        this.SurValidation(true, this.Survolee);
                    }
                } else if (aEvent.which === ToucheClavier.Echap) {
                    this.FermerListe(true);
                } else if (!(!aIgnorerFleches && _defilerFleches.call(this, aEvent)) && ToucheClavier.estEventCaractereAlphaNumerique(aEvent)) {
                    clearTimeout(this._timerInitParseur);
                    this._timerInitParseur = setTimeout(_initParseur.bind(this), 500);
                    this._parseur = this._parseur + aEvent.key;
                    var lIndice = this.ListeElements.GetIndiceParParsingLibelle(this._parseur);
                    if (lIndice >= 0) {
                        this.SurLigne(lIndice);
                    }
                }
            }
        }

        function _initParseur() {
            this._parseur = '';
        }

        function _chercherSuivantSelectionnable(aIndice, aSensSuivant) {
            var lSens = aSensSuivant ? 1 : -1;
            aIndice = aIndice + lSens;
            var N = this.ListeElements.GetNbrElements();
            while ((aIndice > -1) && (aIndice < N) && this.ListeElements && this.ListeElements.GetElement(aIndice) && !_estSelectionnable.call(this, this.ListeElements.GetElement(aIndice))) {
                aIndice += lSens;
            }
            return aIndice;
        }

        function _initInfosElementsCBs(aNumeroLigne) {
            var lElement = this.ListeElements.GetElement(aNumeroLigne);
            this._infosElementsCbs[aNumeroLigne] = {
                selectionne: !!this._listeSelections.GetElementParElement(lElement),
                avecCB: true,
                nonEditable: false,
                estCumul: false,
                estFilsCumul: null,
                setModifierSelection: null
            };
            if (this._options.getInfosElementCB && lElement) {
                $.extend(this._infosElementsCbs[aNumeroLigne], this._options.getInfosElementCB(lElement));
            }
        }

        function _composeLigne(aElement, I) {
            var T = [];
            var LLibelle = aElement.GetLibelle();
            var lParams = {
                element: aElement,
                indice: I
            };
            var lPaddingLeft = 3 + (this._options.getPaddingLeftElement ? this._options.getPaddingLeftElement(lParams) || 0 : 0);
            lParams.largeur = this.cache.largeurContenu - lPaddingLeft;
            var lClassElement = this._options.getClassElement ? this._options.getClassElement(lParams) : '';
            var lAvecEllipsis = !aElement.libelleHtmlTitle && !this._options.getContenuElement;
            if (this.cache.avecSurlignage && this.cache.recherchesSurlignage && !aElement.libelleHtml && !this._options.getContenuElement && (!this._options.avecSurlignageElement || this._options.avecSurlignageElement(lParams))) {
                LLibelle = GChaine.getLibelleSurligne(ObjetTri, LLibelle, this.cache.recherchesSurlignage, {
                    couleur: this._options.couleurSurlignageSuggestion
                });
            } else {
                LLibelle = GChaine.Insecable(LLibelle);
            }
            LLibelle = GChaine.AvecEspaceSiVide(LLibelle);
            T.push('<li', (!!lClassElement ? ' class="' + lClassElement + '"' : ''), '>');
            if (aElement.ClassAffichage || aElement.StyleAffichage) {
                LLibelle = '<div ' + (aElement.ClassAffichage ? 'class="' + aElement.ClassAffichage + '" ' : '') + (aElement.StyleAffichage ? 'style="' + aElement.StyleAffichage + '"' : '') + '>' + LLibelle + '</div>';
            }
            if (this.cache.avecCBMultiSelection) {
                T.push('<div class="check-conteneur"', GHtml.composeAttr('ie-node', 'getNodeCBMulti', [I]), '>', '<ie-checkbox ie-model="cbElement(', I, ')"></ie-checkbox>', '</div>');
            }
            var lLineHeight = (this.modeTactile ? this._options.hauteurLigneTactile : this._options.hauteur ? this._options.hauteur : this._options.hauteurLigneDefault);
            T.push('<div id="' + this.Nom + '_' + I + '" ' + GObjetWAI.composeRole(EGenreRole.Option), ' ie-attr="getAttrWAIOption(', I, ')"', aElement.libelleHtmlTitle ? ' ie-hint="' + GChaine.toTitle(aElement.libelleHtmlTitle) + '" ' : '', lAvecEllipsis ? ' ie-ellipsis' : '', ' class="as-li ', lClasseJQ, '" ' + 'style="line-height:' + (lLineHeight * 0.1) + 'rem; overflow: hidden;" tabindex="-1">');
            if (aElement.libelleHtml || this._options.getContenuElement) {
                var lContenu = this._options.getContenuElement ? this._options.getContenuElement(lParams) : aElement.libelleHtml;
                if (this.modeTactile) {
                    T.push('<div class="InlineBlock" style="height:100%;width:0;">&nbsp;</div><div class="InlineBlock" style="line-height:initial; width:100%;">');
                }
                T.push(lContenu + (this.modeTactile ? '</div>' : ''));
            } else {
                T.push(LLibelle);
            }
            T.push('</div>', '</li>');
            return T.join('');
        }

        function _composeBloc(aBloc, aNumeroBloc) {
            var T = [];
            if (aBloc && aBloc.lignesVisibles) {
                aBloc.dessine = true;
                aBloc.calcule = false;
                aBloc.top = 0;
                aBloc.height = 0;
                if (this.cache.scrollInfiniActif) {
                    T.push('<li id="', this.idBloc + aNumeroBloc, '" style="position:absolute;top:-1000px">');
                    T.push('<ul class="liste-as-options', (this.cache.avecCBMultiSelection ? ' multi-selections ' : ''), '">');
                }
                aBloc.lignesVisibles.forEach(function(aNumeroLigne) {
                    T.push(_composeLigne.call(this, this.ListeElements.GetElement(aNumeroLigne), aNumeroLigne));
                }.bind(this));
                if (this.cache.scrollInfiniActif) {
                    T.push('</ul>');
                    T.push('</li>');
                }
            }
            return T.join('');
        }

        function _majBlocsTacheFond() {
            clearTimeout(this.cache.timerMAJ);
            if (!this.listeDeroulee) {
                return;
            }
            if (this.cache.toutCalcule) {
                return;
            }
            var lNumeroACalculer = 0;
            var lToutCalcule = this.cache.blocs.every(function(aBloc, aNumeroBloc) {
                if (!aBloc.calcule) {
                    lNumeroACalculer = aNumeroBloc;
                }
                return !!aBloc.calcule;
            });
            if (lNumeroACalculer > 0) {
                this.cache.timerMAJ = setTimeout(function(aNumeroBloc) {
                    var lBloc = this.cache.blocs[aNumeroBloc];
                    var lASupprimer = !lBloc.dessine;
                    _majBloc.call(this, aNumeroBloc);
                    if (lASupprimer) {
                        $('#' + (this.idBloc + aNumeroBloc).escapeJQ()).remove();
                        lBloc.dessine = false;
                    }
                    _majBlocsTacheFond.call(this);
                }.bind(this, lNumeroACalculer), 0);
            }
            if (!this.cache.toutCalcule && lToutCalcule) {
                this.cache.toutCalcule = true;
                if (this._options.callbackToutCalcule) {
                    this._options.callbackToutCalcule();
                }
                var lDernierBloc = this.cache.blocs[this.cache.blocs.length - 1];
                var lHeightScroll = lDernierBloc.top + lDernierBloc.height;
                if (lHeightScroll !== this.cache.heightScroll) {
                    this.cache.heightScroll = lHeightScroll;
                    $('#' + this.idContenuScroll.escapeJQ()).height(lHeightScroll);
                    var lContenuJspAPI = $('#' + this.idContenu.escapeJQ()).data('jsp');
                    if (lContenuJspAPI) {
                        this.cache.surReinitScroll = true;
                        try {
                            lContenuJspAPI.reinitialise();
                        } finally {
                            this.cache.surReinitScroll = false;
                        }
                    }
                }
            }
        }

        function _majBloc(aNumeroBloc, aSurFermeture) {
            if (!aSurFermeture) {
                var lBlocPrecedent = this.cache.blocs[aNumeroBloc - 1];
                if (lBlocPrecedent && !lBlocPrecedent.calcule) {
                    _majBloc.call(this, aNumeroBloc - 1);
                }
            }
            var lBloc = this.cache.blocs[aNumeroBloc];
            if (!lBloc) {
                return;
            }
            if (!lBloc.dessine) {
                lBloc.dessine = true;
                GHtml.addHtml(this.idContenuScroll, _composeBloc.call(this, lBloc, aNumeroBloc), {
                    controleur: this.controleur,
                    ignorerScroll: true
                });
            }
            if (!lBloc.calcule && !aSurFermeture) {
                var lJBloc = $('#' + (this.idBloc + aNumeroBloc).escapeJQ());
                lBloc.height = lJBloc.height();
                lBloc.top = aNumeroBloc === 0 ? 0 : this.cache.blocs[aNumeroBloc - 1].top + this.cache.blocs[aNumeroBloc - 1].height;
                lBloc.calcule = true;
                lJBloc.css('top', lBloc.top);
            }
        }

        function _visibiliteSurNumeroBloc(aNumeroBlocVisible, aSurFermeture) {
            this.cache.blocs.forEach(function(aBloc, aNumeroBloc) {
                var lVisible = aSurFermeture ? aNumeroBloc === aNumeroBlocVisible : aNumeroBloc <= aNumeroBlocVisible + this._options.nbBlocsScrollInfini && aNumeroBloc >= aNumeroBlocVisible - this._options.nbBlocsScrollInfini;
                var lSurvolSurBloc = aBloc.debut <= this.Survolee && aBloc.fin >= this.Survolee;
                if (lVisible) {
                    var lEstDejaDessine = aBloc.dessine;
                    _majBloc.call(this, aNumeroBloc, aSurFermeture);
                    if (!lEstDejaDessine && lSurvolSurBloc) {
                        _selectionLigne.call(this, this.Survolee, true);
                        GHtml.setFocus(this.Nom + '_' + this.Survolee);
                    }
                } else {
                    if (aBloc.dessine) {
                        $('#' + (this.idBloc + aNumeroBloc).escapeJQ()).remove();
                    }
                    aBloc.dessine = false;
                    if (lSurvolSurBloc) {
                        GHtml.setFocus(this.idContenu);
                    }
                }
            }.bind(this));
        }

        function _majBlocsDeLigne(aLigne, aSurFermeture) {
            if (!this.cache.scrollInfiniActif) {
                return;
            }
            var lNumeroBloc = 0;
            this.cache.blocs.every(function(aBloc, aNumeroBloc) {
                lNumeroBloc = aNumeroBloc;
                return aLigne >= 0 && (aLigne < aBloc.debut || aLigne > aBloc.fin);
            });
            _visibiliteSurNumeroBloc.call(this, lNumeroBloc, aSurFermeture);
            if (!aSurFermeture) {
                _majBlocsTacheFond.call(this);
            }
        }

        function _majBlocsDeTop(aTop) {
            if (!this.cache.scrollInfiniActif) {
                return;
            }
            var lNumeroBlocVisible = 0,
                lTrouve = false,
                lDernierBlocCalcule = 0;
            this.cache.blocs.every(function(aBloc, aNumeroBloc) {
                if (aBloc.calcule) {
                    lDernierBlocCalcule = aNumeroBloc;
                }
                return !!aBloc.calcule;
            });
            this.cache.blocs.every(function(aBloc, aNumeroBloc) {
                if (aBloc.calcule &&
                    aBloc.top <= -aTop && (aBloc.top + aBloc.height) > -aTop) {
                    lNumeroBlocVisible = aNumeroBloc;
                    lTrouve = true;
                }
                return !lTrouve;
            });
            if (!lTrouve) {
                if (lDernierBlocCalcule >= 0) {
                    _majBloc.call(this, lDernierBlocCalcule + 1);
                    _majBlocsDeTop.call(this, aTop);
                }
                return;
            }
            _visibiliteSurNumeroBloc.call(this, lNumeroBlocVisible);
            _majBlocsTacheFond.call(this);
        }
        ObjetSaisie.prototype._remplirListe = function() {
            var lHeightScroll = this.cache.heightScroll;
            this.cache = {
                scrollInfiniActif: false,
                blocs: [],
                nbVisibles: 0,
                toutCalcule: false,
                heightScroll: lHeightScroll,
                largeurCellule: this._options.longueur,
                editionEnCours: false,
                surDemandeSaisieRechercheTout: this.cache.surDemandeSaisieRechercheTout
            };
            if (!this.ListeElements) {
                if (this._options.multiSelection) {
                    this._infosElementsCbs = {};
                }
                return;
            }
            _trierElements.call(this);
            var lBlocs = {
                    debut: 0,
                    fin: 0,
                    lignesVisibles: []
                },
                lNb = 0;
            var lTailleMaxLibelle = 0;
            this.cache.blocs.push(lBlocs);
            this.ListeElements.parcourir(function(aElement, aIndex) {
                if (lNb >= this._options.nbrLignes) {
                    lBlocs = {
                        debut: aIndex,
                        fin: aIndex,
                        lignesVisibles: []
                    };
                    this.cache.blocs.push(lBlocs);
                    lNb = 0;
                }
                lBlocs.debut = Math.min(lBlocs.debut, aIndex);
                lBlocs.fin = Math.max(lBlocs.debut, aIndex);
                if (aElement.Existe() && aElement.Visible !== false) {
                    lNb += 1;
                    lBlocs.lignesVisibles.push(aIndex);
                    this.cache.nbVisibles += 1;
                    if (this._options.estLargeurAuto && MethodesObjet.isFunction(this._options.getTailleElementlargeurAuto)) {
                        lTailleMaxLibelle = Math.max(lTailleMaxLibelle, this._options.getTailleElementlargeurAuto(aElement, this._options.classTexte === 'Gras'));
                    }
                }
            }.bind(this));
            if (this._options.estLargeurAuto && lTailleMaxLibelle && $.isNumeric(this.cache.largeurCellule)) {
                this.cache.largeurCellule = Math.min(Math.max(lTailleMaxLibelle, this._options.largeurAutoMin), this._options.largeurAutoMax);
                this.bouton.setLargeur(this.cache.largeurCellule + this.largeurBouton);
            }
            this.cache.scrollInfiniActif = !this._options.desactiverScrollInfini &&
                this.cache.blocs.length > (2 * this._options.nbBlocsScrollInfini + 2) &&
                this.cache.nbVisibles > 100;
            this.cache.avecCBMultiSelection = false;
            if (this._options.multiSelection) {
                if (!this._infosElementsCbs) {
                    this._infosElementsCbs = {};
                }
                this.ListeElements.parcourir(function(aElement, aIndex) {
                    if (aElement.Existe() && aElement.Visible !== false) {
                        _initInfosElementsCBs.call(this, aIndex);
                        this.cache.avecCBMultiSelection = this._infosElementsCbs[aIndex].avecCB;
                    }
                }.bind(this));
            }
            if (this.cache.nbVisibles === 0) {
                return;
            }
            var N = this.ListeElements.GetNbrElements();
            if ($('#' + this.Nom.escapeJQ()).length === 0) {
                return;
            }
            var lHeightEcran = GNavigateur.EcranH;
            var lEtaitModeTactile = this.modeTactile;
            this.modeTactile = this.modeTactile && $('#' + this.NomListe.escapeJQ()).parents().filter(function() {
                return $(this).css('overflow') !== 'visible';
            }).length === 1;
            var lLargeurListe = _getLargeurListe.call(this),
                I, lElement, lCompteurLigne = 0,
                lNumeroDerniereLigne = 0,
                lNumeroLigneReference = -1,
                lHeightBoutonTactile = 36,
                lEstMultiSelection = this._options.multiSelection,
                lAvecScroll = false;
            this.cache.recherchesSurlignage = null;
            this.cache.avecSurlignage = this._options.avecSurlignageSuggestion && this._options.mode === EGenreSaisie.SaisieRecherche;
            if (lEtaitModeTactile && !this.modeTactile) {
                $('#' + this.idWrapperBouton.escapeJQ()).css('position', 'relative');
                $('#' + this.NomListe.escapeJQ()).css('width', lLargeurListe);
            }
            if (lEstMultiSelection && !this._infosElementsCbs) {
                this._infosElementsCbs = {};
            }
            if (this.cache.avecSurlignage && !this.cache.surDemandeSaisieRechercheTout) {
                var lRecherche = this.bouton.getLibelle().trim();
                if (lRecherche && lRecherche.length > 0 && (!this._options.rechercheTout || !MethodesTableau.existe(lRecherche, this._options.rechercheTout))) {
                    this.cache.recherchesSurlignage = lRecherche.split(' ');
                }
            }
            if (N < 2 && !this._options.accepterUnElement && this._options.mode !== EGenreSaisie.SaisieRecherche) {
                if (N === 1 && lEstMultiSelection && this._infosElementsCbs) {
                    _initInfosElementsCBs.call(this, 0);
                }
                return;
            }
            var T = [];
            T.push('<div ', (this._options.couleurFondDeroulant) ? +'style="' + GStyle.composeCouleurFond(this._options.couleurFondDeroulant) + '">' : '>');
            lLargeurListe = lLargeurListe - 8;
            T.push('<div id="' + this.idContenu + '" tabIndex="-1" ie-node="getNodeContenu"', ' style="height:0px; overflow-y: auto; overflow-x: hidden;', GStyle.composeWidth(lLargeurListe), '"', ' ', GObjetWAI.composeRole(EGenreRole.Presentation), '>');
            for (I = 0; I < N; I++) {
                lElement = this.ListeElements.GetElement(I);
                if (lElement.Existe() && lElement.Visible !== false) {
                    lNumeroDerniereLigne = I;
                    lCompteurLigne += 1;
                    if (lCompteurLigne === this._options.nbrLignes) {
                        lNumeroLigneReference = I;
                    }
                    if (lCompteurLigne > this._options.nbrLignes) {
                        lAvecScroll = true;
                    }
                }
            }
            this.cache.largeurContenu = lLargeurListe - ($.fn.ieScrollPane && GNavigateur.GetLargeurBarreDeScroll && (lAvecScroll || this._options.avecReservationPlaceBarreScroll) ? GNavigateur.GetLargeurBarreDeScroll() - 2 : 0);
            T.push('<ul class="liste-as-options', (this.cache.avecCBMultiSelection ? ' multi-selections ' : ''), '" id="', this.idContenuScroll, '">');
            if (this.cache.scrollInfiniActif) {
                for (var i = 0; i <= this._options.nbBlocsScrollInfini; i++) {
                    T.push(_composeBloc.call(this, this.cache.blocs[i], i));
                }
            } else {
                this.cache.blocs.forEach(function(aBloc, aIndex) {
                    T.push(_composeBloc.call(this, aBloc, aIndex));
                }.bind(this));
            }
            T.push('</ul>');
            T.push('</div>');
            if (lEstMultiSelection) {
                T.push('<div class="validate-conteneur">');
                T.push('<ie-bouton ie-model="btnValidationCB" ie-node="getNode" class="' + TypeThemeBouton.primaire + '" id="', this.idBtnValidation, '"', (this.modeTactile ? 'style="' + GStyle.composeHeight(lHeightBoutonTactile) + '"' : ''), '>', GTraductions.getValeur('Valider'), '</ie-bouton>');
                T.push('</div>');
            }
            if (GHtml.elementExiste(this.NomListe)) {
                GHtml.setDisplay(this.NomListe, true);
                GHtml.setHtml(this.NomListe, T.join(''), {
                    controleur: this.controleur,
                    ignorerScroll: true
                });
                if (this.cache.scrollInfiniActif) {
                    var lTop = 0,
                        lNbLignesVisibles = 0,
                        lAvecBlocInvisible = false;
                    this.cache.blocs.forEach(function(aBloc, aNumeroBloc) {
                        if (aBloc.dessine) {
                            _majBloc.call(this, aNumeroBloc);
                            lTop += aBloc.height;
                            lNbLignesVisibles += aBloc.lignesVisibles.length;
                        } else {
                            lAvecBlocInvisible = true;
                        }
                    }.bind(this));
                    if (!this.cache.heightScroll) {
                        this.cache.heightScroll = lTop;
                        if (lAvecBlocInvisible) {
                            this.cache.heightScroll = lTop / lNbLignesVisibles * this.cache.nbVisibles;
                        }
                    }
                    $('#' + this.idContenuScroll.escapeJQ()).height(this.cache.heightScroll);
                    _majBlocsTacheFond.call(this);
                }
                var lEventMap = {
                    'focusin.saisie': _surFocusLigne,
                    'focusout.saisie': _surBlurLigne,
                    'touchstart.saisie pointerdown.saisie': function(event) {
                        var T = this.id.split('_');
                        var lIndice = parseInt(T[T.length - 1], 10);
                        event.data.instance.SurLigne(lIndice);
                        if (event.type === 'touchstart' && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0]) {
                            event.data.instance.positionTouchStart = {
                                x: event.originalEvent.changedTouches[0].pageX,
                                y: event.originalEvent.changedTouches[0].pageY
                            };
                        } else if (event.type === 'pointerdown') {
                            event.data.instance.positionTouchStart = {
                                x: event.originalEvent.pageX,
                                y: event.originalEvent.pageY
                            };
                        }
                    },
                    'click.saisie': _surClickListe,
                    'mousemove.saisie': _surMouseMoveListe
                };
                if (this.modeTactile) {
                    lEventMap['touchend.saisie'] = _surClickListe;
                    lEventMap['pointerup.saisie'] = _surClickListe;
                }
                $('#' + this.Nom.escapeJQ()).off(lEventMap).on(lEventMap, '.' + lClasseJQ, {
                    instance: this
                });
                var lEventMap2 = {
                    focusin: _surFocusLigne,
                    focusout: _surBlurLigne,
                    keydown: _surKeyDownListe,
                    keyup: _surKeyUpListe
                };
                $('#' + this.NomListe.escapeJQ()).off(lEventMap2).on(lEventMap2, {
                    instance: this
                });
            }
            if (lNumeroLigneReference < 0) {
                lNumeroLigneReference = lNumeroDerniereLigne;
            }
            var lJLigne = $('#' + this.Nom.escapeJQ() + '_' + lNumeroLigneReference);
            if (lJLigne.length > 0) {
                this.hauteurContenu = lJLigne.position().top + lJLigne.outerHeight(true);
            } else {
                this.hauteurContenu = 0;
            }
            if (lEstMultiSelection) {
                this.hauteurContenu += 1;
            }
            this._ouvertureInverse = false;
            var lDecalageOmbre = 1,
                lJBouton = $('#' + this.bouton.GetNom().escapeJQ()),
                lJelemOffset = lJBouton.offsetParent() || lJBouton,
                lHeightBouton = lJBouton.outerHeight(),
                lPositionBouton = lJBouton.position(),
                lTopAbsolueBouton = GPosition.getTop(this.bouton.GetNom()),
                lJListe = $('#' + this.NomListe.escapeJQ());
            var lMargeBordEcran = 5;
            if (!lPositionBouton) {
                lPositionBouton = {
                    top: 0,
                    left: 0
                };
            }
            if (!this.modeTactile) {
                if (lTopAbsolueBouton + lHeightBouton + this.hauteurContenu + lDecalageOmbre + lMargeBordEcran > lHeightEcran && lTopAbsolueBouton - this.hauteurContenu > 0) {
                    this._ouvertureInverse = true;
                } else {
                    if (lJListe.length) {
                        lJListe.css({
                            top: (lHeightBouton + lDecalageOmbre) + 'px'
                        });
                    }
                    this.hauteurContenu = Math.min(this.hauteurContenu, lHeightEcran - lTopAbsolueBouton - lHeightBouton - lDecalageOmbre - lMargeBordEcran);
                }
                var lLeft = lPositionBouton.left;
                if (this._options.largeurListe && !this.modeTactile) {
                    var lLeftAbs = GPosition.getLeft(this.Nom);
                    var lWidthListe = $('#' + this.NomListe.escapeJQ()).width();
                    if (lLeftAbs + lWidthListe > GNavigateur.ClientL) {
                        lLeft = Math.max(-lLeftAbs + 2, GPosition.getWidth(this.Nom) - lWidthListe);
                    }
                }
                lJListe.css({
                    left: lLeft
                });
            } else {
                this.hauteurContenu = Math.min(this.hauteurContenu, document.body.clientHeight - lDecalageOmbre - 40 - (lEstMultiSelection ? lHeightBoutonTactile : 0));
                if (lJListe.length) {
                    lJListe.css({
                        top: -lJelemOffset.offset().top,
                        left: -(lJelemOffset.get(0).offsetLeft || lJelemOffset.offset().left),
                        width: GNavigateur.EcranL,
                        height: GNavigateur.EcranH,
                        backgroundColor: 'rgba(0,0,0,0.25)'
                    }).off('click').on('click', {
                        instance: this
                    }, function(event) {
                        _declencherFermetureListe.call(event.data.instance, true);
                    });
                }
                var lThis = this;
                lJListe.children('div').each(function(aIndex) {
                    var lTop = document.body.clientHeight / 2 - lThis.hauteurContenu / 2 + $(window).scrollTop() - (lEstMultiSelection ? lHeightBoutonTactile / 2 : 0),
                        lEstBouton = lEstMultiSelection && aIndex === 1;
                    if (lEstBouton) {
                        lTop += lThis.hauteurContenu;
                    }
                    $(this).css({
                        position: 'absolute',
                        top: lTop + 'px',
                        left: '' + (((window.innerWidth || document.body.offsetWidth) / 2) - (lLargeurListe / 2) + window.pageXOffset) + 'px'
                    });
                    if (lEstBouton) {
                        $(this).hide();
                    } else if (lEstMultiSelection) {
                        $(this).click(function(event) {
                            event.stopPropagation();
                        });
                    }
                });
            }
            if (this.cache.largeurCellule === 0) {
                this.cache.largeurCellule = GHtml.getElement(this.NomListe).scrollWidth;
                this.bouton.setLargeur(this.cache.largeurCellule + this.largeurBouton);
                GPosition.setWidth(this.NomListe, this.cache.largeurCellule + this.largeurBouton);
            }
            GHtml.setDisplay(this.NomListe, false);
        };

        function _surFocusLigne(event) {
            _arreterFermetureListe.call(event.data.instance);
        }

        function _surBlurLigne(event) {
            _declencherFermetureListe.call(event.data.instance);
        }

        function _surKeyDownListe(event) {
            _defilerFleches.call(event.data.instance, event);
        }

        function _surKeyUpListe(event) {
            _defiler.call(event.data.instance, event, true);
            if (event.which === ToucheClavier.Echap) {
                GNavigateur.StopperEvenement(event);
            }
        }

        function _selectionnerUnElementEnMultiSelection(aIndice) {
            if (this.ListeElements) {
                this.ListeElements.parcourir(function(D, aIndex) {
                    var lInfos = this._infosElementsCbs ? this._infosElementsCbs[aIndex] : null;
                    if (lInfos && lInfos.selectionne) {
                        lInfos.selectionne = false;
                    }
                }, this);
            }
            _setValueElementCB.call(this, aIndice, true);
        }

        function _getNodeOrigineTouchend(event) {
            if (event.type === 'touchend' && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0] && document.elementFromPoint) {
                return document.elementFromPoint(event.originalEvent.changedTouches[0].pageX, event.originalEvent.changedTouches[0].pageY);
            } else if (event.type === 'pointerup' && document.elementFromPoint) {
                return document.elementFromPoint(event.originalEvent.pageX, event.originalEvent.pageY);
            }
            return null;
        }

        function _getPositionTouchend(event) {
            if (event.type === 'touchend' && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0]) {
                return {
                    x: event.originalEvent.changedTouches[0].pageX,
                    y: event.originalEvent.changedTouches[0].pageY
                };
            } else if (event.type === 'pointerup') {
                return {
                    x: event.originalEvent.pageX,
                    y: event.originalEvent.pageY
                };
            }
            return false;
        }

        function _surClickListe(event) {
            var T = this.id.split('_'),
                lIndice = parseInt(T[T.length - 1], 10),
                lInstance = event.data.instance;
            if (event.type === 'pointerup' && event.originalEvent.pointerType !== 'touch') {
                return;
            }
            var lNode = _getNodeOrigineTouchend(event);
            if (lNode && lNode.id !== this.id) {
                return;
            }
            var lPositionFin = _getPositionTouchend(event);
            if (lInstance.positionTouchStart) {
                var lEstScrolle = !!lPositionFin && (Math.abs(lPositionFin.x - lInstance.positionTouchStart.x) > lInstance._options.hauteurLigneTactile || Math.abs(lPositionFin.y - lInstance.positionTouchStart.y) > lInstance._options.hauteurLigneTactile);
                lInstance.positionTouchStart = false;
                if (lEstScrolle) {
                    lInstance.lastTouchEndScroll = new Date().getTime();
                    return;
                }
            }
            if (this.modeTactile && event.type === 'click' && new Date().getTime() - lInstance.lastTouchEndScroll < 500) {
                return;
            }
            if (lInstance._options.multiSelection) {
                _selectionnerUnElementEnMultiSelection.call(lInstance, lIndice);
            }
            lInstance.SurValidation(true, lIndice);
        }

        function _surMouseMoveListe(event) {
            var T = this.id.split('_');
            var lIndice = parseInt(T[T.length - 1], 10);
            event.data.instance.SurLigne(lIndice);
            _arreterFermetureListe.call(event.data.instance);
        }
        ObjetSaisie.prototype.getNbElementsVisible = function() {
            var lResult = 0;
            for (var i = 0; i < this.ListeElements.GetNbrElements(); i++) {
                var lElement = this.ListeElements.GetElement(i);
                if (lElement.Existe() && lElement.Visible !== false) {
                    lResult++;
                }
            }
            return lResult;
        };

        function _deroulerListe(ASurvolee, aListeDejaRemplie, aSansFocusLigne) {
            if (this.listeDeroulee) {
                this.FermerListe();
                this.listeDeroulee = false;
                return;
            }
            if (this.callback.appel(EGenreEvenementObjetSaisie.deploiement, null, null, null, null, null, null, {
                    combo: this,
                    genreEvenement: EGenreEvenementObjetSaisie.deploiement
                }) === false) {
                if (this.Pere && this.Pere.$refreshSelf) {
                    this.Pere.$refreshSelf();
                }
                return;
            }
            var lNbVisibles = this.getNbElementsVisible();
            if (lNbVisibles > 1 || (lNbVisibles > 0 && this._options.mode === EGenreSaisie.SaisieRecherche) || (this._options.accepterUnElement && lNbVisibles > 0)) {
                _arreterFermetureListe.call(this);
                if (_avecSaisieRechercheDynamique.call(this)) {
                    setTimeout(_arreterFermetureListe.bind(this), 0);
                }
                if (!aListeDejaRemplie) {
                    this._remplirListe();
                }
                var lElementListe = GHtml.getElement(this.NomListe);
                var lElementContenuListe = GHtml.getElement(this.idContenu);
                GHtml.setDisplay(lElementListe, true);
                lElementContenuListe.style.overflowY = 'hidden';
                GStyle.setZindex(lElementListe, 500);
                this.listeDeroulee = true;
                this.activerEventOut = false;
                setTimeout(function() {
                    this.activerEventOut = true;
                }.bind(this), 50);
                var lObjet = this;
                $(lElementContenuListe).css({
                    height: 0
                }).animate({
                    height: lObjet.hauteurContenu + 'px'
                }, 150);
                if (this._ouvertureInverse) {
                    $(lElementListe).css({
                        top: -(c_decalageTopOuvertureInverse)
                    }).animate({
                        top: -(lObjet.hauteurContenu + (c_decalageTopOuvertureInverse)) + 'px'
                    }, 150);
                }
                $(lElementContenuListe).queue(function() {
                    _eventAnimationOuvertureFin.call(lObjet, ASurvolee, aSansFocusLigne, aListeDejaRemplie);
                    $(this).dequeue();
                });
            } else {
                _gererCasUnSeulElement.bind(this)();
            }
        }

        function _eventAnimationOuvertureFin(ASurvolee, aSansFocusLigne, aListeDejaRemplie) {
            if (!aListeDejaRemplie) {
                if ($.fn.ieScrollPane) {
                    $('#' + this.idContenu.escapeJQ()).ieScrollPane({
                        avecResize: false
                    });
                } else {
                    $('#' + this.idContenu.escapeJQ()).css('overflowY', 'auto');
                }
            }
            if (this.modeTactile) {
                var lJListe = $('#' + this.NomListe.escapeJQ()),
                    lJBouton = $('#' + this.bouton.GetNom().escapeJQ()),
                    lJelemOffset = lJBouton.offsetParent() || lJBouton;
                lJListe.css({
                    top: -lJelemOffset.offset().top,
                    left: -(lJelemOffset.get(0).offsetLeft || lJelemOffset.offset().left),
                    width: GNavigateur.EcranL,
                    height: GNavigateur.EcranH
                });
                if (this._options.multiSelection) {
                    $('#' + this.idBtnValidation.escapeJQ()).parent().show();
                }
            }
            this.SurLigne(ASurvolee === null || ASurvolee === undefined ? this.Selection === null || this.Selection === undefined ? 0 : this.Selection : ASurvolee, aSansFocusLigne);
        }

        function _declencherFermetureListe(AAvecFocus) {
            clearTimeout(this.Timer);
            this.Timer = setTimeout(this.FermerListe.bind(this, AAvecFocus), 100);
        }

        function _arreterFermetureListe() {
            clearTimeout(this.Timer);
            this.Timer = null;
        }
        ObjetSaisie.prototype.FermerListe = function(AAvecFocus) {
            if (this.Selection >= 0) {
                _majBlocsDeLigne.call(this, this.Selection, true);
            }
            if (this.listeDeroulee) {
                _arreterFermetureListe.call(this);
                clearTimeout(this._timerEditionRecherche);
                clearTimeout(this.cache.timerMAJ);
                _selectionLigne.bind(this)(this.Survolee, false);
                this.Survolee = -1;
                if (AAvecFocus) {
                    this.SetFocus();
                }
                this.listeDeroulee = false;
                this.activerEventOut = false;
                var lElementListe = GHtml.getElement(this.NomListe);
                var lElementContenuListe = GHtml.getElement(this.idContenu);
                if (this._options.multiSelection && this.modeTactile) {
                    $('#' + this.idBtnValidation.escapeJQ()).parent().hide();
                }
                if (GHtml.estElement(lElementListe) && GHtml.estElement(lElementContenuListe)) {
                    lElementContenuListe.style.overflowY = 'hidden';
                    GStyle.setZindex(lElementListe, 200);
                    var lObjet = this;
                    if (this._ouvertureInverse) {
                        var lJElementListe = $(lElementListe);
                        lJElementListe.css({
                            top: -lObjet.hauteurContenu - c_decalageTopOuvertureInverse
                        });
                        $(lElementContenuListe).css({
                            height: lObjet.hauteurContenu
                        }).animate({
                            height: 0
                        }, {
                            duration: 150,
                            step: _etapeFermetureInverse.bind(this, lJElementListe)
                        });
                    } else {
                        $(lElementContenuListe).css({
                            height: lObjet.hauteurContenu
                        }).animate({
                            height: 0
                        }, 150);
                    }
                    $(lElementContenuListe).queue(function() {
                        _eventAnimationFermetureFin.bind(lObjet)();
                        $(this).dequeue();
                    });
                } else {
                    _eventAnimationFermetureFin.bind(this)();
                }
            }
        };

        function _etapeFermetureInverse(aJElement, aNow) {
            aJElement.css({
                top: -aNow - c_decalageTopOuvertureInverse
            });
        }

        function _eventAnimationFermetureFin() {
            setTimeout(GHtml.setDisplay.bind(GHtml, this.NomListe, false), 5);
            if (this._options.avecEventSurFermetureListe) {
                this.callback.appel(EGenreEvenementObjetSaisie.fermeture, null, 0, this.Genre, null, null, null, {
                    combo: this,
                    genreEvenement: EGenreEvenementObjetSaisie.fermeture
                });
                if (this.Pere && this.Pere.$refreshSelf) {
                    this.Pere.$refreshSelf();
                }
            }
        }

        function _estSelectionnable(aElement) {
            return !!aElement && aElement.AvecSelection !== false && (!this._options.getEstElementNonSelectionnable || this._options.getEstElementNonSelectionnable(aElement) !== true);
        }
        ObjetSaisie.prototype.SurLigne = function(ASurvolee, aSansFocusLigne) {
            if (!this.listeDeroulee) {
                return;
            }
            if (this.Survolee !== ASurvolee && MethodesObjet.isNumber(ASurvolee)) {
                _majBlocsDeLigne.call(this, ASurvolee);
                var N = this.ListeElements.GetNbrElements();
                if (_estSelectionnable.call(this, this.ListeElements.GetElement(ASurvolee))) {
                    if ((this.Survolee > -1) && (this.Survolee < N)) {
                        _selectionLigne.bind(this)(this.Survolee, false);
                    }
                    this.Survolee = ASurvolee;
                    _selectionLigne.bind(this)(this.Survolee, true);
                }
                var lContenuJsp = $('#' + this.idContenu.escapeJQ());
                var lContenuJspAPI = lContenuJsp.data('jsp');
                var lContenuElement = $('#' + this.Nom.escapeJQ() + '_' + this.Survolee);
                if (lContenuJspAPI && lContenuElement.length === 1) {
                    if (this.Survolee === 0) {
                        lContenuJspAPI.scrollToY(0);
                    } else {
                        lContenuJspAPI.scrollToElement(lContenuElement);
                    }
                }
                if (aSansFocusLigne !== true) {
                    GHtml.setFocus(this.Nom + '_' + this.Survolee);
                }
            } else if (ASurvolee === -1) {
                if (aSansFocusLigne !== true) {
                    _majBlocsDeLigne.call(this, ASurvolee);
                    GHtml.setFocus(this.NomListe);
                }
            }
        };

        function _selectionLigne(aLigne, aSelectionner) {
            if ((aLigne > -1) && (aLigne < this.ListeElements.GetNbrElements())) {
                var lElement = this.ListeElements.GetElement(aLigne);
                if (aSelectionner && !_estSelectionnable.call(this, lElement)) {
                    return;
                }
                var lDOM = GHtml.getElement(this.Nom + '_' + aLigne);
                if (!lDOM) {
                    return;
                }
                if (this._options.avecFondSelectionSurSurvol) {
                    var lCouleurFond;
                    if (!aSelectionner && this._options.getCouleurFondElement) {
                        lCouleurFond = this._options.getCouleurFondElement({
                            element: this.ListeElements.GetElement(aLigne)
                        });
                    }
                    if (!lCouleurFond) {
                        lCouleurFond = aSelectionner ? GCouleur.selection.fond : GCouleur.standard.fond;
                    }
                    GStyle.setCouleur(lDOM, lCouleurFond);
                    GStyle.setCouleurTexte(lDOM, aSelectionner ? GCouleur.selection.texte : GCouleur.standard.texte);
                }
                if (this._options.avecGrasSurSurvol) {
                    if (aSelectionner) {
                        $(lDOM).addClass('Gras');
                    } else {
                        $(lDOM).removeClass('Gras');
                    }
                }
            }
        }
        ObjetSaisie.prototype.SetDonnees = function(AListeElements, ASelection, ADeroulerListe, AActualiserListe) {
            if (this.listeDeroulee) {
                this.FermerListe(false);
            }
            clearTimeout(this.cache.timerMAJ);
            this.ListeElements = AListeElements;
            this.ActualiserListe = AActualiserListe;
            _trierElements.call(this);
            if (!this.ListeElements || this.ListeElements.GetNbrElements() === 0) {
                $('#' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.labelledby), GObjetWAI.idInfoWai[EGenreObjet.ObjetSaisieVide]);
            }
            this.listeDeroulee = false;
            this.activerEventOut = false;
            this.cache.heightScroll = 0;
            this._remplirListe();
            if (this._options.avecGestionUnElement &&
                !this._options.multiSelection &&
                !_gererCasUnSeulElement.call(this)) {
                this.SetSelection(ASelection);
            }
            if (this._options.multiSelection && ASelection instanceof ObjetListeElements) {
                _initListeSelections.call(this, ASelection);
            }
            if (ADeroulerListe && (this.ListeElements.GetNbrElements() > 1)) {
                _deroulerListe.call(this, ASelection ? null : 0);
            }
        };

        function _gererCasUnSeulElement() {
            var lResult = false;
            if (this._options.accepterUnElement) {
                return false;
            }
            if (this.ListeElements && (this.ListeElements.GetNbrElements() === 1 || this.ListeElements.getListeElements(function(aEl) {
                    return aEl.Visible !== false;
                }).GetNbrElements() === 1)) {
                var LLibelle = '',
                    lEstHtml = false,
                    lElement, lIndex = 0;
                if (this.ListeElements.GetNbrElements() !== 1) {
                    lIndex = this.ListeElements.getIndiceElementParFiltre(function(aEl) {
                        return aEl.Visible !== false;
                    });
                }
                if (this.ListeElements.GetLibelle(lIndex) && this.ListeElements.GetLibelle(lIndex).length) {
                    this.Selection = lIndex;
                    lElement = this.ListeElements.GetElement(this.Selection);
                    if (lElement) {
                        if (this._options.celluleAvecTexteHtml && lElement.libelleHtml) {
                            LLibelle = lElement.libelleHtml;
                            lEstHtml = true;
                        } else {
                            LLibelle = lElement.GetLibelle();
                        }
                    }
                    if (this._options.controlerNbrElements) {
                        GHtml.setHtml(this.Nom, '<span class="' + this._options.classTexteReference + ' Gras Insecable">' + LLibelle + '</span>');
                    }
                    this.SurValidation(false, this.Selection);
                    lResult = true;
                } else {
                    this.Selection = -1;
                }
                if (this._options.modifierContenuCelluleSurSelection) {
                    if (this._options.getContenuCellule) {
                        _appliquerGetContenuCellule.call(this, lElement);
                    } else if (lEstHtml) {
                        this.bouton.setLibelleHtml(LLibelle);
                    } else {
                        this.SetContenu(LLibelle);
                    }
                    $('#' + this.NomListe.escapeJQ() + ', #' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.activedescendant), this.Selection > -1 ? this.Nom + '_' + this.Selection : '');
                    $('#' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.labelledby), this.Selection > -1 ? this.Nom + '_' + this.Selection : '');
                }
            }
            this.$refreshSelf();
            return lResult;
        }
        ObjetSaisie.prototype.SetFocus = function() {
            this.bouton.setFocus();
            if (_avecSaisieRechercheDynamique.call(this)) {
                setTimeout(function() {
                    GHtml.setCursorAtEnd(this.bouton.NomEdit);
                }.bind(this), 0);
            }
        };
        ObjetSaisie.prototype.ViderContenu = function() {
            this.SetContenu('');
            $('#' + this.NomListe.escapeJQ() + ', #' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.activedescendant), '');
            $('#' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.labelledby), '');
        };
        ObjetSaisie.prototype.SetContenu = function(AContenu) {
            var lLibelle = '';
            if (AContenu instanceof ObjetListeElements) {
                lLibelle = this._options.getLibelleCelluleMultiSelection(AContenu);
            } else if (AContenu instanceof ObjetElement) {
                lLibelle = AContenu.GetLibelle();
            } else {
                lLibelle = AContenu || '';
            }
            this.bouton.setLibelle(lLibelle);
        };
        ObjetSaisie.prototype.GetContenu = function() {
            if (MethodesTableau.existe(this._options.mode, [EGenreSaisie.Combo])) {
                return this.Selection > -1 ? this.ListeElements.GetElement(this.Selection).GetLibelle() : '';
            } else {
                return this.bouton.getLibelle();
            }
        };
        ObjetSaisie.prototype.Reset = function() {
            this.SetDonnees(new ObjetListeElements());
            this.ViderContenu();
        };
        ObjetSaisie.prototype.GetSelection = function() {
            return this.Selection > -1 ? this.ListeElements.GetElement(this.Selection) : null;
        };
        ObjetSaisie.prototype.initSelectionParNumeroEtGenre = function(ANumero, AGenre, AIndice) {
            if ((ANumero === null || ANumero === undefined) && (AGenre === null || AGenre === undefined)) {
                ANumero = 0;
            }
            if (this.ListeElements) {
                var LIndice = this.ListeElements.GetIndiceParNumeroEtGenre(ANumero, AGenre);
                if (LIndice === null || LIndice === undefined) {
                    LIndice = AIndice;
                }
                this.initSelection(LIndice);
            }
        };
        ObjetSaisie.prototype.initSelection = function(aSelection) {
            this.Selection = aSelection >= 0 ? aSelection : -1;
            if (this.Selection >= 0 && this._options.modifierContenuCelluleSurSelection) {
                var lElement = this.ListeElements.GetElement(this.Selection);
                if (lElement) {
                    if (this._options.getContenuCellule) {
                        _appliquerGetContenuCellule.call(this, lElement);
                    } else if (this._options.celluleAvecTexteHtml && lElement.libelleHtml) {
                        this.bouton.setLibelleHtml(lElement.libelleHtml);
                    } else {
                        this.SetContenu(lElement.GetLibelle());
                    }
                    $('#' + this.NomListe.escapeJQ() + ', #' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.activedescendant), this.Nom + '_' + this.Selection);
                    $('#' + this.bouton.NomEdit.escapeJQ()).attr(GObjetWAI.getAttribut(EGenreAttribut.labelledby), this.Nom + '_' + this.Selection);
                }
            }
            this.$refreshSelf();
        };
        ObjetSaisie.prototype.SetSelectionParNumeroEtGenre = function(ANumero, AGenre, AIndice) {
            var lResult = false;
            if ((ANumero === null || ANumero === undefined) && (AGenre === null || AGenre === undefined)) {
                ANumero = 0;
            }
            if (this.ListeElements) {
                var LIndice = this.ListeElements.GetIndiceParNumeroEtGenre(ANumero, AGenre);
                if (LIndice === null || LIndice === undefined) {
                    LIndice = AIndice;
                }
                lResult = LIndice >= 0;
                this.SetSelection(LIndice);
            }
            return lResult;
        };
        ObjetSaisie.prototype.setSelectionParIndice = function(aIndice) {
            if (this.ListeElements.GetNbrElementsExistes() <= 1) {
                return;
            }
            this.SetSelection(aIndice);
        };
        ObjetSaisie.prototype.setSelectionParElement = function(aElement, aIndice) {
            if (aElement) {
                this.SetSelectionParNumeroEtGenre(aElement.GetNumero(), aElement.GetGenre(), aIndice);
            } else {
                this.SetSelectionParNumeroEtGenre(null, null, aIndice);
            }
        };

        function _initListeSelections(aListeSelections) {
            var lListeSelections = MethodesObjet.dupliquer(aListeSelections);
            if (!this._listeSelections) {
                this._listeSelections = new ObjetListeElements();
            }
            this._listeSelections.vider();
            var lResult = false;
            if (this.ListeElements) {
                this.ListeElements.parcourir(function(D, aIndex) {
                    var lElement = lListeSelections ? lListeSelections.GetElementParNumero(D.GetNumero()) : null;
                    if (lElement) {
                        lResult = true;
                        this._listeSelections.AddElement(lElement);
                        if (this._infosElementsCbs && this._infosElementsCbs[aIndex]) {
                            this._infosElementsCbs[aIndex].selectionne = true;
                        }
                    } else if (this._infosElementsCbs && this._infosElementsCbs[aIndex]) {
                        this._infosElementsCbs[aIndex].selectionne = false;
                    }
                }.bind(this));
            }
            return lResult;
        }
        ObjetSaisie.prototype.setListeSelections = function(aListeSelections) {
            var lResult = false;
            if (this._infosElementsCbs) {
                lResult = _initListeSelections.call(this, aListeSelections);
            }
            this.SurValidation(false, -1, {
                validationMultiSelection: true
            });
            return lResult;
        };
        ObjetSaisie.prototype.SetActif = function(AActif) {
            this.inherited('SetActif', AActif);
            this.bouton.SetActif(AActif);
            this.$refreshSelf();
        };
        module.exports = ObjetSaisie;
    },
    fn: "objetsaisie.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var IEHtml = require('IEHtml.js');
        var GLog = require('IELog.js');
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('GHtml.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');
        var EGenreEvenementObjetSaisie = require('Enumere_EvenementObjetSaisie.js');
        var ObjetListeElements = require('ObjetListeElements.js');
        var ObjetSaisie = require('ObjetSaisie.js');
        IEHtml.addBalise('ie-combo', function(aContexteCourant, aOutils) {
            function _listesIdentiques(aListe1, aListe2) {
                return aListe1 && aListe1.listeIdentiqueParElementsOrdonnes ? aListe1.listeIdentiqueParElementsOrdonnes(aListe2) : false;
            }
            var lModele = aOutils.getModel(aContexteCourant),
                const_forcerActualisation = 'forcer_Actualisation';
            if (!lModele) {
                return;
            }
            var lInfosEvent = aOutils.getAccesParametresModel('event', aContexteCourant),
                lInfosInit = aOutils.getAccesParametresModel('init', aContexteCourant),
                lInfosGetDonnees = aOutils.getAccesParametresModel('getDonnees', aContexteCourant),
                lInfosGetIndice = aOutils.getAccesParametresModel('getIndiceSelection', aContexteCourant),
                lInfosSetIndice = aOutils.getAccesParametresModel('setIndiceSelection', aContexteCourant),
                lInfosGetLibelle = aOutils.getAccesParametresModel('getLibelle', aContexteCourant),
                lInfosDestroy = aOutils.getAccesParametresModel('destroy', aContexteCourant),
                lInfosGetDisabled = aOutils.getAccesParametresModel('getDisabled', aContexteCourant),
                lAvecControleSaisie = aOutils.getControleSaisieEvent(aContexteCourant),
                lRefresh = aContexteCourant.contexte.refresh,
                lListeSelectionsBackup = null;
            if (!lInfosInit.estFonction) {
                return;
            }
            var lInfosInstance = aOutils.creerInstanceIdentite(ObjetSaisie, {
                pere: aContexteCourant.controleur,
                evenement: function() {
                    var lParametres = {};
                    var lParamsCombo = arguments[7];
                    if (lParamsCombo) {
                        Object.assign(lParametres, lParamsCombo);
                    }
                    Object.assign(lParametres, {
                        genreEvenement: arguments[0],
                        element: arguments[1],
                        indice: arguments[2],
                        genreCombo: arguments[3],
                        valeur: arguments[4],
                        surSetDonnees: arguments[5],
                        listeSelections: arguments[6],
                        estComboMultiSelection: lInstanceCombo._options.multiSelection
                    });
                    var lCallback = function() {
                        if (lParametres.genreEvenement === EGenreEvenementObjetSaisie.selection) {
                            if (((lParametres.estComboMultiSelection && !_listesIdentiques(lParametres.listeSelections, lListeSelectionsBackup)) || (MethodesObjet.isNumber(lParametres.indice) && lParametres.indice !== aContexteCourant.data.$indice)) || aContexteCourant.data.$indice === const_forcerActualisation) {
                                if (lInfosSetIndice.estFonction) {
                                    lInfosSetIndice.callback([lParametres.estComboMultiSelection ? lParametres.listeSelections : lParametres.indice, lInstanceCombo, aContexteCourant.data]);
                                }
                                aContexteCourant.data.$indice = lParametres.indice;
                            }
                        }
                        if (lInfosEvent.estFonction) {
                            lInfosEvent.callback([lParametres, lInstanceCombo, aContexteCourant.data]);
                        }
                        lRefresh();
                    };
                    if (lAvecControleSaisie) {
                        ControleSaisieEvenement(lCallback);
                    } else {
                        lCallback();
                    }
                }
            });
            var lInstanceCombo = lInfosInstance.instance;
            var lRacine = GHtml.htmlToDOM('<div id="' + lInstanceCombo.GetNom() + '"></div>'),
                lJRacine = $(lRacine);
            if (lInfosInit.estFonction) {
                lInfosInit.callback([lInstanceCombo, aContexteCourant.data]);
            }
            aOutils.injectHTML({
                element: lRacine,
                html: lInstanceCombo.ConstruireAffichage(),
                controleur: lInstanceCombo.controleur,
                ignorerScroll: true,
                contexte: aContexteCourant.contexte
            });
            lJRacine.IEData(aContexteCourant.data);
            lJRacine.on('destroyed', function() {
                if (lInfosDestroy.estFonction) {
                    lInfosDestroy.callback([lInstanceCombo, aContexteCourant.data]);
                }
                lInfosInstance.callbackDestruction();
                lInstanceCombo.free();
                lInstanceCombo = null;
            });
            aOutils.surInjectionHtml(aContexteCourant, function() {
                lInstanceCombo.RecupererDonnees();
                var lActualiserSelection;
                var lDemarrerGetIndice = function() {
                    if (lInfosGetIndice.estFonction) {
                        lActualiserSelection = function() {
                            if (!lInstanceCombo) {
                                return;
                            }
                            var lIndice = lGetterIndice(),
                                lEstListe = lInstanceCombo._options.multiSelection;
                            if (((lEstListe && (!lListeSelectionsBackup || !lListeSelectionsBackup.preventionBoucle) && !_listesIdentiques(lIndice, lListeSelectionsBackup)) || (!lEstListe && lIndice !== aContexteCourant.data.$indice)) || aContexteCourant.data.$indice === const_forcerActualisation) {
                                if (lEstListe) {
                                    if (lIndice && lIndice instanceof ObjetListeElements) {
                                        lListeSelectionsBackup = lIndice;
                                    } else {
                                        lListeSelectionsBackup = new ObjetListeElements();
                                    }
                                    lListeSelectionsBackup.preventionBoucle = true;
                                    lInstanceCombo.setListeSelections(lIndice);
                                } else {
                                    aContexteCourant.data.$indice = lIndice;
                                    if (lIndice >= 0) {
                                        lInstanceCombo.SetSelection(lIndice);
                                    }
                                }
                            } else if (lListeSelectionsBackup && lListeSelectionsBackup.preventionBoucle) {
                                lListeSelectionsBackup.preventionBoucle = false;
                            }
                        };
                        var lGetterIndice = function() {
                            return lInfosGetIndice.callback([lInstanceCombo, aContexteCourant.data]) || 0;
                        };
                        var lIndice = lGetterIndice();
                        if (lInstanceCombo._options.multiSelection) {
                            if (lIndice && lIndice instanceof ObjetListeElements) {
                                lListeSelectionsBackup = lIndice;
                            } else {
                                lListeSelectionsBackup = new ObjetListeElements();
                            }
                            lInstanceCombo.setListeSelections(lListeSelectionsBackup);
                        } else {
                            aContexteCourant.data.$indice = lIndice;
                            if (lIndice >= 0) {
                                lInstanceCombo.SetSelection(lIndice);
                            }
                        }
                        aOutils.abonnerRefresh(lActualiserSelection, lRacine, aContexteCourant);
                    }
                };
                if (lInfosGetDonnees.estFonction) {
                    var lGetterDonnees = function() {
                        return lInfosGetDonnees.callback([lInstanceCombo.ListeElements, lInstanceCombo, aContexteCourant.data]) || null;
                    };
                    var lDonnees = lGetterDonnees(),
                        lComboInitialise = false;
                    if (lDonnees && lDonnees.GetNbrElements) {
                        lInstanceCombo.SetDonnees(lDonnees);
                        lDemarrerGetIndice();
                        lComboInitialise = true;
                    }
                    aOutils.abonnerRefresh(function() {
                        if (!lInstanceCombo) {
                            GLog.addLog('lInstanceCombo n\'existe pas');
                            return null;
                        }
                        var lDonnees = lGetterDonnees();
                        if (lDonnees && lDonnees.GetNbrElements && lInstanceCombo.ListeElements !== lDonnees) {
                            lInstanceCombo.SetDonnees(lDonnees);
                            aContexteCourant.data.$indice = const_forcerActualisation;
                            if (!lComboInitialise) {
                                lDemarrerGetIndice();
                                lComboInitialise = true;
                            } else if (lActualiserSelection) {
                                lActualiserSelection();
                            }
                        }
                    }, lRacine, aContexteCourant);
                }
                if (lInfosGetLibelle.estFonction) {
                    var lGetterLibelle = function() {
                        return lInfosGetLibelle.callback([lInstanceCombo, aContexteCourant.data]);
                    };
                    var lLibelle = lGetterLibelle();
                    if (lLibelle === '' || (lLibelle && lLibelle.length > 0)) {
                        lInstanceCombo.SetContenu(lLibelle);
                    }
                    aOutils.abonnerRefresh(function() {
                        if (!lInstanceCombo) {
                            GLog.addLog('lInstanceCombo n\'existe pas');
                            return null;
                        }
                        var lLibelle = lGetterLibelle();
                        if ((lLibelle === '' || (lLibelle && lLibelle.length > 0)) && lLibelle !== lInstanceCombo.bouton.getLibelle()) {
                            lInstanceCombo.SetContenu(lLibelle);
                        }
                    }, lRacine, aContexteCourant);
                }
            });
            if (lInfosGetDisabled.estFonction) {
                var lGetterDisabled = function() {
                    return !!lInfosGetDisabled.callback([lInstanceCombo, aContexteCourant.data]);
                };
                var lEstDisabled = lGetterDisabled();
                aContexteCourant.data.$disabled = lEstDisabled;
                if (lEstDisabled) {
                    lInstanceCombo.SetActif(false);
                }
                aOutils.abonnerRefresh(function() {
                    if (!lInstanceCombo) {
                        GLog.addLog('lInstanceCombo n\'existe pas');
                        return null;
                    }
                    var lEstDisabled = lGetterDisabled();
                    if (lEstDisabled !== aContexteCourant.data.$disabled) {
                        aContexteCourant.data.$disabled = lEstDisabled;
                        lInstanceCombo.SetActif(!lEstDisabled);
                    }
                }, lRacine, aContexteCourant);
            }
            if (lModele && aContexteCourant.data.$modeleParsed) {
                aOutils.surNodeEtNodeAfter(aContexteCourant);
            }
            aOutils.copyAttributs(aContexteCourant.node, lJRacine);
            aOutils.replaceNode(aContexteCourant.node, lRacine);
            aOutils.addCommentaireDebug(lRacine, 'ie-combo ie-model="' + lModele + '"');
            return {
                node: lRacine,
                avecCompileFils: false
            };
        });
        module.exports = IEHtml;
    },
    fn: "iehtml.combo.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('produit/css/ChangementLangue.css');
        var IELocalStorage = require('LocalStorage.js');
        var MethodesObjet = require('MethodesObjet.js');
        var ControleSaisieEvenement = require('ControleSaisieEvenement.js');
        var EGenreAction = require('Enumere_Action.js');
        var EGenreBoiteMessage = require('Enumere_BoiteMessage.js');
        var GTraductions = require('ObjetTraduction.js');
        var EGenreEvenementObjetSaisie = require('Enumere_EvenementObjetSaisie.js');
        var UtilitaireChangementLangueProduit = require('UtilitaireChangementLangueProduit.js');
        require('IEHtml.Combo.js');
        var UtilitaireChangementLangue = Object.assign({
            avecChoixLangues: function() {
                return GParametres.listeLangues && GParametres.listeLangues.GetNbrElements() > 1;
            },
            getListeLangues: function() {
                var lListe = MethodesObjet.dupliquer(GParametres.listeLangues);
                lListe.parcourir(function(D) {
                    D.Libelle = D.description;
                    var lImage = UtilitaireChangementLangue.getImageCss(D.langID);
                    D.imageDrapeau = lImage ? '<div class="' + UtilitaireChangementLangue.getImageCss(D.langID) + '"></div>' : '';
                    D.libelleHtml = lImage ? '<div class="flag-img">' + D.imageDrapeau + '<div class="flag-label" ie-ellipsis>' + D.Libelle + '</div></div>' : D.Libelle;
                });
                lListe.trier();
                return lListe;
            },
            modifierLangue: function(aLangue) {
                if (!IELocalStorage.actif) {
                    GApplication.getMessage().afficher({
                        titre: GTraductions.getValeur('ChangementLangue.ChangerLangueImpossible'),
                        message: GTraductions.getValeur('ChangementLangue.ChangerLangueImpossibleDetail')
                    });
                    return;
                }
                if (!aLangue || !aLangue.langID) {
                    return;
                }
                ControleSaisieEvenement(function() {
                    GApplication.getMessage().afficher({
                        type: EGenreBoiteMessage.Confirmation,
                        message: GTraductions.getValeur('ChangementLangue.MessageConfirmationChangerLangue'),
                        callback: function(aGenre) {
                            if (aGenre === EGenreAction.Valider) {
                                UtilitaireChangementLangue.affecterLangue(aLangue.langID);
                            }
                        }
                    });
                });
            },
            construire: function(aControleur, aOptions) {
                if (!aControleur) {
                    return '';
                }
                if (!this.avecChoixLangues()) {
                    return '';
                }
                var lIndiceSelection = -1,
                    lListe = UtilitaireChangementLangue.getListeLangues();
                aControleur.comboChangementLangue = {
                    init: function(aInstance) {
                        aInstance.largeurBouton = 0;
                        aInstance.setOptions_ObjetSaisie({
                            longueur: 22,
                            largeurListe: 180,
                            avecBouton: false,
                            avecEventSurFermetureListe: !!aOptions && !!aOptions.avecEventFermeture,
                            getContenuCellule: function() {
                                var lElement = lListe.GetElement(lIndiceSelection);
                                if (lElement) {
                                    return {
                                        libelleHtml: lElement.imageDrapeau
                                    };
                                }
                            },
                            optionsBouton: {
                                avecBordures: false,
                                couleurFondSurvol: GCouleur.themeNeutre.moyen1,
                                avecFocusVisibleTexte: false,
                                titleForce: GTraductions.getValeur('ChangementLangue.ChangerLaLangue'),
                                classeZone: ''
                            }
                        });
                        aInstance.SetDonnees(lListe, lIndiceSelection);
                    },
                    event: function(aParametres, aCombo) {
                        if (aParametres.genreEvenement === EGenreEvenementObjetSaisie.selection && aCombo.InteractionUtilisateur && aParametres.indice !== lIndiceSelection) {
                            UtilitaireChangementLangue.modifierLangue(aParametres.element);
                        }
                        if (aOptions && $.isFunction(aOptions.supplementSurEvent)) {
                            aOptions.supplementSurEvent(aParametres, aCombo);
                        }
                    },
                    getDisabled: function() {
                        return lListe.GetNbrElements() < 2;
                    }
                };
                lListe.parcourir(function(aElement, aIndex) {
                    if (aElement.langID === GParametres.langID) {
                        lIndiceSelection = aIndex;
                        return false;
                    }
                });
                if (lIndiceSelection < 0) {
                    lIndiceSelection = 0;
                }
                return '<ie-combo class="flag-conteneur" ie-model="comboChangementLangue"></ie-combo>';
            }
        }, UtilitaireChangementLangueProduit);
        module.exports = UtilitaireChangementLangue;
    },
    fn: "utilitairechangementlangue.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        function _FenetreModale_Mobile() {
            this.Nom = 'FenetreModale';
            this._pret = false;
            this.isOpen = false;
            this.EnAffichage = false;
        }
        _FenetreModale_Mobile.prototype.setPret = function(aPret) {
            this._pret = aPret;
        };
        _FenetreModale_Mobile.prototype.getPret = function() {
            return this._pret;
        };
        _FenetreModale_Mobile.prototype.composerConteneur = function() {
            this.setPret(true);
            return (['<div id="' + this.Nom + '" class="modal">', '<div class="modal-header" style="display:none;">', '</div>', '<div class="modal-content" style="display:none;">', '</div>', '<div class="modal-footer" style="display:none;">', '</div>', '</div>']).join('');
        };
        _FenetreModale_Mobile.prototype.setContent = function(aHtml) {
            $('#' + this.Nom.escapeJQ()).children('.modal-content').html(aHtml).show();
        };
        _FenetreModale_Mobile.prototype._getOptionsPopUp = function() {
            return {
                dismissible: false,
                opacity: 0,
                inDuration: 300,
                outDuration: 200,
                startingTop: '4%',
                endingTop: '10%',
                onCloseStart: function() {
                    this._onCloseStart();
                }.bind(this),
                onCloseEnd: (function() {
                    this.isOpen = false;
                }).bind(this)
            };
        };
        _FenetreModale_Mobile.prototype._onCloseStart = function() {
            this.EnAffichage = false;
        };
        _FenetreModale_Mobile.prototype.afficher = function() {
            this._ouvrir();
        };
        _FenetreModale_Mobile.prototype._ouvrir = function() {
            if (!this.getPret()) {
                return;
            }
            var $fenetreModale = $('#' + this.Nom.escapeJQ());
            var lInstanceModale = M.Modal.getInstance($fenetreModale);
            if (!lInstanceModale) {
                M.Modal.init($fenetreModale, this._getOptionsPopUp());
                lInstanceModale = M.Modal.getInstance($fenetreModale);
            }
            lInstanceModale.open();
            this.isOpen = true;
            this.EnAffichage = true;
        };
        _FenetreModale_Mobile.prototype.fermer = function() {
            $('#' + this.Nom.escapeJQ()).modal('close');
            $('#' + this.Nom.escapeJQ()).children('.modal-content').html('').hide();
        };
        _FenetreModale_Mobile.prototype.afficherContenu = function() {};
        _FenetreModale_Mobile.prototype.GetNom = function() {
            return this.Nom;
        };
        module.exports = _FenetreModale_Mobile;
    },
    fn: "_fenetremodale_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
        var Invocateur = require('Invocateur.js').Invocateur;
        var MethodesObjet = require('MethodesObjet.js');
        var _FenetreModale_Mobile = require('_FenetreModale_Mobile.js');
        MethodesObjet.heritagePrototype(FenetreModale_Patience, _FenetreModale_Mobile);

        function FenetreModale_Patience() {
            this.inheritedCreate();
            this.Nom = 'Fenetre_Modale_Patience';
            this.avecMessage = true;
            this.compteurBlocage = 0;
            if (Invocateur) {
                Invocateur.abonner(ObjetInvocateur.events.eventIOAjax, _surEventIOAjax, this);
                Invocateur.abonner(ObjetInvocateur.events.erreurCommunication, this.fermer, this);
                Invocateur.abonner(ObjetInvocateur.events.patience, _surPatience, this);
            }
        }
        FenetreModale_Patience.prototype._getOptionsPopUp = function() {
            return Object.assign(this.inherited('_getOptionsPopUp'), {
                dismissible: false,
                inDuration: 0,
                outDuration: 0,
                startingTop: '45%',
                endingTop: '45%'
            });
        };
        FenetreModale_Patience.prototype.composerConteneur = function() {
            this.setPret(true);
            return (['<div id="' + this.Nom + '" class="modal" style="width:64px;height:64px;background-color:transparent;box-shadow:none;overflow:visible;">', '<div class="modal-content" style="overflow:hidden;">', '<div class="preloader-wrapper big active">', '<div class="spinner-layer spinner-blue-only">', '<div class="circle-clipper left">', '<div class="circle"></div>', '</div><div class="gap-patch">', '<div class="circle"></div>', '</div><div class="circle-clipper right">', '<div class="circle"></div>', '</div>', '</div>', '</div>', '<div id="idPreloaderText" style="overflow:hidden;position:absolute; top:calc(50% + 64px + 5px);width:100%; min-width: 200px;text-align:center;', 'right: 50%;transform: translateX(50%);opacity: 0.9;border-radius: 0.5rem;box-shadow: 0 2px 4px 1px rgba(0, 0, 0, 0.2); background-color: white; display: none;"></div>', '</div>', '</div>']).join('');
        };

        function _setTexte(aTexte) {
            var lTexte = aTexte || '';
            $('#idPreloaderText').text(lTexte).css('display', lTexte ? '' : 'none');
        }
        FenetreModale_Patience.prototype.afficher = function(aTexte) {
            this.compteurBlocage += 1;
            if (this.compteurBlocage > 1) {
                return;
            }
            _setTexte(aTexte);
            this._ouvrir();
        };
        FenetreModale_Patience.prototype.fermer = function() {
            this.compteurBlocage = Math.max(0, this.compteurBlocage - 1);
            if (this.compteurBlocage > 0) {
                return;
            }
            _setTexte('');
            if ($('#' + this.Nom.escapeJQ()).length > 0) {
                try {
                    $('#' + this.Nom.escapeJQ()).modal('close');
                } catch (e) {
                    require('IELog.js').addLog('Erreur ' + e);
                }
            }
        };

        function _surEventIOAjax(aParametres) {
            if (aParametres.actualisation) {
                return;
            }
            if (aParametres.blocageDeconnexion === true) {
                this.blocageDeconnexion = true;
                this.compteurBlocage = 0;
                this.afficher(aParametres.message || '');
                return;
            }
            if (aParametres.blocageDeconnexion === false) {
                delete this.blocageDeconnexion;
                this.fermer();
                return;
            }
            if (this.blocageDeconnexion) {
                return;
            }
            if (aParametres.emission) {
                if (aParametres.upload) {
                    if (aParametres.nombreFichiers > 0 && aParametres.progress) {
                        if (aParametres.progress.percent === 0 && !aParametres.progress.personnalise) {
                            this.afficher();
                        }
                    } else if (aParametres.nombreFichiers > 0) {
                        this.afficher();
                    }
                } else {
                    this.afficher();
                }
            } else {
                this.fermer();
            }
        }

        function _surPatience(aAfficher, aParametres) {
            var lParametres = Object.assign({
                message: ''
            }, aParametres);
            if (aAfficher) {
                this.afficher(lParametres.message);
            } else {
                this.fermer();
            }
        }
        module.exports = FenetreModale_Patience;
    },
    fn: "fenetremodale_patience.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Espace/Css/ObjetSaisieCodePIN.css');
        var MethodesObjet = require('MethodesObjet.js');
        var GHtml = require('GHtml.js');
        var Identite = require('ObjetIdentite.js');
        var GTraductions = require('ObjetTraduction.js');
        var SecurisationCompte = require('TypeSecurisationCompte.js');
        var TypeModeGestionDoubleAuthentification = SecurisationCompte.TypeModeGestionDoubleAuthentification;
        var TypeCommandeSecurisationCompteHttp = SecurisationCompte.TypeCommandeSecurisationCompteHttp;
        var UtilitaireDeconnexion = require('UtilitaireDeconnexion.js');

        function ObjetSaisieCodePIN() {
            this.inheritedCreate(arguments);
            this.options = {
                classeRequete: null,
                modePIN: ObjetSaisieCodePIN.ModeSaisieValiderPIN.msControlePIN
            };
            this.codePin = {};
            _init.call(this);
        }
        MethodesObjet.heritagePrototype(ObjetSaisieCodePIN, Identite);
        ObjetSaisieCodePIN.ModeSaisieValiderPIN = {
            msControlePIN: 'msControlePIN',
            msModifierPIN: 'msModifierPIN',
            msDefinirPIN: 'msDefinirPIN'
        };
        var TypeEtape = {
            val: 'val',
            confirm: 'confirm',
            validation: 'validation'
        };

        function _init() {
            Object.assign(this.codePin, {
                val: '',
                confirm: '',
                etapeConfirmation: TypeEtape.val,
                saisiePinVerifie: false
            });
            this.callback.appel('');
        }
        ObjetSaisieCodePIN.prototype.getControleur = function(aInstance) {
            return {
                inputVal: {
                    getValue: function() {
                        return aInstance.codePin.val;
                    },
                    getClass: function() {
                        return !_getDisabled.call(aInstance) && aInstance.codePin.etapeConfirmation === TypeEtape.val ? 'scp_inputActif' : '';
                    }
                },
                inputConfirm: {
                    getValue: function() {
                        return aInstance.codePin.confirm;
                    },
                    getClass: function() {
                        return !_getDisabled.call(aInstance) && aInstance.codePin.etapeConfirmation === TypeEtape.confirm ? 'scp_inputActif' : '';
                    }
                },
                btnVal: {
                    event: function(aVal) {
                        switch (aInstance.codePin.etapeConfirmation) {
                            case TypeEtape.val:
                                aInstance.codePin.val += aVal;
                                break;
                            case TypeEtape.confirm:
                                aInstance.codePin.confirm += aVal;
                                break;
                        }
                    },
                    getDisabled: _getDisabled.bind(aInstance)
                },
                btnClear: {
                    event: function() {
                        _init.call(aInstance);
                    },
                    getDisabled: _getDisabled.bind(aInstance, true)
                },
                btnValider: {
                    event: function() {
                        _surValider.call(aInstance);
                    },
                    getDisabled: _getDisabled.bind(aInstance)
                },
                getHtmlMessagePin: function() {
                    return _construireMessagePINVerification.call(aInstance);
                }
            };
        };

        function _construireMessagePINVerification() {
            if (this.codePin.saisiePinVerifie) {
                return ['<i class="icon_ok"></i>', GTraductions.getValeur('DoubleAuth.ValiderCodeValide')].join('');
            }
            if (this.codePin.nbEchecVerifie > 0) {
                var H = [];
                if (this.codePin.nbEchecVerifie >= SecurisationCompte.C_MaxPinRetry) {
                    H.push(GTraductions.getValeur('DoubleAuth.ValiderCodePinInvalide'));
                } else {
                    H.push('<i class="icon_remove"></i>', GTraductions.getValeur('DoubleAuth.NouvelAppareilTentatives', [SecurisationCompte.C_MaxPinRetry - this.codePin.nbEchecVerifie]));
                }
                return H.join('');
            }
        }

        function _surValider() {
            if (this.options.modePIN !== ObjetSaisieCodePIN.ModeSaisieValiderPIN.msControlePIN) {
                if (this.codePin.etapeConfirmation === TypeEtape.val) {
                    if (this.codePin.val.length < SecurisationCompte.C_MinPinLength) {
                        return GApplication.getMessage().afficher({
                            message: GTraductions.getValeur('DoubleAuth.PinInsuffisant', [SecurisationCompte.C_MinPinLength])
                        });
                    }
                    this.codePin.etapeConfirmation = TypeEtape.confirm;
                    return;
                }
                if (this.codePin.etapeConfirmation === TypeEtape.confirm) {
                    if (this.codePin.val !== this.codePin.confirm) {
                        return GApplication.getMessage().afficher({
                            message: GTraductions.getValeur('DoubleAuth.PinNonConfirme')
                        });
                    }
                    this.codePin.etapeConfirmation = TypeEtape.validation;
                }
            }
            if (this.options.modePIN === ObjetSaisieCodePIN.ModeSaisieValiderPIN.msControlePIN) {
                new(this.options.classeRequete)(this).lancerRequete({
                    action: TypeCommandeSecurisationCompteHttp.csch_VerifierPIN,
                    codePin: this.codePin.val
                }).then(function(aJSON) {
                    if (aJSON && aJSON.result) {
                        this.codePin.saisiePinVerifie = true;
                        this.callback.appel(this.codePin.val);
                    } else {
                        return Promise.reject();
                    }
                }.bind(this)).catch(function() {
                    _init.call(this);
                    this.codePin.nbEchecVerifie = this.codePin.nbEchecVerifie || 0;
                    this.codePin.nbEchecVerifie += 1;
                    if (this.codePin.nbEchecVerifie === 1) {
                        GApplication.getMessage().afficher({
                            message: GTraductions.getValeur('DoubleAuth.ValiderCodePinInvalide') + '<br>' + GTraductions.getValeur('DoubleAuth.NouvelAppareilTentatives', [SecurisationCompte.C_MaxPinRetry - this.codePin.nbEchecVerifie])
                        });
                    }
                    if (this.codePin.nbEchecVerifie >= SecurisationCompte.C_MaxPinRetry) {
                        return UtilitaireDeconnexion.deconnexion();
                    }
                }.bind(this));
            } else {
                this.callback.appel(this.codePin.val);
            }
        }

        function _getDisabled(aEstBtnClear) {
            var lDisabled = this.donnees.mode !== TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN;
            if (lDisabled) {
                _init.call(this);
                this.$refreshSelf();
            }
            if (this.donnees.mode === TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN && this.options.modePIN === ObjetSaisieCodePIN.ModeSaisieValiderPIN.msControlePIN && (this.codePin.saisiePinVerifie || this.codePin.nbEchecVerifie >= SecurisationCompte.C_MaxPinRetry)) {
                lDisabled = true;
            }
            if (aEstBtnClear !== true && this.donnees.mode === TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN && this.codePin.etapeConfirmation === TypeEtape.validation) {
                lDisabled = true;
            }
            return lDisabled;
        }

        function _construire() {
            var H = [];
            H.push('<div class="ObjetSaisieCodePIN">');
            if (this.options.modePIN === ObjetSaisieCodePIN.ModeSaisieValiderPIN.msControlePIN) {
                H.push('<label>', GTraductions.getValeur('DoubleAuth.ValiderInfoPIN'), '</label>');
            }
            H.push('<div class="scp_zone">');
            H.push('<div class="scp_gauche">');
            H.push('<input type="password" ie-model="inputVal" disabled class="style-input" ie-class="getClass" placeholder="', this.options.modePIN === ObjetSaisieCodePIN.ModeSaisieValiderPIN.msModifierPIN ? GTraductions.getValeur('DoubleAuth.InfoNouveauPIN', [SecurisationCompte.C_MinPinLength]) : GTraductions.getValeur('DoubleAuth.InfoSaisiePIN'), '" />');
            if (this.options.modePIN !== ObjetSaisieCodePIN.ModeSaisieValiderPIN.msControlePIN) {
                H.push('<input type="password" ie-model="inputConfirm" disabled class="style-input" ie-class="getClass" placeholder="', GTraductions.getValeur('DoubleAuth.InfoConfirmPIN'), '" />');
                if (this.options.modePIN === ObjetSaisieCodePIN.ModeSaisieValiderPIN.msDefinirPIN) {
                    H.push('<label>', GTraductions.getValeur('DoubleAuth.CodePINMinimum', [SecurisationCompte.C_MinPinLength]), '</label>');
                }
            } else {
                H.push('<label>', GTraductions.getValeur('DoubleAuth.NouvelAppareilOubliPIN'), '</label>');
                H.push('<div class="scp_ecarteur_flex"></div>');
                H.push('<div ie-html="getHtmlMessagePin" class="scp_messagePin"></div>');
            }
            H.push('</div>');
            H.push('<div class="scp_boutons">');
            var lTab = [];
            for (var i = 0; i < 10; i++) {
                lTab.push(i);
            }
            while (lTab.length > 0) {
                var lIndice = Math.floor(Math.random() * lTab.length);
                var lVal = lTab[lIndice];
                lTab.splice(lIndice, 1);
                H.push('<ie-bouton class="themeBoutonNeutre"', GHtml.composeAttr('ie-model', 'btnVal', lVal), '>', lVal, '</ie-bouton>');
            }
            H.push('<ie-bouton class="themeBoutonNeutre scp_btnclear"', GHtml.composeAttr('ie-model', 'btnClear'), GHtml.composeAttr('title', GTraductions.getValeur('DoubleAuth.Effacer')), '>', '<i class="icon_delete_clavier_mobile"></i>', '</ie-bouton>');
            H.push('<ie-bouton class="themeBoutonNeutre scp_btnvalider"', GHtml.composeAttr('ie-model', 'btnValider'), '>', GTraductions.getValeur('Valider'), '</ie-bouton>');
            H.push('</div>');
            H.push('</div>');
            H.push('</div>');
            return H.join('');
        }
        ObjetSaisieCodePIN.prototype.setDonnees = function(aDonnees) {
            this.donnees = aDonnees;
            this.Afficher(_construire.call(this));
        };
        module.exports = ObjetSaisieCodePIN;
    },
    fn: "objetsaisiecodepin.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Produit/Css/ObjetChoixStrategieSecurisation.css');
        var GHtml = require('GHtml.js');
        var MethodesObjet = require('MethodesObjet.js');
        var Identite = require('ObjetIdentite.js');
        var GTraductions = require('ObjetTraduction.js');
        var SecurisationCompte = require('TypeSecurisationCompte.js');
        var TypeModeGestionDoubleAuthentification = SecurisationCompte.TypeModeGestionDoubleAuthentification;
        var TypeEnsembleNombre = require('TypeEnsembleNombre.js');
        var ObjetSaisieCodePIN = require('ObjetSaisieCodePIN.js');

        function ObjetChoixStrategieSecurisation() {
            this.inheritedCreate(arguments);
            this.options = {
                modeAffichage: ObjetChoixStrategieSecurisation.typeAffichage.prefUtilisateur,
                modesPossibles: new TypeEnsembleNombre(),
                callbackChoix: null,
                optionsPIN: {},
                callbackPIN: null
            };
        }
        MethodesObjet.heritagePrototype(ObjetChoixStrategieSecurisation, Identite);
        ObjetChoixStrategieSecurisation.typeAffichage = {
            prefUtilisateur: 'prefUtilisateur',
            securisation: 'securisation'
        };
        ObjetChoixStrategieSecurisation.prototype.getControleur = function(aInstance) {
            return {
                rbChoixStrat: {
                    getValue: function(aGenre) {
                        if (aInstance.donnees.mode === aGenre) {
                            return true;
                        }
                        var lModesPossibles = aInstance.options.modesPossibles;
                        switch (aGenre) {
                            case TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN:
                                return (aInstance.donnees.mode === TypeModeGestionDoubleAuthentification.MGDA_PasEncoreChoisi || (!lModesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_NotificationSeulement) && !lModesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_Inactive)));
                            case TypeModeGestionDoubleAuthentification.MGDA_NotificationSeulement:
                                return ((!lModesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN) && [TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN, TypeModeGestionDoubleAuthentification.MGDA_PasEncoreChoisi].indexOf(aInstance.donnees.mode) >= 0) || (!lModesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_Inactive) && aInstance.donnees.mode === TypeModeGestionDoubleAuthentification.MGDA_Inactive));
                            case TypeModeGestionDoubleAuthentification.MGDA_Inactive:
                                return !lModesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN) && !lModesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_NotificationSeulement);
                        }
                        return false;
                    },
                    setValue: function(aGenre) {
                        aInstance.options.callbackChoix(aGenre);
                    },
                    getDisabled: _getDisabled.bind(aInstance)
                },
                btnPIN: {
                    event: function() {
                        aInstance.options.callbackChoix(TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN);
                    },
                    getDisabled: function() {
                        return aInstance.donnees.mode !== TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN || _getDisabled.call(aInstance);
                    }
                }
            };
        };

        function _getDisabled() {
            return !!this.donnees.nonEditable;
        }
        ObjetChoixStrategieSecurisation.prototype.setDonnees = function(aDonnees) {
            this.donnees = aDonnees;
            if (this.instanceCodePIN) {
                this.instanceCodePIN.free();
                this.instanceCodePIN = null;
            }
            if (this.options.modeAffichage === ObjetChoixStrategieSecurisation.typeAffichage.securisation) {
                this.instanceCodePIN = Identite.creerInstance(ObjetSaisieCodePIN, {
                    pere: this,
                    evenement: function() {
                        this.options.callbackPIN.apply(this, arguments);
                    }
                });
            }
            this.Afficher(_construire.call(this));
            if (this.instanceCodePIN) {
                this.instanceCodePIN.setOptions(this.options.optionsPIN).setDonnees(this.donnees);
            }
        };

        function _construire() {
            var H = [];
            var lAvecRB = false;
            var lUniquementChoixCodePIN = this.options.modesPossibles.count() === 1 && this.options.modesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN);
            H.push('<div class="ObjetChoixStrategieSecurisation">');
            H.push('<a href="', GTraductions.getValeur('DoubleAuth.urlTutoVideoSecurite'), '"target="_blank" class="css_lienVideo LienAccueil">', GTraductions.getValeur('DoubleAuth.TutoVideoSecurite'), '</a>');
            var lLegende = GTraductions.getValeur('DoubleAuth.RenforcerSecuInfo') + '<br>';
            if (lUniquementChoixCodePIN) {
                lLegende += GTraductions.getValeur('DoubleAuth.RenforcerSecuPINImpose');
            } else {
                lLegende += GTraductions.getValeur('DoubleAuth.RenforcerSecuChoix');
            }
            H.push('<label>', lLegende, '</label>');
            H.push('<div class="css_Choix">');
            if (this.options.modesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN)) {
                if (!lUniquementChoixCodePIN) {
                    H.push('<ie-radio class="css_rbMode"', GHtml.composeAttr('ie-model', 'rbChoixStrat', [TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN]), '>', GTraductions.getValeur('DoubleAuth.RenforcerSecuDefinirPIN'), '</ie-radio>');
                    lAvecRB = true;
                }
                switch (this.options.modeAffichage) {
                    case ObjetChoixStrategieSecurisation.typeAffichage.prefUtilisateur:
                        H.push('<div class="css_btnPin">', '<ie-bouton ie-model="btnPIN">', GTraductions.getValeur('DoubleAuth.RenforcerButtonModifier'), '</ie-bouton>', '</div>');
                        break;
                    case ObjetChoixStrategieSecurisation.typeAffichage.securisation:
                        H.push('<div class="css_btnPin">', '<div class="css_titreCodePIN"><label>', GTraductions.getValeur('DoubleAuth.RenforcerSecuInfoPIN'), '</label></div>', '<div id="', this.instanceCodePIN.GetNom(), '"></div>', '</div>');
                        break;
                    default:
                        ;
                }
            }
            if (this.options.modesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_NotificationSeulement)) {
                if (lAvecRB && this.options.modeAffichage === ObjetChoixStrategieSecurisation.typeAffichage.securisation) {
                    H.push('<div class="sc_mode_sep"></div>');
                }
                H.push('<ie-radio class="css_rbMode"', GHtml.composeAttr('ie-model', 'rbChoixStrat', [TypeModeGestionDoubleAuthentification.MGDA_NotificationSeulement]), '>', GTraductions.getValeur('DoubleAuth.RenforcerSecuNotification1'), '<br>', '<label>', GTraductions.getValeur('DoubleAuth.RenforcerSecuNotification2'), '</label>', '</ie-radio>');
                lAvecRB = true;
            }
            if (this.options.modesPossibles.contains(TypeModeGestionDoubleAuthentification.MGDA_Inactive)) {
                if (lAvecRB && this.options.modeAffichage === ObjetChoixStrategieSecurisation.typeAffichage.securisation) {
                    H.push('<div class="sc_mode_sep"></div>');
                }
                H.push('<ie-radio class="css_rbMode"', GHtml.composeAttr('ie-model', 'rbChoixStrat', [TypeModeGestionDoubleAuthentification.MGDA_Inactive]), '>', GTraductions.getValeur('DoubleAuth.RenforcerSecuAucune'), '</ie-radio>');
            }
            H.push('</div>');
            H.push('</div>');
            return H.join('');
        }
        module.exports = ObjetChoixStrategieSecurisation;
    },
    fn: "objetchoixstrategiesecurisation.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Produit/Css/InterfaceSecurisationCompteCP.css');
        var MethodesObjet = require('MethodesObjet.js');
        var ObjetInterface = require('ObjetInterface.js');
        var GTraductions = require('ObjetTraduction.js');
        var GHtml = require('GHtml.js');
        var SecurisationCompte = require('TypeSecurisationCompte.js');
        var TypeModeGestionDoubleAuthentification = SecurisationCompte.TypeModeGestionDoubleAuthentification;
        var TypeActionIHMSecurisationCompte = SecurisationCompte.TypeActionIHMSecurisationCompte;
        var TypeCommandeSecurisationCompteHttp = SecurisationCompte.TypeCommandeSecurisationCompteHttp;
        var ObjetChoixStrategieSecurisation = require('ObjetChoixStrategieSecurisation.js');
        var ObjetSaisieCodePIN = require('ObjetSaisieCodePIN.js');
        var EStructureAffichage = require('Enumere_StructureAffichage.js');
        var ObjetRequeteSecurisationCompteDoubleAuth = require('ObjetRequeteSecurisationCompte.js').ObjetRequeteSecurisationCompteDoubleAuth;
        var EGenreAction = require('Enumere_Action.js');
        var EGenreBoiteMessage = require('Enumere_BoiteMessage.js');
        var ToucheClavier = require('ToucheClavier.js');
        var TypeThemeBouton = require('Type_ThemeBouton.js');

        function InterfaceSecurisationCompteCP() {
            this.inheritedCreate(arguments);
            this.valeurs = {
                cbIdentification: true,
                strIdentification: '',
                mode: TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN,
                avecWarningIdentification: true
            };
            this.GenreStructure = EStructureAffichage.Autre;
        }
        MethodesObjet.heritagePrototype(InterfaceSecurisationCompteCP, ObjetInterface);
        InterfaceSecurisationCompteCP.prototype.getControleur = function(aInstance) {
            return {
                rbChoixStrat: {
                    getValue: function(aGenre) {
                        return aInstance.valeurs.mode === aGenre;
                    },
                    setValue: function(aGenre) {
                        aInstance.valeurs.mode = aGenre;
                        delete aInstance.valeurs.codePIN;
                        if (!_avecIdentificationAppareil.call(aInstance)) {
                            aInstance.valeurs.strIdentification = '';
                        }
                    }
                },
                cbIdentification: {
                    getValue: function() {
                        return aInstance.valeurs.cbIdentification && _avecIdentificationAppareil.call(aInstance);
                    },
                    setValue: function(aValue) {
                        aInstance.valeurs.cbIdentification = aValue;
                        if (aInstance.valeurs.avecWarningIdentification && !aInstance.valeurs.cbIdentification) {
                            aInstance.valeurs.avecWarningIdentification = false;
                            GApplication.getMessage().afficher({
                                message: GTraductions.getValeur('DoubleAuth.EnregistrerAppareilResterInconnu') + '<br>' +
                                    GTraductions.getValeur('DoubleAuth.PersonnesConfiance')
                            });
                        }
                    },
                    getDisabled: function() {
                        return !_avecIdentificationAppareil.call(aInstance);
                    }
                },
                inputIdentification: {
                    getValue: function() {
                        return aInstance.valeurs.strIdentification;
                    },
                    setValue: function(aValue) {
                        aInstance.valeurs.strIdentification = aValue;
                    },
                    getDisabled: function() {
                        return !aInstance.valeurs.cbIdentification || !_avecIdentificationAppareil.call(aInstance);
                    },
                    node: function() {
                        $(this.node).on('keyup', function(aEvent) {
                            if (aEvent.which === ToucheClavier.RetourChariot && !_getDisabledBtnSuivant(aInstance)) {
                                _surSuivant(aInstance);
                            }
                        });
                    }
                },
                getHtmlCompteurInput: function() {
                    return aInstance.valeurs.strIdentification.length > 0 ? aInstance.valeurs.strIdentification.length + '/' + SecurisationCompte.C_LibelleAppareilMaxLength : '&nbsp;';
                },
                btnAnnuler: {
                    event: function() {
                        aInstance.resolve({
                            annuler: true
                        });
                    }
                },
                btnSuivant: {
                    event: function() {
                        _surSuivant(aInstance);
                    },
                    getDisabled: function() {
                        return _getDisabledBtnSuivant(aInstance);
                    }
                }
            };
        };
        var c_echecControle = 'echecControle';

        function _getDisabledBtnSuivant(aInstance) {
            if ((aInstance.donnees.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_ChoixStrategie) || aInstance.donnees.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_SaisieCodePINetSource)) && aInstance.valeurs.mode === TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN && !aInstance.valeurs.codePIN) {
                return true;
            }
            if (_avecIdentificationAppareil.call(aInstance)) {
                if (aInstance.valeurs.cbIdentification && !aInstance.valeurs.strIdentification) {
                    return true;
                }
            }
            return false;
        }

        function _surSuivant(aInstance) {
            _controleNomUniquePromise(aInstance).then(function() {
                var lDonnees = {};
                if (aInstance.donnees.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_ChoixStrategie)) {
                    lDonnees.mode = aInstance.valeurs.mode;
                }
                if (aInstance.valeurs.mode === TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN) {
                    lDonnees.codePin = aInstance.valeurs.codePIN;
                }
                if (_avecIdentificationAppareil.call(aInstance)) {
                    lDonnees.avecIdentification = aInstance.valeurs.cbIdentification;
                    if (lDonnees.avecIdentification) {
                        lDonnees.strIdentification = aInstance.valeurs.strIdentification;
                    }
                }
                aInstance.resolve({
                    suivant: true,
                    donnees: lDonnees
                });
            }, function(aParams) {
                if (aParams === c_echecControle) {} else {}
            });
        }

        function _controleNomUniquePromise(aInstance) {
            return Promise.resolve().then(function() {
                if (aInstance.valeurs.cbIdentification && aInstance.valeurs.strIdentification) {
                    if (aInstance.donnees.changementStrategieImpose && aInstance.valeurs.strIdentification === aInstance.donnees.libelleSaisieExistant) {
                        return;
                    }
                    return new ObjetRequeteSecurisationCompteDoubleAuth(aInstance).lancerRequete({
                        action: TypeCommandeSecurisationCompteHttp.csch_LibellesSourceConnexionDejaConnus,
                        libelle: aInstance.valeurs.strIdentification
                    }).then(function(aJSON) {
                        if (aJSON && aJSON.dejaConnu) {
                            if (aInstance.donnees.changementStrategieImpose) {
                                return GApplication.getMessage().afficher({
                                    message: GTraductions.getValeur('DoubleAuth.LibelleAppareilDejaUtilise')
                                }).then(function() {
                                    _focusInputIndentification(aInstance);
                                    return Promise.reject(c_echecControle);
                                });
                            }
                            var lMessage = '';
                            if (GApplication.estAppliMobile || !GParametres.urlFAQEnregistrementDoubleAuth) {
                                lMessage = GTraductions.getValeur('DoubleAuth.EnregistrerAppareilNomDejaUtilise');
                            } else {
                                lMessage = [
                                    GTraductions.getValeur('DoubleAuth.Message_SourceConnexion_1'), '<br><br>', '<ul class="browser-default"><li>', GTraductions.getValeur('DoubleAuth.Message_SourceConnexion_2'), '<div style="font-style: italic; padding:.3rem 0 .5rem 0;">', GTraductions.getValeur('DoubleAuth.Message_SourceConnexion_3_S', ['<a href="' + GParametres.urlFAQEnregistrementDoubleAuth + '">' + GTraductions.getValeur('DoubleAuth.FAQEnregistrement') + '</a>']), '</div></li><li>', GTraductions.getValeur('DoubleAuth.Message_SourceConnexion_4'), '</li></ul>'
                                ].join('');
                            }
                            return GApplication.getMessage().afficher({
                                type: EGenreBoiteMessage.Confirmation,
                                message: lMessage,
                                listeBoutons: [{
                                    libelle: GTraductions.getValeur('Annuler'),
                                    theme: TypeThemeBouton.secondaire
                                }, {
                                    libelle: GTraductions.getValeur('Valider'),
                                    theme: TypeThemeBouton.primaire,
                                    genreAction: EGenreAction.Valider
                                }]
                            }).then(function(aGenreAction) {
                                if (aGenreAction !== EGenreAction.Valider) {
                                    _focusInputIndentification(aInstance);
                                    return Promise.reject(c_echecControle);
                                }
                            });
                        }
                    });
                }
            });
        }
        InterfaceSecurisationCompteCP.prototype.ConstruireInstances = function() {
            this.identChoixStrategie = this.Add(ObjetChoixStrategieSecurisation);
            this.identSaisieCodePIN = this.Add(ObjetSaisieCodePIN, _evenementSaisieCoedPIN);
        };

        function _evenementSaisieCoedPIN(aCodePIN) {
            this.valeurs.codePIN = aCodePIN;
            if (this.valeurs.codePIN) {
                _focusInputIndentification(this);
            }
        }

        function _focusInputIndentification(aInstance) {
            $('#' + aInstance.Nom.escapeJQ() + ' .sc_identification input:not(.sc_input_bidon)').focus();
        }

        function _avecIdentificationAppareil() {
            return [TypeModeGestionDoubleAuthentification.MGDA_SaisieCodePIN, TypeModeGestionDoubleAuthentification.MGDA_NotificationSeulement].indexOf(this.valeurs.mode) >= 0;
        }

        function _construire() {
            var lAvecChoixStrategie = this.donnees.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_ChoixStrategie);
            var lAvecChoixCodePIN = this.donnees.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_SaisieCodePINetSource);
            var H = [];
            H.push('<div class="InterfaceSecurisationCompteCP">');
            if (lAvecChoixStrategie) {
                H.push('<section tabindex="-1">', '<h1>', GTraductions.getValeur('DoubleAuth.RenforcerSecuTitre'), '</h1>', '<div id="', this.GetInstance(this.identChoixStrategie).Nom, '"></div>', '</section>');
            } else if (lAvecChoixCodePIN) {
                H.push('<section tabindex="-1">', '<h1>', GTraductions.getValeur('DoubleAuth.ValiderTitreInconnu'), '</h1>', '<div class="sc_zone">', '<div class="sc_codePIN" id="', this.GetInstance(this.identSaisieCodePIN).GetNom(), '"></div>', '</div>', '</section>');
            } else {}
            H.push('<section tabindex="-1">', '<h1>', !lAvecChoixStrategie && !lAvecChoixCodePIN ? GTraductions.getValeur('DoubleAuth.ValiderTitreInconnu') : GTraductions.getValeur('DoubleAuth.EnregistrerAppareilTitre'), '</h1>', '<div class="sc_identification">', '<div class="sc_legende">', !lAvecChoixStrategie && !lAvecChoixCodePIN ? GTraductions.getValeur('DoubleAuth.EnregistrerAppareilRappelNotif') + '<br>' : '', GTraductions.getValeur('DoubleAuth.EnregistrerAppareilInfoIdentification'), '</div>', '<ie-checkbox ie-model="cbIdentification">', GTraductions.getValeur('DoubleAuth.EnregistrerAppareilNommerAppareil'), '</ie-checkbox>', '<div class="sc_legende_cb">', GTraductions.getValeur('DoubleAuth.EnregistrerAppareilSuggestions'), '</div>', '<div>', '<input type="text" ie-model="inputIdentification" class="style-input" maxlength="', SecurisationCompte.C_LibelleAppareilMaxLength, '" ie-trim autocomplete="address-level1" />', '<div ie-html="getHtmlCompteurInput" class="sc_compteurInput"></div>', !lAvecChoixStrategie && GParametres.urlFAQEnregistrementDoubleAuth ? '<a class="sc_lien_faq" href="' + GParametres.urlFAQEnregistrementDoubleAuth + '">' + GTraductions.getValeur('DoubleAuth.MessageFAQEnregistrement') + '</a>' : '', '<input type="text" class="sc_input_bidon" autocomplete="address-level1" />', '</div>', '</div>', '</section>');
            H.push('<section class="sc_boutonsValid" tabindex="-1">', '<ie-bouton ie-model="btnAnnuler">', GTraductions.getValeur('DoubleAuth.Annuler'), '</ie-bouton>', '<ie-bouton ie-model="btnSuivant" class="themeBoutonPrimaire">', GTraductions.getValeur('DoubleAuth.Suivant'), '</ie-bouton>', '</section>');
            H.push('</div>');
            return H.join('');
        }
        InterfaceSecurisationCompteCP.prototype.setDonneesPromise = function(aDonnees) {
            return new Promise(function(aResolve) {
                this.donnees = aDonnees;
                if (this.donnees.libelleSaisieExistant && this.donnees.changementStrategieImpose) {
                    this.valeurs.strIdentification = this.donnees.libelleSaisieExistant;
                }
                this.resolve = aResolve;
                this.Afficher(_construire.call(this));
                if (this.donnees.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_ChoixStrategie)) {
                    this.GetInstance(this.identChoixStrategie).setOptions({
                        modeAffichage: ObjetChoixStrategieSecurisation.typeAffichage.securisation,
                        modesPossibles: this.donnees.modesPossibles,
                        callbackChoix: function(aGenre) {
                            this.valeurs.mode = aGenre;
                            delete this.valeurs.codePIN;
                            if (!_avecIdentificationAppareil.call(this)) {
                                this.valeurs.strIdentification = '';
                            }
                        }.bind(this),
                        optionsPIN: {
                            classeRequete: ObjetRequeteSecurisationCompteDoubleAuth,
                            modePIN: ObjetSaisieCodePIN.ModeSaisieValiderPIN.msDefinirPIN
                        },
                        callbackPIN: _evenementSaisieCoedPIN.bind(this)
                    }).setDonnees(this.valeurs);
                } else if (this.donnees.actionsDoubleAuth.contains(TypeActionIHMSecurisationCompte.AIHMSC_SaisieCodePINetSource)) {
                    this.GetInstance(this.identSaisieCodePIN).setOptions({
                        classeRequete: ObjetRequeteSecurisationCompteDoubleAuth,
                        modePIN: ObjetSaisieCodePIN.ModeSaisieValiderPIN.msControlePIN
                    }).setDonnees(this.valeurs);
                }
                this.FocusSurPremierElement();
            }.bind(this));
        };
        InterfaceSecurisationCompteCP.prototype.FocusSurPremierElement = function() {
            GHtml.setFocus($('#' + this.Nom.escapeJQ() + ' section:first-child').get(0));
        };
        module.exports = InterfaceSecurisationCompteCP;
    },
    fn: "interfacesecurisationcomptecp.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GTraductions = require('ObjetTraduction.js');
        var TLienPolitiqueMotDePasse = {
            getLien: function() {
                return ['<a href="', GTraductions.getValeur('LienPolitiqueMotDePasse.UrlFAQMotDePasse'), '" target="_blank">', GTraductions.getValeur('LienPolitiqueMotDePasse.ConsulterNotrePolitiqueSecuriteMDP'), '</a>'].join('');
            }
        };
        module.exports = TLienPolitiqueMotDePasse;
    },
    fn: "lienpolitiquemotdepasse.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeOptionGenerationMotDePasse = {
            OGMDP_AvecAuMoinsUneLettre: 0,
            OGMDP_AvecAuMoinsUnChiffre: 1,
            OGMDP_AvecAuMoinsUnCaractereSpecial: 2,
            OGMDP_AvecMelangeMinusculeMajuscule: 3,
            OGMDP_AvecControleIdentifiantDifferent: 4
        };
        module.exports.TypeOptionGenerationMotDePasse = TypeOptionGenerationMotDePasse;
    },
    fn: "typeoptiongenerationmotdepasse.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var GChaine = require('GChaine.js');
        var GStyle = require('GStyle.js');
        var GTraductions = require('ObjetTraduction.js');
        var TypeEnsembleNombre = require('TypeEnsembleNombre.js');
        var TypeOptionGenerationMotDePasse = require('TypeOptionGenerationMotDePasse.js').TypeOptionGenerationMotDePasse;
        var TValidationMotDePasse = (function() {
            function _construireLigneValidateur(aEchec, aTraduction, aOptions) {
                var H = [];
                H.push('<div class="NoWrap', aOptions.avecEspace ? ' PetitEspaceBas' : '', '">');
                if (aEchec !== undefined) {
                    H.push('<div class="InlineBlock AlignementMilieuVertical ', !aEchec ? 'Image_CocheVerte' : 'Image_CocheCroixRouge', '"></div>');
                } else {
                    H.push('<div class="InlineBlock AlignementMilieuVertical" style="', GStyle.composeWidth(16), '"></div>');
                }
                H.push('<div class="InlineBlock AlignementMilieuVertical PetitEspaceGauche">', aTraduction, '</div>');
                H.push('</div>');
                return H.join('');
            }
            return {
                construire: function(aReglesSaisieMotDePasse, aErreursMDP, aOptions) {
                    var H = [],
                        lErreursMDP, lOptions = {
                            avecEspace: true,
                            avecMdpDifferent: false,
                            avecMDPDifferentLogin: true
                        };
                    $.extend(lOptions, aOptions);
                    if (aErreursMDP) {
                        lErreursMDP = {
                            erreurTailleMDP: false,
                            reglesNonRespectes: new TypeEnsembleNombre()
                        };
                        $.extend(lErreursMDP, aErreursMDP);
                    }
                    H.push('<div>');
                    H.push('<div class="', lOptions.avecEspace ? 'EspaceBas' : '', ' Gras">', GTraductions.getValeur('validationMDP.titre') + ' :', '</div>');
                    H.push(_construireLigneValidateur(lErreursMDP ? lErreursMDP.erreurTailleMDP : undefined, MethodesObjet.isNumber(aReglesSaisieMotDePasse.max) ? GChaine.Format(GTraductions.getValeur('validationMDP.longueurMDPMinMax'), [aReglesSaisieMotDePasse.min, aReglesSaisieMotDePasse.max]) : GChaine.Format(GTraductions.getValeur('validationMDP.longueurMDPMin'), [aReglesSaisieMotDePasse.min]), lOptions));
                    if (aReglesSaisieMotDePasse.regles.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecAuMoinsUnChiffre)) {
                        H.push(_construireLigneValidateur(lErreursMDP ? lErreursMDP.reglesNonRespectes.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecAuMoinsUnChiffre) : undefined, GTraductions.getValeur('validationMDP.chiffre'), lOptions));
                    }
                    if (aReglesSaisieMotDePasse.regles.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecAuMoinsUneLettre)) {
                        H.push(_construireLigneValidateur(lErreursMDP ? lErreursMDP.reglesNonRespectes.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecAuMoinsUneLettre) : undefined, GTraductions.getValeur('validationMDP.lettre'), lOptions));
                    }
                    if (aReglesSaisieMotDePasse.regles.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecAuMoinsUnCaractereSpecial)) {
                        H.push(_construireLigneValidateur(lErreursMDP ? lErreursMDP.reglesNonRespectes.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecAuMoinsUnCaractereSpecial) : undefined, GTraductions.getValeur('validationMDP.special'), lOptions));
                    }
                    if (aReglesSaisieMotDePasse.regles.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecMelangeMinusculeMajuscule)) {
                        H.push(_construireLigneValidateur(lErreursMDP ? lErreursMDP.reglesNonRespectes.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecMelangeMinusculeMajuscule) : undefined, GTraductions.getValeur('validationMDP.MajMin'), lOptions));
                    }
                    if (lOptions.avecMDPDifferentLogin || aReglesSaisieMotDePasse.regles.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecControleIdentifiantDifferent)) {
                        H.push(_construireLigneValidateur(lErreursMDP ? lErreursMDP.reglesNonRespectes.contains(TypeOptionGenerationMotDePasse.OGMDP_AvecControleIdentifiantDifferent) : undefined, GTraductions.getValeur('validationMDP.login'), lOptions));
                    }
                    if (lOptions.avecMdpDifferent) {
                        H.push(_construireLigneValidateur(lErreursMDP ? !!lErreursMDP.MDPIdentique : undefined, GTraductions.getValeur('validationMDP.mdpDifferent'), lOptions));
                    }
                    H.push('</div>');
                    return H.join('');
                }
            };
        }());
        module.exports = TValidationMotDePasse;
    },
    fn: "validationmotdepasse.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('Produit/css/ObjetSaisieMotDePasseCP.css');
        var MethodesObjet = require('MethodesObjet.js');
        var IEHtml = require('IEHtml.js');
        var GHtml = require('GHtml.js');
        var GStyle = require('GStyle.js');
        var TLienPolitiqueMotDePasse = require('LienPolitiqueMotDePasse.js');
        var GTraductions = require('ObjetTraduction.js');
        var ToucheClavier = require('ToucheClavier.js');
        var TValidationMotDePasse = require('ValidationMotDePasse.js');
        var GUID = require('GUID.js');
        var Identite = require('ObjetIdentite.js');

        function ObjetSaisieMotDePasseCP() {
            this.inheritedCreate(arguments);
            this.options = {
                classRequeteSaisie: null,
                donneesReglesMdp: null,
                callbackApresValidation: null,
                callbackFocusValidation: null,
                setReglesMDP: null,
                forcerModificationMdp: false,
                avecMDPActuel: true,
                avecReglesMDP: true,
                avecMdpNouveauDifferentDeActuel: true,
                pourMobile: false,
                attrInputActuel: 'type = "password" autocomplete = "new-password"',
                attrInputNouveau: 'type = "password" autocomplete = "new-password"',
                messageExplication: '',
                libelleMDPActuel: GTraductions.getValeur('saisieMDP.MotDePasseActuel'),
                libelleNewMDP: GTraductions.getValeur('saisieMDP.NewMotDePasse'),
                libelleConfirmNewMDP: GTraductions.getValeur('saisieMDP.Confirmation'),
                libelleEchecModification: GTraductions.getValeur('saisieMDP.EchecModification'),
                libelleReussiteModification: GTraductions.getValeur('saisieMDP.ReussiteModification'),
                libelleMDPActuelIncorrect: GTraductions.getValeur('saisieMDP.MotActuelIncorrect'),
                libelleConfirmationIncorrecte: GTraductions.getValeur('saisieMDP.ConfirmationIncorrecte')
            };
            this.mdp = {
                actuel: '',
                nouveau: '',
                confirmation: ''
            };
            var lId = GUID.getId();
            this.ids = {
                input1: lId + '_in1',
                input2: lId + '_in2',
                input3: lId + '_in3',
                validateur: lId + '_validateur'
            };
        }
        MethodesObjet.heritagePrototype(ObjetSaisieMotDePasseCP, Identite);
        ObjetSaisieMotDePasseCP.C_TailleMaxMotDePasse = 32;
        ObjetSaisieMotDePasseCP.C_TailleMinLogin = 2;
        ObjetSaisieMotDePasseCP.C_TailleMaxLogin = 128;
        ObjetSaisieMotDePasseCP.prototype.setOptions = function(aOptions) {
            Object.assign(this.options, aOptions);
            return this;
        };

        function _avecMDPActuel() {
            return this.options.avecMDPActuel && !this.options.forcerModificationMdp;
        }

        function _getOptionsValidationMdp() {
            return {
                avecMdpDifferent: this.options.avecMdpNouveauDifferentDeActuel
            };
        }
        ObjetSaisieMotDePasseCP.prototype.SetDonnees = function() {
            this.Afficher(_construireHtml.call(this));
            if (this.options.avecReglesMDP) {
                $('#' + this.ids.validateur.escapeJQ()).IEHtml(TValidationMotDePasse.construire(this.options.donneesReglesMdp, null, _getOptionsValidationMdp.call(this)));
            }
            GHtml.setFocus(!_avecMDPActuel.call(this) ? this.ids.input2 : this.ids.input1);
        };
        ObjetSaisieMotDePasseCP.prototype.getControleur = function(aInstance) {
            return {
                mdp: {
                    actuel: {
                        getValue: function() {
                            return aInstance.mdp.actuel;
                        },
                        setValue: function(aValue) {
                            aInstance.mdp.actuel = aValue;
                        },
                        node: function() {
                            $(this.node).on('keyup', function(event) {
                                if (event.which === ToucheClavier.RetourChariot) {
                                    GHtml.setFocus(aInstance.ids.input2);
                                }
                            });
                        }
                    },
                    nouveau: {
                        getValue: function() {
                            return aInstance.mdp.nouveau;
                        },
                        setValue: function(aValue) {
                            aInstance.mdp.nouveau = aValue;
                        },
                        getDisabled: function() {
                            return aInstance.mdp.actuel.length === 0 && _avecMDPActuel.call(aInstance);
                        },
                        node: function() {
                            $(this.node).on('keyup', function(event) {
                                if (event.which === ToucheClavier.RetourChariot) {
                                    GHtml.setFocus(aInstance.ids.input3);
                                }
                            });
                        }
                    },
                    confirmation: {
                        getValue: function() {
                            return aInstance.mdp.confirmation;
                        },
                        setValue: function(aValue) {
                            aInstance.mdp.confirmation = aValue;
                        },
                        getDisabled: function() {
                            return (aInstance.mdp.actuel.length === 0 && _avecMDPActuel.call(aInstance)) || aInstance.mdp.nouveau.length === 0;
                        },
                        node: function() {
                            $(this.node).on('keyup', function(event) {
                                if (event.which === ToucheClavier.RetourChariot && aInstance.options.callbackFocusValidation) {
                                    aInstance.options.callbackFocusValidation();
                                }
                            });
                        },
                        getStyle: function() {
                            if (aInstance.options.pourMobile) {
                                return null;
                            }
                            return {
                                border: '1px solid ' + (aInstance.mdp.confirmation.length === 0 || aInstance.mdp.confirmation === aInstance.mdp.nouveau ? GCouleur.fenetre.bordure : 'red')
                            };
                        },
                        getHint: function() {
                            return aInstance.mdp.confirmation.length === 0 || aInstance.mdp.confirmation === aInstance.mdp.nouveau ? null : aInstance.options.libelleConfirmationIncorrecte;
                        }
                    }
                }
            };
        };

        function _construireHtml() {
            var H = [],
                lStyleInput = this.options.pourMobile ? '' : GStyle.composeCouleurBordure(GCouleur.fenetre.bordure);
            H.push('<div class="ObjetSaisieMotDePasseCP">');
            if (this.options.messageExplication) {
                H.push('<div class="BlocMessageEnTete">', this.options.messageExplication, '</div>');
            }
            H.push('<div class="BlocContenu">');
            H.push('<div class="BlocMDP">');
            if (_avecMDPActuel.call(this)) {
                H.push('<div>', '<label for="', this.ids.input1, '">', this.options.libelleMDPActuel, '</label>', '<input ie-model="mdp.actuel" id="', this.ids.input1, '" ', this.options.attrInputActuel, ' style="', lStyleInput, '" />', '</div>');
            }
            H.push('<div>', '<label for="', this.ids.input2, '">', this.options.libelleNewMDP, '</label>', '<input ie-model="mdp.nouveau" id="', this.ids.input2, '" ', this.options.attrInputNouveau, ' style="', lStyleInput, '" />', '</div>');
            H.push('<div>', '<label for="', this.ids.input3, '">', this.options.libelleConfirmNewMDP, '</label>', '<input ie-model="mdp.confirmation" id="', this.ids.input3, '" ', this.options.attrInputNouveau, '  ie-style="getStyle" ie-hint="getHint"/>', '</div>');
            H.push('</div>');
            if (this.options.avecReglesMDP) {
                H.push('<div class="BlocValidation">');
                H.push('<div id="', this.ids.validateur, '"></div>');
                H.push('</div>');
            }
            H.push('</div>');
            if (this.options.avecReglesMDP) {
                H.push('<div class="Souligne">', TLienPolitiqueMotDePasse.getLien(), '</div>');
            }
            H.push('<div style="display:none"><input type="password" /></div>');
            H.push('<div style="display:none"><input type="password" /></div>');
            H.push('<div style="display:none"><input type="password" /></div>');
            H.push('</div>');
            return H.join('');
        }

        function _surReponseSaisie(aParams) {
            var lParams = Object.assign({
                avecErreur: true,
                JSON: null,
                messageDejaAffiche: false,
                messageErreur: ''
            }, aParams);
            if (lParams.JSON && (lParams.JSON.erreurMDP || lParams.JSON.messageErreur)) {
                if (this.options.avecReglesMDP) {
                    this.options.donneesReglesMdp = lParams.JSON.reglesSaisieMDP;
                    if (this.options.setReglesMDP && lParams.JSON.reglesSaisieMDP) {
                        this.options.setReglesMDP(lParams.JSON);
                    }
                }
                var lMessage = '';
                if (lParams.JSON.messageErreur) {
                    lMessage += lParams.JSON.messageErreur;
                } else if (lParams.JSON.erreurMDP && lParams.JSON.erreurMDP.erreurAncienMDP) {
                    lMessage += this.options.libelleMDPActuelIncorrect + '<br><br>';
                }
                if (this.options.avecReglesMDP) {
                    lMessage += TValidationMotDePasse.construire(this.options.donneesReglesMdp, lParams.JSON.erreurMDP, _getOptionsValidationMdp.call(this));
                }
                var lIdFocus = '';
                this.mdp.nouveau = '';
                this.mdp.confirmation = '';
                if (lParams.JSON.messageErreur || (lParams.JSON.erreurMDP && lParams.JSON.erreurMDP.erreurAncienMDP)) {
                    this.mdp.actuel = '';
                    lIdFocus = this.ids.input1;
                } else {
                    lIdFocus = this.ids.input2;
                }
                if (this.options.avecReglesMDP) {
                    $('#' + this.ids.validateur.escapeJQ()).IEHtml(TValidationMotDePasse.construire(this.options.donneesReglesMdp, lParams.JSON.erreurMDP, _getOptionsValidationMdp.call(this)));
                }
                return GApplication.getMessage().afficher({
                    titre: this.options.libelleEchecModification,
                    message: lMessage
                }).then(function() {
                    GHtml.setFocus(lIdFocus);
                    IEHtml.refresh();
                });
            } else {
                if (lParams.avecErreur) {
                    this.mdp.nouveau = '';
                    this.mdp.confirmation = '';
                }
                var lPromise = Promise.resolve();
                if (!lParams.messageDejaAffiche) {
                    if (lParams.avecErreur) {
                        lPromise = GApplication.getMessage().afficher({
                            message: this.options.libelleEchecModification + (lParams.messageErreur ? '<br><br>' + lParams.messageErreur : '')
                        });
                    } else if (this.options.avecMessageReussiteModif) {
                        lPromise = GApplication.getMessage().afficher({
                            message: this.options.libelleReussiteModification
                        });
                    }
                }
                lPromise.then(function() {
                    this.options.callbackApresValidation(lParams);
                }.bind(this));
            }
        }
        ObjetSaisieMotDePasseCP.prototype.avecValidationPossible = function() {
            return (this.mdp.actuel.length > 0 || !_avecMDPActuel.call(this)) && this.mdp.confirmation.length > 0;
        };

        function _controleAvantValidation() {
            if (this.mdp.confirmation && this.mdp.confirmation !== this.mdp.nouveau && this.options.libelleConfirmationIncorrecte) {
                this.mdp.nouveau = '';
                this.mdp.confirmation = '';
                GApplication.getMessage().afficher({
                    message: this.options.libelleConfirmationIncorrecte
                }).then(function() {
                    GHtml.setFocus(this.ids.input2);
                    IEHtml.refresh();
                }.bind(this));
                return false;
            }
            return true;
        }
        ObjetSaisieMotDePasseCP.prototype.valider = function() {
            if (!_controleAvantValidation.call(this)) {
                return;
            }
            if (this._requeteSaisieEnCours) {
                return;
            }
            this._requeteSaisieEnCours = true;
            if (this.options.classRequeteSecurisation) {
                return new(this.options.classRequeteSecurisation)(this).setOptions({
                    gererMessageErreur: function() {}.bind(this)
                }).lancerRequete({
                    action: this.options.actionRequeteSecurisation,
                    ancienMDP: this.mdp.actuel,
                    nouveauMDP: this.mdp.confirmation
                }).finally(function() {
                    this._requeteSaisieEnCours = false;
                }.bind(this)).then(function(aJSON) {
                    _surReponseSaisie.call(this, {
                        JSON: aJSON,
                        avecErreur: false,
                        nouveauMDP: this.mdp.confirmation
                    });
                }.bind(this), function(aParams) {
                    return GApplication.getMessage().afficher({
                        titre: this.options.libelleEchecModification,
                        message: aParams ? aParams.message || '' : ''
                    }).then(function() {
                        this.options.callbackApresValidation({
                            avecErreur: true
                        });
                    }.bind(this));
                }.bind(this));
            }
            return new(this.options.classRequeteSaisie)(this).lancerRequete({
                ancienMDP: this.mdp.actuel,
                nouveauMDP: this.mdp.confirmation,
                forcerModification: this.options.forcerModificationMdp
            }).then(function(aParams) {
                this._requeteSaisieEnCours = false;
                _surReponseSaisie.call(this, aParams);
            }.bind(this), function() {
                this._requeteSaisieEnCours = false;
                return GApplication.getMessage().afficher({
                    message: this.options.libelleEchecModification
                }).then(function() {
                    this.options.callbackApresValidation({
                        avecErreur: true
                    });
                });
            }.bind(this));
        };
        module.exports = ObjetSaisieMotDePasseCP;
    },
    fn: "objetsaisiemotdepassecp.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        module.exports = function(aParams) {
            var H = '';
            H += '<div style="position:relative; display: flex; flex-direction: column; min-height:100%;">';
            H += '<nav style="flex: none;">';
            H += '<div class="nav-wrapper" style="position:relative;line-height:1.5;">';
            H += '<div class="brand-logo center">';
            if (aParams.options.logoDepartementImage) {
                H += '<div style="position:absolute; left:0.1em; top:0; bottom:0; max-width:20%; display:flex; align-items: center; text-align: left; ">';
                H += '<img src="' + aParams.options.logoDepartementImage + '" alt="" style="max-width: 100%; max-height:90%;" ie-node="getNodeLogoDepartement" />';
                H += '</div>';
            }
            H += '<span style="position:relative; z-index: 1;">';
            H += aParams.options.nomEspace;
            H += '<br /> ' + aParams.options.titreEtablissement;
            H += '</span>';
            H += '</div>';
            H += '<div class="drapeau-changement-langue" ie-display="visibiliteChangementLangue" ie-html="choixLangue"></div>';
            H += '</div>';
            H += '</nav>';
            H += '<div role="main" style="flex: 1 1 auto;">';
            H += '<form id=' + aParams.id.Form + ' target="_self" onsubmit="event.stopImmediatePropagation();event.preventDefault();return false;" style="padding:1rem;" autocomplete="off">';
            H += '<div class="input-field" style="padding-bottom: 1rem;">';
            H += '<i class="material-icons prefix iconLogin"></i>';
            H += '<input id="' + aParams.id.identification + '" type="text" title="' + aParams.traductions.texteTitreIdentifiant + '" ie-model="login" ie-textbrut autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />';
            H += '<label for="' + aParams.id.identification + '" ie-class="getClassLabelLogin">' + aParams.traductions.texteIdentifiant + '</label>';
            H += '</div>';
            H += '<div class="input-field" style="padding-bottom: 1rem;">';
            H += '<i class="material-icons prefix iconPwd"></i>';
            H += '<input id="' + aParams.id.motDePasse + '" type="password" title="' + aParams.traductions.texteTitreMotdepasse + '" ie-model="motDePasse" />';
            H += '<label for="' + aParams.id.motDePasse + '" ie-class="getClassLabelMotDePasse">' + aParams.traductions.texteMotdepasse + '</label>';
            H += '</div>';
            H += '<div class="switch-field">';
            H += '<i class="material-icons prefix"></i>';
            H += '<label for="' + aParams.id.checkSouvenir + '">' + aParams.traductions.seSouvenirLabel + '</label>';
            H += '<div class="switch InlineBlock GrandEspaceGauche">';
            H += '<label>';
            H += aParams.traductions.seSouvenirNon;
            H += '<input id="' + aParams.id.checkSouvenir + '" type="checkbox" title="' + aParams.traductions.seSouvenirInfo + '" ie-model="stockageMDP" />';
            H += '<span class="lever"></span>';
            H += aParams.traductions.seSouvenirOui;
            H += '</label>';
            H += '</div>';
            H += '</div>';
            H += '<div class="input-field">';
            H += '<ie-bouton id="' + aParams.id.btnConnexion + '" class="right themeBoutonConnexion" ie-model="boutonValidation">' + aParams.traductions.texteBouton + '</ie-bouton>';
            H += '</div>';
            H += '<div class="clearfix"></div>';
            H += '<div class="input-field" ie-display="visibiliteRetourEspace">';
            H += '<span class="Texte14 Gris">' + aParams.traductions.redirigeMobile + '</span>';
            H += '<br>';
            H += '<span style="display:inline-block;padding-top:4px" class="Texte14 Gris AvecMain Souligne" onclick="' + aParams.id.thisNom + '.retourEspaceBureau()">';
            H += '<span class="IconeRetourEspace">&nbsp</span>' + aParams.traductions.retourEspace;
            H += '</span>';
            H += '</div>';
            H += '</form>';
            H += '<div id=' + aParams.id.ChangementMDP + ' style="display:none; padding:1rem;">';
            H += '<div id=' + aParams.id.ContenuChangementMDP + '></div>';
            H += '<div class="input-field">';
            H += '<ie-bouton id="' + aParams.id.BtnChangementMDP + '" class="right themeBoutonConnexion" ie-model="boutonChangementMDP">' + aParams.traductions.valider + '</ie-bouton>';
            H += '</div>';
            H += '</div>';
            H += '<div id=' + aParams.id.securisationCompte + ' style="display:none; padding:1rem;">';
            H += '<div id=' + aParams.id.contenuSecurisationCompte + '></div>';
            H += '</div>';
            H += '</div>';
            H += '<div style="flex:none; padding: .3rem; display: flex; align-items: flex-end;">';
            H += '<a href="' + aParams.options.lienMentions + '" target="_blank" style="flex: 1 1 auto; text-decoration:none;color:#555;font-weight:normal;">' + aParams.traductions.mentionsLegales + '</a>';
            H += '<a href="http://www.index-education.fr" title="' + aParams.options.titreLien + '" target="_blank" style="flex: none; text-decoration:none;" class="InlineBlock">';
            H += aParams.options.texteLien;
            H += '</a>';
            H += '</div>';
            H += '</div>';
            return H;
        };
    },
    fn: "mobile/script/html/interfaceconnexion.html.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var MethodesObjet = require('MethodesObjet.js');
        var _InterfaceConnexion = require('_InterfaceConnexion.js');
        var GTraductions = require('ObjetTraduction.js');
        var EGenreErreurAcces = require('Enumere_ErreurAcces.js');
        var EGenreOnglet = require('Enumere_Onglet.js');
        require('ObjetRequeteIdentification.js');
        require('ObjetRequeteAuthentificationPN.js');
        var MethodesTableau = require('MethodesTableau.js');
        var UtilitaireRedirection = require('UtilitaireRedirection.js');
        var GImageConnexion = require('ObjetImageConnexion.js');
        var GChaine = require('GChaine.js');
        var TypeArrierePlanAuthentification = require('TypeArrierePlanAuthentification.js').TypeArrierePlanAuthentification;
        var UtilitaireChangementLangue = require('UtilitaireChangementLangue.js');
        var EGenreEspace = require('Enumere_Espace.js');
        var FenetreModale_Patience = require('FenetreModale_Patience.js');
        var GHtml = require('GHtml.js');
        var GCryptage = require('ObjetCryptage.js');
        var EGenreCryptage = require('Enumere_Cryptage.js');
        var InterfaceSecurisationCompteCP = require('InterfaceSecurisationCompteCP.js');
        var Requetes = require('CollectionRequetes.js');
        var TypeCommandeSecurisationCompteHttp = require('TypeSecurisationCompte.js').TypeCommandeSecurisationCompteHttp;
        var ObjetRequeteSecurisationCompteDoubleAuth = require('ObjetRequeteSecurisationCompte.js').ObjetRequeteSecurisationCompteDoubleAuth;
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        Requetes.inscrire('ParametresUtilisateur', ObjetRequeteConsultation);
        MethodesObjet.heritagePrototype(InterfaceConnexion_Mobile, _InterfaceConnexion);

        function InterfaceConnexion_Mobile() {
            this.inheritedCreate(arguments);
            var lUtilUrl = new UtilitaireRedirection();
            var lAvecO365 = ((GParametres.avecO365 === true) && lUtilUrl.existParametre(('O365_ReturnURL').toLowerCase()) && lUtilUrl.existParametre('username'));
            this.setOptions({
                genreImageConnexion: GParametres.genreImageConnexion,
                urlImageConnexion: GParametres.urlImageConnexion,
                avecChoixConnexion: GParametres.avecChoixConnexion,
                stockageMDPActive: true,
                avecO365: lAvecO365,
                infosO365: {
                    avecAffichageUPN: true,
                    UPN: lUtilUrl.getValeurParametre('username') || ''
                },
                avecRecupIdMdp: MethodesTableau.existe(GEtatUtilisateur.GenreEspace, [EGenreEspace.Parents, EGenreEspace.Etudiants]) && GParametres.avecRecuperationInfosConnexion,
                texteExplicatifIdentifiant: '<strong>' + GTraductions.getValeur('connexion.identifiantTitre' + (GApplication.getDemo() ? 'Demo' : '')) + '</strong><br />' + GTraductions.getValeur('connexion.identifiantMessage'),
                texteExplicatifMotdepasse: '<strong>' + GTraductions.getValeur('connexion.motDePasseTitre' + (GApplication.getDemo() ? 'Demo' : ''), [GParametres.GetNomEspace()]) + '</strong><br />' + GTraductions.getValeur('connexion.motDePasseMessage' + (GApplication.getDemo() ? 'Demo' : ''), [GTraductions.getValeur('Onglet.Libelle')[EGenreOnglet.InfosPerso]]),
                requetes: {
                    identification: 'Identification',
                    authentification: 'Authentification',
                    URL_SSO_O365: 'SaisieURL_SSO_O365'
                },
                utilitaireChangementLangue: UtilitaireChangementLangue
            });
            this.fenetreModalePatience = new FenetreModale_Patience();
        }
        InterfaceConnexion_Mobile.prototype.ConstruireInstances = function() {
            this.inherited('ConstruireInstances');
            this.identForcerChangementMDP = this.Add(require('ObjetSaisieMotDePasseCP.js'));
            this.identSecurisationCompte = this.Add(InterfaceSecurisationCompteCP);
        };
        InterfaceConnexion_Mobile.prototype.construirePage = function() {
            var lFctHtml = require('mobile/script/html/InterfaceConnexion.html.js');
            var lGenreImageConnexion = (this.options.avecO365 === true) ? TypeArrierePlanAuthentification.Neutre : this.options.genreImageConnexion;
            var lObjetImage = GImageConnexion.getObjetImagePronote(lGenreImageConnexion);
            var lImageEspace = 'Image_EspaceInvites';
            switch (GEtatUtilisateur.GenreEspace) {
                case EGenreEspace.Professeur:
                    lImageEspace = 'Image_EspaceEnseignants';
                    break;
                case EGenreEspace.Eleve:
                    lImageEspace = 'Image_EspaceEtudiants';
                    break;
                case EGenreEspace.Etablissement:
                    lImageEspace = 'Image_EspaceSecretariat';
                    break;
                case EGenreEspace.Parent:
                    lImageEspace = 'Image_EspaceParents';
                    break;
                case EGenreEspace.Entreprise:
                    lImageEspace = 'Image_EspaceEntreprise';
                    break;
                case EGenreEspace.Academie:
                    lImageEspace = 'Image_EspaceAcademie';
                    break;
                case EGenreEspace.Administrateur:
                    lImageEspace = 'Image_EspaceAdministratif';
                    break;
                case EGenreEspace.Accompagnant:
                    lImageEspace = 'Image_EspaceAccompagnant';
                    break;
                case EGenreEspace.Inscription:
                    lImageEspace = 'Image_EspaceInscription';
                    break;
                case EGenreEspace.PrimProfesseur:
                    lImageEspace = 'Image_EspaceEnseignants';
                    break;
                case EGenreEspace.PrimParent:
                    lImageEspace = 'Image_EspaceParents';
                    break;
                case EGenreEspace.PrimEleve:
                    lImageEspace = 'Image_EspaceEtudiants';
                    break;
                case EGenreEspace.PrimAccompagnant:
                    lImageEspace = 'Image_EspaceAccompagnant';
                    break;
            }
            this.id.Form = this.Nom + 'form';
            this.id.ChangementMDP = this.Nom + 'idChangementMDP';
            this.id.ContenuChangementMDP = this.GetInstance(this.identForcerChangementMDP).GetNom();
            this.id.BtnChangementMDP = this.Nom + 'idBtnChangementMDP';
            this.id.securisationCompte = this.Nom + 'idsecurisationCompte';
            this.id.contenuSecurisationCompte = this.GetInstance(this.identSecurisationCompte).GetNom();
            var lParamHtml = {};
            lParamHtml.id = this.id;
            lParamHtml.traductions = {
                texteBouton: GTraductions.getValeur('connexion.seConnecter'),
                titreBouton: GChaine.toTitle(GTraductions.getValeur('connexion.seConnecterTitre')),
                texteModeConnexion: this.options.avecChoixConnexion ? GTraductions.getValeur('connexion.modeConnexion') : '',
                texteIdentifiant: GTraductions.getValeur('connexion.identifiant'),
                texteTitreIdentifiant: GChaine.toTitle(GTraductions.getValeur('connexion.identifiantInfo' + (GApplication.getDemo() ? 'Demo' : ''))),
                texteTitreMotdepasse: GChaine.toTitle(GTraductions.getValeur('connexion.motDePasseInfo' + (GApplication.getDemo() ? 'Demo' : ''))),
                texteMotdepasse: GTraductions.getValeur('connexion.motDePasse'),
                texteRecupIdMdp: this.options.avecRecupIdMdp ? GTraductions.getValeur('connexion.RecuperationMDP.texte') : '',
                modeConnexion1: GTraductions.getValeur('connexion.modeConnexion1'),
                modeConnexion2: GTraductions.getValeur('connexion.modeConnexion2'),
                mentionsLegales: GTraductions.getValeur('mentionsLegales'),
                louvre: {
                    lien: GTraductions.getValeur('Louvre.Lien', ['<b><em>' + lObjetImage.nomExpo + '</em></b>'])
                },
                connexion: {
                    upn: {
                        titre: GTraductions.getValeur('connexion.upn.titre')
                    }
                },
                WAI: {
                    raccourciAccessible: GTraductions.getValeur('WAI.raccourciAccessible'),
                    info: IE.optionsEspaceLocal && IE.optionsEspaceLocal.getModeAccessible(GEtatUtilisateur.GenreEspace) ? GTraductions.getValeur('WAI.modeAccessibleActive') : GTraductions.getValeur('WAI.modeAccessibleDesactive')
                },
                seSouvenirLabel: GTraductions.getValeur('connexion.SeSouvenir'),
                seSouvenirOui: GTraductions.getValeur('principal.oui'),
                seSouvenirNon: GTraductions.getValeur('principal.non'),
                seSouvenirInfo: GTraductions.getValeur('connexion.SeSouvenirInfo'),
                redirigeMobile: GTraductions.getValeur('mobile.redirigeVersionMobile'),
                retourEspace: GTraductions.getValeur('mobile.accederVersionClassique'),
                valider: GTraductions.getValeur('Valider')
            };
            lParamHtml.options = {
                logoDepartementImage: GParametres.logoDepartementImage,
                titreEtablissement: GChaine.AvecEspaceSiVide(GParametres.NomEtablissementConnexion),
                sousTitre: GTraductions.getValeur('AnneeScolaire') + ' ' + GParametres.anneeScolaire,
                urlLien: GParametres.urlSiteIndexEducation,
                titreLien: GParametres.version,
                texteLien: '<div class="Image_Logo_Pronote InlineBlock AlignementBas">&nbsp;</div><div class="Texte10 InlineBlock AlignementBas" style="padding-top: 6px;">&copy; ' + GParametres.millesime + '</div>',
                classImageEspace: lImageEspace,
                genreFondImage: lGenreImageConnexion,
                classFondImage: lObjetImage.classeImage,
                srcFondImage: lObjetImage.srcImage,
                urlImageSuite: lObjetImage.urlImageSuite,
                widthImageSuite: lObjetImage.widthImageSuite,
                heightImageSuite: lObjetImage.heightImageSuite,
                urlImageFond: lObjetImage.urlImageFond || this.options.urlImageConnexion,
                couleurFondBg: lObjetImage.couleurFond || 'white',
                couleurConnexion: lObjetImage.couleurConnexion,
                lien: lObjetImage.lien,
                suiviLogo1: lObjetImage.suiviLogo1,
                suiviLogo2: lObjetImage.suiviLogo2,
                nomEspace: GParametres.GetNomEspace(),
                modeDemo: GApplication.getDemo(),
                avecRecupIdMdp: this.options.avecRecupIdMdp,
                infoWAIident: GTraductions.getValeur('connexion.identifiant'),
                infosO365: this.options.infosO365,
                lienMentions: GParametres.lienMentions,
                logoB64: GParametres.logo || '',
                modeConnexion1: 0,
                modeConnexion2: 1
            };
            var lHtml = [];
            lHtml.push(this.fenetreModalePatience.composerConteneur());
            lHtml.push(lFctHtml(lParamHtml));
            return lHtml.join('');
        };
        InterfaceConnexion_Mobile.prototype.getControleur = function(aInstance) {
            return {
                boutonChangementMDP: {
                    event: function() {
                        aInstance.GetInstance(aInstance.identForcerChangementMDP).valider();
                    },
                    getDisabled: function() {
                        return !aInstance.GetInstance(aInstance.identForcerChangementMDP).avecValidationPossible();
                    }
                },
                getNodeLogoDepartement: function() {
                    $(this.node).on({
                        click: function() {
                            if (GParametres.logoDepartementLien) {
                                window.open(GParametres.logoDepartementLien);
                            }
                        },
                        error: function() {
                            $(this).parent().remove();
                        }
                    });
                }
            };
        };
        InterfaceConnexion_Mobile.prototype.callbackInitSecurisationCompte = function() {
            if (this.estConnexionSansInterface()) {
                var lJPage = $('#' + this.id.pageConnexionAuto.escapeJQ());
                var lJParent = lJPage.parent();
                lJPage.remove();
                lJParent.IEHtmlAppend(this.construirePage(this), {
                    controleur: this.controleur
                });
            }
            GHtml.setDisplay(this.id.Form, false);
        };
        InterfaceConnexion_Mobile.prototype.callbackPersonnalisationMDP_promise = function(aParam) {
            GHtml.setDisplay(this.id.ChangementMDP, true);
            GHtml.setDisplay(this.id.Form, false);
            return new Promise(function(aResolve) {
                this.GetInstance(this.identForcerChangementMDP).setOptions({
                    pourMobile: true,
                    forcerModificationMdp: true,
                    classRequeteSecurisation: ObjetRequeteSecurisationCompteDoubleAuth,
                    actionRequeteSecurisation: TypeCommandeSecurisationCompteHttp.csch_VerifierMotDePassePersonnalise,
                    donneesReglesMdp: aParam.reglesSaisieMDP,
                    messageExplication: aParam.messageForcerModificationMdp,
                    callbackFocusValidation: function() {
                        GHtml.setFocus(this.id.BtnChangementMDP);
                    }.bind(this),
                    callbackApresValidation: function(aParamsForcer) {
                        aResolve({
                            reussite: aParamsForcer && !aParamsForcer.avecErreur,
                            paramForcerMDP: aParamsForcer
                        });
                    }.bind(this)
                }).SetDonnees();
            }.bind(this));
        };
        InterfaceConnexion_Mobile.prototype.callbackSecurisationDoubleAuth_promise = function(aParam) {
            GHtml.setDisplay(this.id.ChangementMDP, false);
            GHtml.setDisplay(this.id.Form, false);
            GHtml.setDisplay(this.id.securisationCompte, true);
            return this.GetInstance(this.identSecurisationCompte).setDonneesPromise(aParam);
        };
        InterfaceConnexion_Mobile.prototype._reussiteAuthentification = function(aParamsAuthentification) {
            Requetes('ParametresUtilisateur', this).lancerRequete().then(function(aParam) {
                var lParams = Object.assign(aParamsAuthentification, aParam);
                GApplication.initAuthentification(lParams);
                GEtatUtilisateur.initAuthentification(lParams);
                GParametres.initAuthentification(lParams);
                var lParametres = {
                    libelle: GEtatUtilisateur.Identification.ressource.GetLibelle(),
                    listeRessource: GEtatUtilisateur.Identification.ListeRessources,
                    libelleInformation: ''
                };
                GApplication.afficherEspaceApresAuthentification(lParametres);
            }.bind(this));
        };
        InterfaceConnexion_Mobile.prototype._echecAuthentification = function(aParam) {
            if (this.moteurConnexion.modeValidationAppliMobile) {
                window.loginState = {
                    status: 1,
                    message: this.getMessage(aParam.Acces)
                };
            } else if (GApplication.estAppliMobile) {
                window.messageData.push({
                    action: 'surNonAuth',
                    message: this.getMessage(aParam.Acces)
                });
            }
        };
        InterfaceConnexion_Mobile.prototype.passerEnModeValidationAppliMobile = function(aLogin, aUuid, aJeton, aCode) {
            this.moteurConnexion.modeValidationAppliMobile = true;
            this.moteurConnexion.uuidAppliMobile = aUuid;
            this.moteurConnexion.modeValidationAppliMobileJeton = !!aLogin && !!aUuid && !!aJeton && !!aCode;
            $('#' + this.id.checkSouvenir).parent().parent().parent().hide();
            $('#' + this.id.btnConnexion).text(GTraductions.getValeur('Valider'));
            if (this.moteurConnexion.modeValidationAppliMobileJeton) {
                var lLoginDecode = GCryptage.decrypter({
                    genreCryptage: EGenreCryptage.AES,
                    chaine: aLogin,
                    cle: GCryptage.getBuffer(aCode),
                    iv: GCryptage.getBuffer('')
                });
                var lJetonDecode = GCryptage.decrypter({
                    genreCryptage: EGenreCryptage.AES,
                    chaine: aJeton,
                    cle: GCryptage.getBuffer(aCode),
                    iv: GCryptage.getBuffer('')
                });
                setTimeout(this.traiterEvenementValidation.bind(this, lLoginDecode, lJetonDecode, null, aUuid), 250);
            } else if (aLogin) {
                this.moteurConnexion.setLogin(aLogin);
                $('#' + this.id.identification).focus().blur();
            }
        };
        InterfaceConnexion_Mobile.prototype.getMessage = function(AGenreErreur) {
            switch (AGenreErreur) {
                case EGenreErreurAcces.Identification:
                    return GTraductions.getValeur('connexion.ErreurIdentification');
                case EGenreErreurAcces.Autorisation:
                    return GTraductions.getValeur('connexion.ErreurAutorisation', [GParametres.GetNomEspace()]);
                case EGenreErreurAcces.AucuneRessource:
                    return GTraductions.getValeur('connexion.ErreurAucuneRessource', [GParametres.GetNomEspace()]);
                case EGenreErreurAcces.BloqueeEleve:
                    return GTraductions.getValeur('connexion.ErreurBloqueeEleve');
                case EGenreErreurAcces.FonctionAccompagnant:
                    return GTraductions.getValeur('connexion.ErreurFonctionAccompagnant');
                case EGenreErreurAcces.AccompagnantAucunEleve:
                    return GTraductions.getValeur('connexion.ErreurAccompagnantAucunEleve');
                default:
                    return '';
            }
        };
        module.exports = InterfaceConnexion_Mobile;
    },
    fn: "interfaceconnexion_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetRequeteConsultation = require('ObjetRequeteJSON.js').ObjetRequeteConsultation;
        var Requetes = require('CollectionRequetes.js');

        function ObjetRequetePresence() {
            this.inheritedCreate(null, function() {}, function() {});
            this.setOptions({
                sansBlocageInterface: true
            });
        }
        Requetes.inscrire('Presence', ObjetRequetePresence, ObjetRequeteConsultation);
        ObjetRequetePresence.prototype.lancerRequete = function() {
            return this.appelAsynchrone();
        };
        ObjetRequetePresence.prototype.actionApresRequete = function() {};
        module.exports = ObjetRequetePresence;
    },
    fn: "objetrequetepresence.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GUID = require('GUID.js');
        var IELocalStorage = require('LocalStorage.js');
        var GTraductions = require('ObjetTraduction.js');

        function ObjetSmartAppBanner(aNom) {
            this.Nom = aNom;
            this.id = GUID.getId();
            this.os = GNavigateur.isAndroid ? 'android' : GNavigateur.isIphone ? 'ios' : false;
            this.isOpen = false;
            this.options = {
                urlApp: 'pronote://launch?action="setprofil"&url="' + location.href + '"',
                delai: 1000,
                delta: 500,
                autoClose: 20,
                daysHidden: 30,
                maxClose: 3,
                maxInst: 10,
                maxAff: 12,
                title: '<div class="Image_Logo_Pronote_AppliMobile">&nbsp;</div>',
                android: {
                    appId: 'com.IndexEducation.Pronote',
                    storeLink: 'market://details?id=com.IndexEducation.Pronote',
                    line1: GTraductions.getValeur('mobile.bandeauAndroid1'),
                    line2: GTraductions.getValeur('mobile.bandeauAndroid2')
                },
                ios: {
                    appId: '1138223804',
                    storeLink: 'itms-apps://itunes.apple.com/app/PRONOTE/id1138223804?mt=8',
                    storeText: GTraductions.getValeur('mobile.storeTextIOS'),
                    line1: GTraductions.getValeur('mobile.bandeauIOS1'),
                    line2: GTraductions.getValeur('mobile.bandeauIOS2')
                }
            };
            this.IELocalStorage = 'ObjetSmartAppBanner';
            this.affichages = IELocalStorage.getItemJSON(this.IELocalStorage);
            if (!this.affichages) {
                this.affichages = {
                    nbClose: 0,
                    dateClose: false,
                    nbAff: 0,
                    nbInst: 0
                };
                IELocalStorage.setItemJSON(this.IELocalStorage, this.affichages);
            } else {
                if (this.affichages.dateClose + (this.options.daysHidden * 24 * 60 * 60 * 1000) < new Date().getTime() && this.affichages.nbAff < this.options.maxAff && this.affichages.nbInst < this.options.maxInst) {
                    this.affichages.nbClose = 0;
                }
                IELocalStorage.setItemJSON(this.IELocalStorage, this.affichages);
            }
            this.canBeOpen = !GApplication.getDemo() && !!this.os && this.affichages.nbClose < this.options.maxClose && this.affichages.nbAff < this.options.maxAff && this.affichages.nbInst < this.options.maxInst;
        }(function() {
            var lTimeout = null,
                lIframe;

            function compose() {
                var lHtml = [];
                lHtml.push('<div id="' + this.id + '" class="smartbanner-container">' + '<div onclick="' + this.Nom + '.open();" class="smartbanner">' + '<span class="smartbanner-icon"></span>' + '<div class="smartbanner-info">' + '<div class="smartbanner-title">' + this.options.title + '</div>' + '<div>' + this.options[this.os].line1 + '</div>' + '<span>' + this.options[this.os].line2 + '</span>' + '</div>' + '</div>' + '<div onclick="' + this.Nom + '.hide(event);" class="smartbanner-close">&times;</div>' + '</div>');
                return lHtml.join('');
            }
            ObjetSmartAppBanner.prototype.show = function() {
                if (!this.canBeOpen || this.isOpen) {
                    return;
                }
                var lThis = this;
                this.affichages.nbAff += 1;
                $('body').append(compose.call(this));
                $('#' + this.id).delay(600).queue(function() {
                    lThis.isOpen = true;
                    $(this).addClass('smartbanner-show');
                    $(this).dequeue();
                });
            };
            ObjetSmartAppBanner.prototype.hide = function(aEvent) {
                if (!!aEvent) {
                    aEvent.stopImmediatePropagation();
                }
                if (!!aEvent) {
                    aEvent.preventDefault();
                }
                this.affichages.nbClose += 1;
                this.affichages.dateClose = new Date().getTime();
                IELocalStorage.setItemJSON(this.IELocalStorage, this.affichages);
                this.isOpen = false;
                $('#' + this.id).removeClass('smartbanner-show').delay(600).queue(function() {
                    $(this).remove();
                    $(this).dequeue();
                });
                return false;
            };

            function openFallbackAndroid(aTimeStamp) {
                clearTimeout(lTimeout);
                if ((new Date().getTime() - aTimeStamp) < (this.options.delai + this.options.delta)) {
                    window.location.href = this.options[this.os].storeLink;
                }
                if (lIframe) {
                    lIframe.parentNode.removeChild(lIframe);
                }
            }
            ObjetSmartAppBanner.prototype.open = function() {
                if (!this.os) {
                    return;
                }
                this.affichages.nbInst += 1;
                IELocalStorage.setItemJSON(this.IELocalStorage, this.affichages);
                var lUri = this.options.urlApp;
                if (GNavigateur.isIphone) {
                    lIframe = window.open(lUri);
                    $(lIframe.document.head).append('<meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, width=device-width, user-scalable=no" />');
                    $(lIframe.document.body).append('<a href="' + this.options[this.os].storeLink + '" style="font-size:25px;display:block;text-align:center;padding:15px;font-family:Arial;" onclick="setTimeout(window.close, 1000);">' + this.options[this.os].storeText + '</a>');
                    return true;
                } else if (GNavigateur.isAndroid) {
                    if (!GNavigateur.IsGecko) {
                        var matches = lUri.match(/([^:]+):\/\/(.+)$/i);
                        lUri = "intent://" + matches[2] + "#Intent;scheme=" + matches[1];
                        lUri += ";package=" + this.options.android.appId + ";end";
                    }
                    lIframe = document.createElement("iframe");
                    lTimeout = setTimeout(openFallbackAndroid.bind(this, new Date().getTime()), this.options.delai);
                    lIframe.onload = function() {
                        clearTimeout(lTimeout);
                        lIframe.parentNode.removeChild(lIframe);
                        window.location.href = lUri;
                    };
                    lIframe.src = lUri;
                    lIframe.setAttribute("style", "display:none;");
                    document.body.appendChild(lIframe);
                    return true;
                } else if (GNavigateur.isWinMob) {
                    lIframe = document.createElement("iframe");
                    lTimeout = setTimeout(function() {
                        if (lIframe) {
                            lIframe.parentNode.removeChild(lIframe);
                        }
                    }, this.options.delai);
                    lIframe.onload = function() {
                        clearTimeout(lTimeout);
                        lIframe.parentNode.removeChild(lIframe);
                    };
                    lIframe.src = this.options[this.os].storeLink;
                    lIframe.setAttribute("style", "display:none;");
                    document.body.appendChild(lIframe);
                }
            };
        })();
        module.exports = ObjetSmartAppBanner;
    },
    fn: "objetsmartappbanner.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var GHtml = require('GHtml.js');
        var GTraductions = require('ObjetTraduction.js');

        function UtilitaireFinSession_Mobile() {}
        UtilitaireFinSession_Mobile.prototype._construireEnTetePageFinSession = function(aParam) {
            var lHtml = [];
            lHtml.push('<nav>', '<div class="nav-wrapper" style="position:relative;line-height:1.5;">', '<div class="brand-logo center">', aParam.nomEspace, '<br />', aParam.nomEtablissement, '</div>', '</div>', '</nav>');
            return lHtml.join('');
        };
        UtilitaireFinSession_Mobile.prototype._construirePageFinSession = function(aParametres) {
            if (this._unloadEnCours) {
                return;
            }
            if (this.estAppliMobile) {
                window.messageData.push({
                    action: 'finSession',
                    data: aParametres
                });
            }
            var lCouleur = {
                texte: 'black',
                fond: 'white',
                bordure: 'black'
            };
            var lParametresFin = {
                jsonErreur: null,
                statut: '',
                couleur: lCouleur,
                sansBoutonSeConnecter: false
            };
            $.extend(lParametresFin, aParametres);
            var lTitre = null;
            var lMessage = null,
                lGenreErreur;
            if (lParametresFin.jsonErreur) {
                lGenreErreur = lParametresFin.jsonErreur.G;
                lTitre = lParametresFin.jsonErreur.Titre;
                lMessage = lParametresFin.jsonErreur.Message;
            }
            lTitre = lTitre === null || lTitre === undefined ? GTraductions.getValeur('connexion.PageIndisponible') : lTitre;
            lMessage = lMessage === null || lMessage === undefined ? GTraductions.getValeur('connexion.AffichagePageImpossible') : lMessage;
            var T = [];
            try {
                T.push(this.construireEnTetePageFinSession(lParametresFin));
            } catch (e) {}
            T.push('<div class="card" style="margin:5rem 1rem 1rem;">', '<div class="card-content">', '<span class="card-title">' + GTraductions.getValeur('connexion.Deconnecter') + '</span>', (lTitre ? '<p class="pageDeconnexion_titre">' + lTitre + (lParametresFin.statut ? ' (' + GTraductions.getValeur('connexion.Erreur') + ' ' + lParametresFin.statut + ')' : '') + '</p>' : ''), (lMessage ? '<p>' + lMessage + '</p>' : ''), '</div>', (lGenreErreur !== 7 && !lParametresFin.sansBoutonSeConnecter ? '<div class="card-action"><a class="link" onkeyup="if (GNavigateur.IsToucheSelection()) window.location.reload()" onclick="window.location.reload ()">' + GTraductions.getValeur('connexion.SeConnecter') + '</a></div>' : ''), '</div>');
            GHtml.setHtml(this.getIdConteneur(), T.join(''));
            try {
                $('.modal, .modal-overlay, .sidenav-overlay').remove();
            } catch (e) {
                require('IELog.js').addLog('Erreur suppression modals');
                setTimeout(function() {
                    $('.modal, .modal-overlay, .sidenav-overlay').remove();
                }, 0);
            }
        };
        module.exports = UtilitaireFinSession_Mobile;
    },
    fn: "utilitairefinsession_mobile.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var TypeGenreTokenPush = {
            GTP_TokenAndroid: 0,
            GTP_TokenIos: 1,
            GTP_TokenWeb: 2,
            GTP_TokenHuawei: 3
        };
        module.exports.TypeGenreTokenPush = TypeGenreTokenPush;
    },
    fn: "typegenretokenpush.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        var ObjetRequeteSaisie = require('ObjetRequeteJSON.js').ObjetRequeteSaisie;
        var Requetes = require('CollectionRequetes.js');
        var TypeGenreTokenPush = require('TypeGenreTokenPush.js').TypeGenreTokenPush;

        function ObjetRequeteSaisieTokenPush() {
            this.inheritedCreate(arguments);
        }
        Requetes.inscrire('SaisieTokenPush', ObjetRequeteSaisieTokenPush, ObjetRequeteSaisie);
        ObjetRequeteSaisieTokenPush.prototype.lancerRequete = function(aParam) {
            var lMapGenreToken = {
                'android': TypeGenreTokenPush.GTP_TokenAndroid,
                'ios': TypeGenreTokenPush.GTP_TokenIos,
                'web': TypeGenreTokenPush.GTP_TokenWeb,
                'androidhms': TypeGenreTokenPush.GTP_TokenHuawei
            };
            this.JSON = {
                token: aParam.token,
                genreToken: lMapGenreToken[aParam.platform.toLowerCase()],
                uuid: aParam.uuid,
                suppr: aParam.suppr
            };
            return this.appelAsynchrone();
        };
        ObjetRequeteSaisieTokenPush.prototype.actionApresRequete = function() {
            this.callbackReussite.appel(this.JSONReponse);
        };
        module.exports = ObjetRequeteSaisieTokenPush;
    },
    fn: "objetrequetesaisietokenpush.js"
});;
IE.fModule({
    f: function(exports, require, module, global) {
        require('namespaceIE.js');
        require('DeclarationJQuery.js');
        require('DeclarationJQueryUI.js');
        require('DeclarationMaterialize.js');
        require('DeclarationGeogebra.js');
        require('DeclarationImagePN.js');
        require('DeclarationCurseurPN.js');
        require('produit/css/ObjetMessageInformatif.css');
        require('DeclarationindexFont.js');
        require('produit/css/general/Alignements.css');
        require('produit/css/general/Couleurs.css');
        require('produit/css/general/Divers.css');
        require('produit/css/general/Espace.css');
        require('produit/css/general/Styles.css');
        require('Produit/css/SurFocus.css');
        require('Produit/css/ImagesQCM.css');
        require('Mobile/Css/communMobile.css');
        require('Mobile/Css/ThemeMobile.css');
        require('mobile/css/pn-theme.css');
        require('mobile/css/SmartAppBanner.css');
        require('images/Themes/Theme_Primaire.css');
        require('ObjetNavigateur_Mobile.js');
        var ObjetApplicationPN = require('ObjetApplicationPN.js');
        require('jIECheckbox.js');
        require('Parametres.js');
        var ObjetEtatUtilisateur_Mobile = require('ObjetEtatUtilisateur_Mobile.js');
        var InterfaceConnexion_Mobile = require('InterfaceConnexion_Mobile.js');
        require('ObjetRequetePresence.js');
        var ObjetSmartAppBanner = require('ObjetSmartAppBanner.js');
        var deferLoadingScript = require('deferLoadingScript.js');
        var MethodesObjet = require('MethodesObjet.js');
        var _ObjetCommunication = require('_ObjetCommunication.js');
        var UtilitaireFinSession_Mobile = require('UtilitaireFinSession_Mobile.js');
        var EGenreEspace = require('Enumere_Espace.js');
        global.GInterface = null;
        global.Start = function(aParam) {
            if (navigator.userAgent.search('PRONOTE Mobile APP') > -1) {
                setTimeout(function() {
                    GApplication = new ObjetApplicationPNMobile();
                    GApplication.lancer(aParam);
                }, 100);
            } else {
                GApplication = new ObjetApplicationPNMobile();
                GApplication.lancer(aParam);
            }
        };

        function ObjetApplicationPNMobile() {
            this.inheritedCreate();
            this.estAppliMobile = false;
            this.infoAppliMobile = {};
            this.utilitaireFinSession = new UtilitaireFinSession_Mobile();
        }
        MethodesObjet.heritagePrototype(ObjetApplicationPNMobile, ObjetApplicationPN);
        ObjetApplicationPNMobile.prototype.initialisation = function(aParametres) {
            GEtatUtilisateur = new ObjetEtatUtilisateur_Mobile(aParametres.genreEspace);
            GEtatUtilisateur.premierChargement = true;
            this.setCommunication(new _ObjetCommunication(aParametres.genreEspace, aParametres.numeroSession));
        };

        function _afficherEspaceApresAuthentification(aParametres) {
            try {
                if (GInterface && GInterface.free) {
                    GInterface.free();
                }
                var ObjetInterfaceMobile = require('InterfaceMobile.js');
                GInterface = new ObjetInterfaceMobile('GInterface', null, null, null);
                GInterface.Initialiser();
                GInterface.SetDonnees(aParametres.libelle, aParametres.listeRessource);
                this.getCommunication().activerPresence();
                if (this.avecGestionModeExclusif()) {
                    if (this.getModeExclusif()) {
                        this.entreeModeExclusif();
                    }
                }
                if (!this.estAppliMobile && (this.acces.estConnexionCAS() || this.acces.estConnexionCookie()) && this.smartAppBanner) {
                    this.smartAppBanner.show();
                }
            } catch (e) {
                if (window.messageErreur) {
                    window.messageErreur('apresAuthentification/' + e);
                }
                require('UtilitaireDeconnexion.js').deconnexionEchecChargement();
            }
        }

        function _finLoadingScript() {
            this._scriptsCharges = true;
            if (this._authentification) {
                _afficherEspaceApresAuthentification.call(this, this._authentification);
            }
            if (window._finLoadingScriptAppliMobile) {
                if (!window.GTraductions) {
                    window.GTraductions = require('ObjetTraduction.js');
                }
                window._finLoadingScriptAppliMobile();
            }
        }
        ObjetApplicationPNMobile.prototype.initialisationApresParametres = function(aParametres) {
            this.inherited('initialisationApresParametres', aParametres);
            $('head').append('<meta name="theme-color" content="#21874a">');
            $('head').append('<meta name="msapplication-navbutton-color" content="#21874a">');
            $('head').append('<meta name="apple-mobile-web-app-status-bar-style" content="#21874a">');
            if (global.GCouleur) {
                GCouleur.baseMobile = '#21874a';
            }
            if (!this.estAppliMobile) {
                this.smartAppBanner = new ObjetSmartAppBanner('GApplication.smartAppBanner');
            }
            GInterface = new InterfaceConnexion_Mobile('GInterface', null, null, null);
            GInterface.Initialiser();
            if (this.acces.estConnexionCAS() || this.acces.estConnexionCookie()) {
                GInterface.traiterEvenementValidation(this.acces.utilisateur.identifiant, this.acces.utilisateur.password, true);
            } else if ((!GApplication.getDemo()) && (GEtatUtilisateur.GenreEspace !== EGenreEspace.Commun) &&
                IE.optionsDebug &&
                IE.optionsDebug.identificationAuto &&
                IE.optionsDebug.getLogin(GEtatUtilisateur.GenreEspace) &&
                IE.optionsDebug.getMdp(GEtatUtilisateur.GenreEspace)) {
                GInterface.traiterEvenementValidation(IE.optionsDebug.getLogin(GEtatUtilisateur.GenreEspace), IE.optionsDebug.getMdp(GEtatUtilisateur.GenreEspace));
            }
            deferLoadingScript.load(['defer'], {
                done: _finLoadingScript.bind(this),
                eventIO: false
            });
        };
        ObjetApplicationPNMobile.prototype.avecGestionModeExclusif = function() {
            return GEtatUtilisateur.Identification && (GEtatUtilisateur.GenreEspace === EGenreEspace.Mobile_Professeur || GEtatUtilisateur.GenreEspace === EGenreEspace.Mobile_PrimProfesseur);
        };
        ObjetApplicationPNMobile.prototype.afficherEspaceApresAuthentification = function(aParametres) {
            if (this._scriptsCharges) {
                _afficherEspaceApresAuthentification.call(this, aParametres);
            } else {
                this._authentification = aParametres;
                if (!deferLoadingScript.afficherPatience()) {
                    _afficherEspaceApresAuthentification.call(this, aParametres);
                }
            }
        };
        ObjetApplicationPNMobile.prototype.getConstructeursDebug = function() {
            var ObjetFenetre_Debug = require('ObjetFenetre_Debug.js');
            var ObjetTraitementMobile_Debug = require('ObjetTraitementMobile_Debug.js');
            return {
                constructeurFenetre: ObjetFenetre_Debug,
                constructeurTraitements: ObjetTraitementMobile_Debug
            };
        };
        ObjetApplicationPNMobile.prototype.construireEnTetePageFinSession = function() {
            return this.utilitaireFinSession._construireEnTetePageFinSession({
                nomEspace: GParametres.GetNomEspace(),
                nomEtablissement: GParametres.nomEtablissementConnexion
            });
        };
        ObjetApplicationPNMobile.prototype.construirePageFinSession = function(aParametres) {
            this.utilitaireFinSession._construirePageFinSession.call(this, aParametres);
        };
        ObjetApplicationPNMobile.prototype.postToken = function(aPlatform, aUuid, aToken, aSuppr) {
            var lSuppr = aSuppr || false;
            var ObjetRequeteTokenPush = require('ObjetRequeteSaisieTokenPush.js');
            new ObjetRequeteTokenPush(this).lancerRequete({
                platform: aPlatform,
                uuid: aUuid,
                token: aToken,
                suppr: lSuppr
            });
        };
        ObjetApplicationPNMobile.prototype.initApp = function(aParams) {
            if (!Invocateur) {
                var Invocateur = require('Invocateur.js').Invocateur;
            }
            if (!ObjetInvocateur) {
                var ObjetInvocateur = require('Invocateur.js').ObjetInvocateur;
            }
            Invocateur.abonner(ObjetInvocateur.events.modificationPresenceUtilisateur, function(aPresence) {
                if (!aPresence) {
                    Invocateur.evenement(ObjetInvocateur.events.modificationPresenceUtilisateur, true);
                }
            }, null);
            GApplication.estAppliMobile = aParams.estAppliMobile;
            GApplication.infoAppliMobile = {
                avecExitApp: aParams.avecExitApp
            };
            if (GApplication.smartAppBanner) {
                $('#' + GApplication.smartAppBanner.id.escapeJQ()).remove();
            }
            GInterface.traiterEvenementValidation(aParams.login, aParams.mdp, null, aParams.uuid);
        };
        module.exports = ObjetApplicationPNMobile;
    },
    fn: "objetapplicationpnmobile.js"
});;
